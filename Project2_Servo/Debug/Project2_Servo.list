
Project2_Servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006154  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080062e4  080062e4  000162e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006388  08006388  000200c4  2**0
                  CONTENTS
  4 .ARM          00000008  08006388  08006388  00016388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006390  08006390  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006390  08006390  00016390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006394  08006394  00016394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  08006398  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003fc  200000c4  0800645c  000200c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c0  0800645c  000204c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010e0b  00000000  00000000  00020137  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023e2  00000000  00000000  00030f42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f78  00000000  00000000  00033328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c15  00000000  00000000  000342a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027d4a  00000000  00000000  00034eb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001242b  00000000  00000000  0005cbff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4742  00000000  00000000  0006f02a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004658  00000000  00000000  0016376c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  00167dc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c4 	.word	0x200000c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080062cc 	.word	0x080062cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c8 	.word	0x200000c8
 80001cc:	080062cc 	.word	0x080062cc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b0c4      	sub	sp, #272	; 0x110
 8000580:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	uint8_t Buffer[256] = { 0 };
 8000582:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000586:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	3304      	adds	r3, #4
 8000590:	22fc      	movs	r2, #252	; 0xfc
 8000592:	2100      	movs	r1, #0
 8000594:	4618      	mov	r0, r3
 8000596:	f005 fac1 	bl	8005b1c <memset>
	int index = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	int user_input = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005a6:	f001 fbaf 	bl	8001d08 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005aa:	f000 f8b5 	bl	8000718 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005ae:	f000 faab 	bl	8000b08 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80005b2:	f000 fa79 	bl	8000aa8 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 80005b6:	f000 f901 	bl	80007bc <MX_TIM2_Init>
	MX_TIM3_Init();
 80005ba:	f000 f977 	bl	80008ac <MX_TIM3_Init>
	MX_TIM6_Init();
 80005be:	f000 fa3b 	bl	8000a38 <MX_TIM6_Init>
	MX_TIM5_Init();
 80005c2:	f000 f9eb 	bl	800099c <MX_TIM5_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80005c6:	2100      	movs	r1, #0
 80005c8:	484c      	ldr	r0, [pc, #304]	; (80006fc <main+0x180>)
 80005ca:	f003 fb37 	bl	8003c3c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80005ce:	2108      	movs	r1, #8
 80005d0:	484b      	ldr	r0, [pc, #300]	; (8000700 <main+0x184>)
 80005d2:	f003 fb33 	bl	8003c3c <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim6);
 80005d6:	484b      	ldr	r0, [pc, #300]	; (8000704 <main+0x188>)
 80005d8:	f003 fa5e 	bl	8003a98 <HAL_TIM_Base_Start_IT>
	MOVE_MOTOR1_POS1()
 80005dc:	4b4a      	ldr	r3, [pc, #296]	; (8000708 <main+0x18c>)
 80005de:	2218      	movs	r2, #24
 80005e0:	635a      	str	r2, [r3, #52]	; 0x34
	MOVE_MOTOR2_POS1()
 80005e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005e6:	2218      	movs	r2, #24
 80005e8:	63da      	str	r2, [r3, #60]	; 0x3c
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		//Check if there is data available to recieve
		if ((USART2->ISR & UART_FLAG_RXNE)) {
 80005ea:	4b48      	ldr	r3, [pc, #288]	; (800070c <main+0x190>)
 80005ec:	69db      	ldr	r3, [r3, #28]
 80005ee:	f003 0320 	and.w	r3, r3, #32
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d03e      	beq.n	8000674 <main+0xf8>
			uint8_t Rx = USART2->RDR;
 80005f6:	4b45      	ldr	r3, [pc, #276]	; (800070c <main+0x190>)
 80005f8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80005fa:	b29b      	uxth	r3, r3
 80005fc:	b2da      	uxtb	r2, r3
 80005fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000602:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 8000606:	701a      	strb	r2, [r3, #0]
			Buffer[index] = Rx;
 8000608:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800060c:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 8000610:	7819      	ldrb	r1, [r3, #0]
 8000612:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000616:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 800061a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800061e:	4413      	add	r3, r2
 8000620:	460a      	mov	r2, r1
 8000622:	701a      	strb	r2, [r3, #0]
			index++;
 8000624:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000628:	3301      	adds	r3, #1
 800062a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			HAL_UART_Transmit(&huart2, &Rx, sizeof(uint8_t), 100);
 800062e:	1cf9      	adds	r1, r7, #3
 8000630:	2364      	movs	r3, #100	; 0x64
 8000632:	2201      	movs	r2, #1
 8000634:	4836      	ldr	r0, [pc, #216]	; (8000710 <main+0x194>)
 8000636:	f004 fc33 	bl	8004ea0 <HAL_UART_Transmit>
			if (Rx == '\n' || Rx == '\r') {
 800063a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800063e:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	2b0a      	cmp	r3, #10
 8000646:	d006      	beq.n	8000656 <main+0xda>
 8000648:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800064c:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b0d      	cmp	r3, #13
 8000654:	d10e      	bne.n	8000674 <main+0xf8>
				Buffer[index] = '\n';
 8000656:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800065a:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 800065e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000662:	4413      	add	r3, r2
 8000664:	220a      	movs	r2, #10
 8000666:	701a      	strb	r2, [r3, #0]
				index = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
				user_input = 1;
 800066e:	2301      	movs	r3, #1
 8000670:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			}
		}
		if (user_input == 1) {
 8000674:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000678:	2b01      	cmp	r3, #1
 800067a:	d134      	bne.n	80006e6 <main+0x16a>
			uint8_t Rx = '\r';
 800067c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000680:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 8000684:	220d      	movs	r2, #13
 8000686:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, &Rx, sizeof(uint8_t), 100);
 8000688:	1cb9      	adds	r1, r7, #2
 800068a:	2364      	movs	r3, #100	; 0x64
 800068c:	2201      	movs	r2, #1
 800068e:	4820      	ldr	r0, [pc, #128]	; (8000710 <main+0x194>)
 8000690:	f004 fc06 	bl	8004ea0 <HAL_UART_Transmit>
			Rx = '\n';
 8000694:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000698:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 800069c:	220a      	movs	r2, #10
 800069e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, &Rx, sizeof(uint8_t), 100);
 80006a0:	1cb9      	adds	r1, r7, #2
 80006a2:	2364      	movs	r3, #100	; 0x64
 80006a4:	2201      	movs	r2, #1
 80006a6:	481a      	ldr	r0, [pc, #104]	; (8000710 <main+0x194>)
 80006a8:	f004 fbfa 	bl	8004ea0 <HAL_UART_Transmit>
			//Interpret user command, process events based on it
			char cmd1 = Buffer[0];
 80006ac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80006b0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
			char cmd2 = Buffer[1];
 80006ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80006be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80006c2:	785b      	ldrb	r3, [r3, #1]
 80006c4:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
			cmd_generate_event(cmd1, 1);
 80006c8:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80006cc:	2101      	movs	r1, #1
 80006ce:	4618      	mov	r0, r3
 80006d0:	f000 fa80 	bl	8000bd4 <cmd_generate_event>
			cmd_generate_event(cmd2, 2);
 80006d4:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 80006d8:	2102      	movs	r1, #2
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 fa7a 	bl	8000bd4 <cmd_generate_event>
			user_input = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		}
		//Go to the state machine and check servos
		state_machine();
 80006e6:	f000 fee5 	bl	80014b4 <state_machine>

		//Wait for overflow to occur and the timer reset
		while (timer_running == true) {
 80006ea:	bf00      	nop
 80006ec:	4b09      	ldr	r3, [pc, #36]	; (8000714 <main+0x198>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d1fb      	bne.n	80006ec <main+0x170>
		}
		timer_running = true;
 80006f4:	4b07      	ldr	r3, [pc, #28]	; (8000714 <main+0x198>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	701a      	strb	r2, [r3, #0]
		if ((USART2->ISR & UART_FLAG_RXNE)) {
 80006fa:	e776      	b.n	80005ea <main+0x6e>
 80006fc:	2000012c 	.word	0x2000012c
 8000700:	200000e0 	.word	0x200000e0
 8000704:	200001c4 	.word	0x200001c4
 8000708:	40000400 	.word	0x40000400
 800070c:	40004400 	.word	0x40004400
 8000710:	20000210 	.word	0x20000210
 8000714:	20000000 	.word	0x20000000

08000718 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000718:	b580      	push	{r7, lr}
 800071a:	b096      	sub	sp, #88	; 0x58
 800071c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	2244      	movs	r2, #68	; 0x44
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f005 f9f8 	bl	8005b1c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800072c:	463b      	mov	r3, r7
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 800073a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800073e:	f001 fe41 	bl	80023c4 <HAL_PWREx_ControlVoltageScaling>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8000748:	f000 fbc2 	bl	8000ed0 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800074c:	2302      	movs	r3, #2
 800074e:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000750:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000754:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000756:	2310      	movs	r3, #16
 8000758:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075a:	2302      	movs	r3, #2
 800075c:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800075e:	2302      	movs	r3, #2
 8000760:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000762:	2301      	movs	r3, #1
 8000764:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8000766:	230a      	movs	r3, #10
 8000768:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800076a:	2307      	movs	r3, #7
 800076c:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800076e:	2302      	movs	r3, #2
 8000770:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000772:	2302      	movs	r3, #2
 8000774:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	4618      	mov	r0, r3
 800077c:	f001 fe78 	bl	8002470 <HAL_RCC_OscConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0x72>
		Error_Handler();
 8000786:	f000 fba3 	bl	8000ed0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800078a:	230f      	movs	r3, #15
 800078c:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078e:	2303      	movs	r3, #3
 8000790:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800079a:	2300      	movs	r3, #0
 800079c:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800079e:	463b      	mov	r3, r7
 80007a0:	2104      	movs	r1, #4
 80007a2:	4618      	mov	r0, r3
 80007a4:	f002 fa40 	bl	8002c28 <HAL_RCC_ClockConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0x9a>
		Error_Handler();
 80007ae:	f000 fb8f 	bl	8000ed0 <Error_Handler>
	}
}
 80007b2:	bf00      	nop
 80007b4:	3758      	adds	r7, #88	; 0x58
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
	...

080007bc <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08e      	sub	sp, #56	; 0x38
 80007c0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80007c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80007d0:	f107 031c 	add.w	r3, r7, #28
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80007dc:	463b      	mov	r3, r7
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]
 80007ea:	615a      	str	r2, [r3, #20]
 80007ec:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80007ee:	4b2e      	ldr	r3, [pc, #184]	; (80008a8 <MX_TIM2_Init+0xec>)
 80007f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007f4:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 1599;
 80007f6:	4b2c      	ldr	r3, [pc, #176]	; (80008a8 <MX_TIM2_Init+0xec>)
 80007f8:	f240 623f 	movw	r2, #1599	; 0x63f
 80007fc:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007fe:	4b2a      	ldr	r3, [pc, #168]	; (80008a8 <MX_TIM2_Init+0xec>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000;
 8000804:	4b28      	ldr	r3, [pc, #160]	; (80008a8 <MX_TIM2_Init+0xec>)
 8000806:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800080a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800080c:	4b26      	ldr	r3, [pc, #152]	; (80008a8 <MX_TIM2_Init+0xec>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000812:	4b25      	ldr	r3, [pc, #148]	; (80008a8 <MX_TIM2_Init+0xec>)
 8000814:	2280      	movs	r2, #128	; 0x80
 8000816:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000818:	4823      	ldr	r0, [pc, #140]	; (80008a8 <MX_TIM2_Init+0xec>)
 800081a:	f003 f8e5 	bl	80039e8 <HAL_TIM_Base_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_TIM2_Init+0x6c>
		Error_Handler();
 8000824:	f000 fb54 	bl	8000ed0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000828:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800082e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000832:	4619      	mov	r1, r3
 8000834:	481c      	ldr	r0, [pc, #112]	; (80008a8 <MX_TIM2_Init+0xec>)
 8000836:	f003 fd1d 	bl	8004274 <HAL_TIM_ConfigClockSource>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_TIM2_Init+0x88>
		Error_Handler();
 8000840:	f000 fb46 	bl	8000ed0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8000844:	4818      	ldr	r0, [pc, #96]	; (80008a8 <MX_TIM2_Init+0xec>)
 8000846:	f003 f997 	bl	8003b78 <HAL_TIM_PWM_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM2_Init+0x98>
		Error_Handler();
 8000850:	f000 fb3e 	bl	8000ed0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000854:	2300      	movs	r3, #0
 8000856:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000858:	2300      	movs	r3, #0
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800085c:	f107 031c 	add.w	r3, r7, #28
 8000860:	4619      	mov	r1, r3
 8000862:	4811      	ldr	r0, [pc, #68]	; (80008a8 <MX_TIM2_Init+0xec>)
 8000864:	f004 fa28 	bl	8004cb8 <HAL_TIMEx_MasterConfigSynchronization>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_TIM2_Init+0xb6>
			!= HAL_OK) {
		Error_Handler();
 800086e:	f000 fb2f 	bl	8000ed0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000872:	2360      	movs	r3, #96	; 0x60
 8000874:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800087a:	2300      	movs	r3, #0
 800087c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 8000882:	463b      	mov	r3, r7
 8000884:	2208      	movs	r2, #8
 8000886:	4619      	mov	r1, r3
 8000888:	4807      	ldr	r0, [pc, #28]	; (80008a8 <MX_TIM2_Init+0xec>)
 800088a:	f003 fbdf 	bl	800404c <HAL_TIM_PWM_ConfigChannel>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_TIM2_Init+0xdc>
			!= HAL_OK) {
		Error_Handler();
 8000894:	f000 fb1c 	bl	8000ed0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8000898:	4803      	ldr	r0, [pc, #12]	; (80008a8 <MX_TIM2_Init+0xec>)
 800089a:	f001 f8bf 	bl	8001a1c <HAL_TIM_MspPostInit>

}
 800089e:	bf00      	nop
 80008a0:	3738      	adds	r7, #56	; 0x38
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	200000e0 	.word	0x200000e0

080008ac <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08e      	sub	sp, #56	; 0x38
 80008b0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80008b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80008c0:	f107 031c 	add.w	r3, r7, #28
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80008cc:	463b      	mov	r3, r7
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
 80008d8:	611a      	str	r2, [r3, #16]
 80008da:	615a      	str	r2, [r3, #20]
 80008dc:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80008de:	4b2d      	ldr	r3, [pc, #180]	; (8000994 <MX_TIM3_Init+0xe8>)
 80008e0:	4a2d      	ldr	r2, [pc, #180]	; (8000998 <MX_TIM3_Init+0xec>)
 80008e2:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 1599;
 80008e4:	4b2b      	ldr	r3, [pc, #172]	; (8000994 <MX_TIM3_Init+0xe8>)
 80008e6:	f240 623f 	movw	r2, #1599	; 0x63f
 80008ea:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ec:	4b29      	ldr	r3, [pc, #164]	; (8000994 <MX_TIM3_Init+0xe8>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1000;
 80008f2:	4b28      	ldr	r3, [pc, #160]	; (8000994 <MX_TIM3_Init+0xe8>)
 80008f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008f8:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008fa:	4b26      	ldr	r3, [pc, #152]	; (8000994 <MX_TIM3_Init+0xe8>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000900:	4b24      	ldr	r3, [pc, #144]	; (8000994 <MX_TIM3_Init+0xe8>)
 8000902:	2280      	movs	r2, #128	; 0x80
 8000904:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000906:	4823      	ldr	r0, [pc, #140]	; (8000994 <MX_TIM3_Init+0xe8>)
 8000908:	f003 f86e 	bl	80039e8 <HAL_TIM_Base_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_TIM3_Init+0x6a>
		Error_Handler();
 8000912:	f000 fadd 	bl	8000ed0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000916:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800091c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000920:	4619      	mov	r1, r3
 8000922:	481c      	ldr	r0, [pc, #112]	; (8000994 <MX_TIM3_Init+0xe8>)
 8000924:	f003 fca6 	bl	8004274 <HAL_TIM_ConfigClockSource>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_TIM3_Init+0x86>
		Error_Handler();
 800092e:	f000 facf 	bl	8000ed0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8000932:	4818      	ldr	r0, [pc, #96]	; (8000994 <MX_TIM3_Init+0xe8>)
 8000934:	f003 f920 	bl	8003b78 <HAL_TIM_PWM_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_TIM3_Init+0x96>
		Error_Handler();
 800093e:	f000 fac7 	bl	8000ed0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000942:	2300      	movs	r3, #0
 8000944:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	4619      	mov	r1, r3
 8000950:	4810      	ldr	r0, [pc, #64]	; (8000994 <MX_TIM3_Init+0xe8>)
 8000952:	f004 f9b1 	bl	8004cb8 <HAL_TIMEx_MasterConfigSynchronization>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM3_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 800095c:	f000 fab8 	bl	8000ed0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000960:	2360      	movs	r3, #96	; 0x60
 8000962:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000968:	2300      	movs	r3, #0
 800096a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800096c:	2300      	movs	r3, #0
 800096e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8000970:	463b      	mov	r3, r7
 8000972:	2200      	movs	r2, #0
 8000974:	4619      	mov	r1, r3
 8000976:	4807      	ldr	r0, [pc, #28]	; (8000994 <MX_TIM3_Init+0xe8>)
 8000978:	f003 fb68 	bl	800404c <HAL_TIM_PWM_ConfigChannel>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM3_Init+0xda>
			!= HAL_OK) {
		Error_Handler();
 8000982:	f000 faa5 	bl	8000ed0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000986:	4803      	ldr	r0, [pc, #12]	; (8000994 <MX_TIM3_Init+0xe8>)
 8000988:	f001 f848 	bl	8001a1c <HAL_TIM_MspPostInit>

}
 800098c:	bf00      	nop
 800098e:	3738      	adds	r7, #56	; 0x38
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	2000012c 	.word	0x2000012c
 8000998:	40000400 	.word	0x40000400

0800099c <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 800099c:	b580      	push	{r7, lr}
 800099e:	b088      	sub	sp, #32
 80009a0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80009a2:	f107 0310 	add.w	r3, r7, #16
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 80009ba:	4b1d      	ldr	r3, [pc, #116]	; (8000a30 <MX_TIM5_Init+0x94>)
 80009bc:	4a1d      	ldr	r2, [pc, #116]	; (8000a34 <MX_TIM5_Init+0x98>)
 80009be:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 80009c0:	4b1b      	ldr	r3, [pc, #108]	; (8000a30 <MX_TIM5_Init+0x94>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c6:	4b1a      	ldr	r3, [pc, #104]	; (8000a30 <MX_TIM5_Init+0x94>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 80009cc:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <MX_TIM5_Init+0x94>)
 80009ce:	f04f 32ff 	mov.w	r2, #4294967295
 80009d2:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d4:	4b16      	ldr	r3, [pc, #88]	; (8000a30 <MX_TIM5_Init+0x94>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009da:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <MX_TIM5_Init+0x94>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 80009e0:	4813      	ldr	r0, [pc, #76]	; (8000a30 <MX_TIM5_Init+0x94>)
 80009e2:	f003 f801 	bl	80039e8 <HAL_TIM_Base_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM5_Init+0x54>
		Error_Handler();
 80009ec:	f000 fa70 	bl	8000ed0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009f4:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 80009f6:	f107 0310 	add.w	r3, r7, #16
 80009fa:	4619      	mov	r1, r3
 80009fc:	480c      	ldr	r0, [pc, #48]	; (8000a30 <MX_TIM5_Init+0x94>)
 80009fe:	f003 fc39 	bl	8004274 <HAL_TIM_ConfigClockSource>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM5_Init+0x70>
		Error_Handler();
 8000a08:	f000 fa62 	bl	8000ed0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a10:	2300      	movs	r3, #0
 8000a12:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8000a14:	1d3b      	adds	r3, r7, #4
 8000a16:	4619      	mov	r1, r3
 8000a18:	4805      	ldr	r0, [pc, #20]	; (8000a30 <MX_TIM5_Init+0x94>)
 8000a1a:	f004 f94d 	bl	8004cb8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM5_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8000a24:	f000 fa54 	bl	8000ed0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8000a28:	bf00      	nop
 8000a2a:	3720      	adds	r7, #32
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20000178 	.word	0x20000178
 8000a34:	40000c00 	.word	0x40000c00

08000a38 <MX_TIM6_Init>:
/**
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8000a48:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <MX_TIM6_Init+0x68>)
 8000a4a:	4a16      	ldr	r2, [pc, #88]	; (8000aa4 <MX_TIM6_Init+0x6c>)
 8000a4c:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 7999;
 8000a4e:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <MX_TIM6_Init+0x68>)
 8000a50:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000a54:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a56:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <MX_TIM6_Init+0x68>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 1000;
 8000a5c:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <MX_TIM6_Init+0x68>)
 8000a5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a62:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a64:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <MX_TIM6_Init+0x68>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8000a6a:	480d      	ldr	r0, [pc, #52]	; (8000aa0 <MX_TIM6_Init+0x68>)
 8000a6c:	f002 ffbc 	bl	80039e8 <HAL_TIM_Base_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_TIM6_Init+0x42>
		Error_Handler();
 8000a76:	f000 fa2b 	bl	8000ed0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	4619      	mov	r1, r3
 8000a86:	4806      	ldr	r0, [pc, #24]	; (8000aa0 <MX_TIM6_Init+0x68>)
 8000a88:	f004 f916 	bl	8004cb8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_TIM6_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 8000a92:	f000 fa1d 	bl	8000ed0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	3710      	adds	r7, #16
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	200001c4 	.word	0x200001c4
 8000aa4:	40001000 	.word	0x40001000

08000aa8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000aac:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <MX_USART2_UART_Init+0x58>)
 8000aae:	4a15      	ldr	r2, [pc, #84]	; (8000b04 <MX_USART2_UART_Init+0x5c>)
 8000ab0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000ab2:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <MX_USART2_UART_Init+0x58>)
 8000ab4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ab8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aba:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <MX_USART2_UART_Init+0x58>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <MX_USART2_UART_Init+0x58>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <MX_USART2_UART_Init+0x58>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <MX_USART2_UART_Init+0x58>)
 8000ace:	220c      	movs	r2, #12
 8000ad0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <MX_USART2_UART_Init+0x58>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad8:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <MX_USART2_UART_Init+0x58>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ade:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <MX_USART2_UART_Init+0x58>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <MX_USART2_UART_Init+0x58>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000aea:	4805      	ldr	r0, [pc, #20]	; (8000b00 <MX_USART2_UART_Init+0x58>)
 8000aec:	f004 f98a 	bl	8004e04 <HAL_UART_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8000af6:	f000 f9eb 	bl	8000ed0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000210 	.word	0x20000210
 8000b04:	40004400 	.word	0x40004400

08000b08 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08a      	sub	sp, #40	; 0x28
 8000b0c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]
 8000b1a:	60da      	str	r2, [r3, #12]
 8000b1c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1e:	4b2b      	ldr	r3, [pc, #172]	; (8000bcc <MX_GPIO_Init+0xc4>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b22:	4a2a      	ldr	r2, [pc, #168]	; (8000bcc <MX_GPIO_Init+0xc4>)
 8000b24:	f043 0304 	orr.w	r3, r3, #4
 8000b28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b2a:	4b28      	ldr	r3, [pc, #160]	; (8000bcc <MX_GPIO_Init+0xc4>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2e:	f003 0304 	and.w	r3, r3, #4
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000b36:	4b25      	ldr	r3, [pc, #148]	; (8000bcc <MX_GPIO_Init+0xc4>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3a:	4a24      	ldr	r2, [pc, #144]	; (8000bcc <MX_GPIO_Init+0xc4>)
 8000b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b42:	4b22      	ldr	r3, [pc, #136]	; (8000bcc <MX_GPIO_Init+0xc4>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	4b1f      	ldr	r3, [pc, #124]	; (8000bcc <MX_GPIO_Init+0xc4>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b52:	4a1e      	ldr	r2, [pc, #120]	; (8000bcc <MX_GPIO_Init+0xc4>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b5a:	4b1c      	ldr	r3, [pc, #112]	; (8000bcc <MX_GPIO_Init+0xc4>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	60bb      	str	r3, [r7, #8]
 8000b64:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b66:	4b19      	ldr	r3, [pc, #100]	; (8000bcc <MX_GPIO_Init+0xc4>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6a:	4a18      	ldr	r2, [pc, #96]	; (8000bcc <MX_GPIO_Init+0xc4>)
 8000b6c:	f043 0302 	orr.w	r3, r3, #2
 8000b70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b72:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <MX_GPIO_Init+0xc4>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b76:	f003 0302 	and.w	r3, r3, #2
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2120      	movs	r1, #32
 8000b82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b86:	f001 fbf7 	bl	8002378 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000b8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b8e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b90:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b94:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	480b      	ldr	r0, [pc, #44]	; (8000bd0 <MX_GPIO_Init+0xc8>)
 8000ba2:	f001 fa3f 	bl	8002024 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000ba6:	2320      	movs	r3, #32
 8000ba8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000baa:	2301      	movs	r3, #1
 8000bac:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4619      	mov	r1, r3
 8000bbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc0:	f001 fa30 	bl	8002024 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000bc4:	bf00      	nop
 8000bc6:	3728      	adds	r7, #40	; 0x28
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	48000800 	.word	0x48000800

08000bd4 <cmd_generate_event>:

/* USER CODE BEGIN 4 */
void cmd_generate_event(char cmd, int servo) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	6039      	str	r1, [r7, #0]
 8000bde:	71fb      	strb	r3, [r7, #7]
	switch (cmd) {
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	3b31      	subs	r3, #49	; 0x31
 8000be4:	2b41      	cmp	r3, #65	; 0x41
 8000be6:	f200 80ea 	bhi.w	8000dbe <cmd_generate_event+0x1ea>
 8000bea:	a201      	add	r2, pc, #4	; (adr r2, 8000bf0 <cmd_generate_event+0x1c>)
 8000bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bf0:	08000d65 	.word	0x08000d65
 8000bf4:	08000d77 	.word	0x08000d77
 8000bf8:	08000d89 	.word	0x08000d89
 8000bfc:	08000d9b 	.word	0x08000d9b
 8000c00:	08000dad 	.word	0x08000dad
 8000c04:	08000dbf 	.word	0x08000dbf
 8000c08:	08000dbf 	.word	0x08000dbf
 8000c0c:	08000dbf 	.word	0x08000dbf
 8000c10:	08000dbf 	.word	0x08000dbf
 8000c14:	08000dbf 	.word	0x08000dbf
 8000c18:	08000dbf 	.word	0x08000dbf
 8000c1c:	08000dbf 	.word	0x08000dbf
 8000c20:	08000dbf 	.word	0x08000dbf
 8000c24:	08000dbf 	.word	0x08000dbf
 8000c28:	08000dbf 	.word	0x08000dbf
 8000c2c:	08000dbf 	.word	0x08000dbf
 8000c30:	08000dbf 	.word	0x08000dbf
 8000c34:	08000d53 	.word	0x08000d53
 8000c38:	08000d0b 	.word	0x08000d0b
 8000c3c:	08000dbf 	.word	0x08000dbf
 8000c40:	08000dbf 	.word	0x08000dbf
 8000c44:	08000dbf 	.word	0x08000dbf
 8000c48:	08000dbf 	.word	0x08000dbf
 8000c4c:	08000dbf 	.word	0x08000dbf
 8000c50:	08000dbf 	.word	0x08000dbf
 8000c54:	08000dbf 	.word	0x08000dbf
 8000c58:	08000dbf 	.word	0x08000dbf
 8000c5c:	08000d2f 	.word	0x08000d2f
 8000c60:	08000dbf 	.word	0x08000dbf
 8000c64:	08000d41 	.word	0x08000d41
 8000c68:	08000dbf 	.word	0x08000dbf
 8000c6c:	08000cf9 	.word	0x08000cf9
 8000c70:	08000dbf 	.word	0x08000dbf
 8000c74:	08000d1d 	.word	0x08000d1d
 8000c78:	08000dbf 	.word	0x08000dbf
 8000c7c:	08000dbf 	.word	0x08000dbf
 8000c80:	08000dbf 	.word	0x08000dbf
 8000c84:	08000dbf 	.word	0x08000dbf
 8000c88:	08000dbf 	.word	0x08000dbf
 8000c8c:	08000dbf 	.word	0x08000dbf
 8000c90:	08000dbf 	.word	0x08000dbf
 8000c94:	08000dbf 	.word	0x08000dbf
 8000c98:	08000dbf 	.word	0x08000dbf
 8000c9c:	08000dbf 	.word	0x08000dbf
 8000ca0:	08000dbf 	.word	0x08000dbf
 8000ca4:	08000dbf 	.word	0x08000dbf
 8000ca8:	08000dbf 	.word	0x08000dbf
 8000cac:	08000dbf 	.word	0x08000dbf
 8000cb0:	08000dbf 	.word	0x08000dbf
 8000cb4:	08000d53 	.word	0x08000d53
 8000cb8:	08000d0b 	.word	0x08000d0b
 8000cbc:	08000dbf 	.word	0x08000dbf
 8000cc0:	08000dbf 	.word	0x08000dbf
 8000cc4:	08000dbf 	.word	0x08000dbf
 8000cc8:	08000dbf 	.word	0x08000dbf
 8000ccc:	08000dbf 	.word	0x08000dbf
 8000cd0:	08000dbf 	.word	0x08000dbf
 8000cd4:	08000dbf 	.word	0x08000dbf
 8000cd8:	08000dbf 	.word	0x08000dbf
 8000cdc:	08000d2f 	.word	0x08000d2f
 8000ce0:	08000dbf 	.word	0x08000dbf
 8000ce4:	08000d41 	.word	0x08000d41
 8000ce8:	08000dbf 	.word	0x08000dbf
 8000cec:	08000cf9 	.word	0x08000cf9
 8000cf0:	08000dbf 	.word	0x08000dbf
 8000cf4:	08000d1d 	.word	0x08000d1d
	enum events event;
case ('P'):
case ('p'):
	event = user_entered_Pause;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	73fb      	strb	r3, [r7, #15]
	process_event(event, servo, &huart2);
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
 8000cfe:	4a36      	ldr	r2, [pc, #216]	; (8000dd8 <cmd_generate_event+0x204>)
 8000d00:	6839      	ldr	r1, [r7, #0]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f000 f8ea 	bl	8000edc <process_event>
	//generate event "Pause"
	;
	break;
 8000d08:	e062      	b.n	8000dd0 <cmd_generate_event+0x1fc>
case ('C'):
case ('c'):
	event = user_entered_Continue;
 8000d0a:	2304      	movs	r3, #4
 8000d0c:	73fb      	strb	r3, [r7, #15]
	process_event(event, servo, &huart2);
 8000d0e:	7bfb      	ldrb	r3, [r7, #15]
 8000d10:	4a31      	ldr	r2, [pc, #196]	; (8000dd8 <cmd_generate_event+0x204>)
 8000d12:	6839      	ldr	r1, [r7, #0]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f000 f8e1 	bl	8000edc <process_event>
	//generate event "Continue"
	;
	break;
 8000d1a:	e059      	b.n	8000dd0 <cmd_generate_event+0x1fc>
case ('R'):
case ('r'):
	event = user_entered_Right;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	73fb      	strb	r3, [r7, #15]
	process_event(event, servo, &huart2);
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
 8000d22:	4a2d      	ldr	r2, [pc, #180]	; (8000dd8 <cmd_generate_event+0x204>)
 8000d24:	6839      	ldr	r1, [r7, #0]
 8000d26:	4618      	mov	r0, r3
 8000d28:	f000 f8d8 	bl	8000edc <process_event>
	//generate event "Right"
	;
	break;
 8000d2c:	e050      	b.n	8000dd0 <cmd_generate_event+0x1fc>
case ('L'):
case ('l'):
	event = user_entered_left;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	73fb      	strb	r3, [r7, #15]
	process_event(event, servo, &huart2);
 8000d32:	7bfb      	ldrb	r3, [r7, #15]
 8000d34:	4a28      	ldr	r2, [pc, #160]	; (8000dd8 <cmd_generate_event+0x204>)
 8000d36:	6839      	ldr	r1, [r7, #0]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f000 f8cf 	bl	8000edc <process_event>
	//generate event "Left"
	;
	break;
 8000d3e:	e047      	b.n	8000dd0 <cmd_generate_event+0x1fc>
case ('N'):
case ('n'):
	event = user_entered_NOOP;
 8000d40:	2305      	movs	r3, #5
 8000d42:	73fb      	strb	r3, [r7, #15]
	process_event(event, servo, &huart2);
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
 8000d46:	4a24      	ldr	r2, [pc, #144]	; (8000dd8 <cmd_generate_event+0x204>)
 8000d48:	6839      	ldr	r1, [r7, #0]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 f8c6 	bl	8000edc <process_event>
	//generate event "NOOP"
	;
	break;
 8000d50:	e03e      	b.n	8000dd0 <cmd_generate_event+0x1fc>
case ('B'):
case ('b'):
	event = user_entered_begin;
 8000d52:	2306      	movs	r3, #6
 8000d54:	73fb      	strb	r3, [r7, #15]
	process_event(event, servo, &huart2);
 8000d56:	7bfb      	ldrb	r3, [r7, #15]
 8000d58:	4a1f      	ldr	r2, [pc, #124]	; (8000dd8 <cmd_generate_event+0x204>)
 8000d5a:	6839      	ldr	r1, [r7, #0]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f000 f8bd 	bl	8000edc <process_event>
	//generate event "Restart/Begin"
	;
	break;
 8000d62:	e035      	b.n	8000dd0 <cmd_generate_event+0x1fc>
	//User entered recipe selection
case ('1'):
	event = user_entered_recipe1;
 8000d64:	2307      	movs	r3, #7
 8000d66:	73fb      	strb	r3, [r7, #15]
	process_event(event, servo, &huart2);
 8000d68:	7bfb      	ldrb	r3, [r7, #15]
 8000d6a:	4a1b      	ldr	r2, [pc, #108]	; (8000dd8 <cmd_generate_event+0x204>)
 8000d6c:	6839      	ldr	r1, [r7, #0]
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f000 f8b4 	bl	8000edc <process_event>
	break;
 8000d74:	e02c      	b.n	8000dd0 <cmd_generate_event+0x1fc>
case ('2'):
	event = user_entered_recipe2;
 8000d76:	2308      	movs	r3, #8
 8000d78:	73fb      	strb	r3, [r7, #15]
	process_event(event, servo, &huart2);
 8000d7a:	7bfb      	ldrb	r3, [r7, #15]
 8000d7c:	4a16      	ldr	r2, [pc, #88]	; (8000dd8 <cmd_generate_event+0x204>)
 8000d7e:	6839      	ldr	r1, [r7, #0]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f000 f8ab 	bl	8000edc <process_event>
	break;
 8000d86:	e023      	b.n	8000dd0 <cmd_generate_event+0x1fc>
case ('3'):
	event = user_entered_recipe3;
 8000d88:	2309      	movs	r3, #9
 8000d8a:	73fb      	strb	r3, [r7, #15]
	process_event(event, servo, &huart2);
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
 8000d8e:	4a12      	ldr	r2, [pc, #72]	; (8000dd8 <cmd_generate_event+0x204>)
 8000d90:	6839      	ldr	r1, [r7, #0]
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 f8a2 	bl	8000edc <process_event>
	break;
 8000d98:	e01a      	b.n	8000dd0 <cmd_generate_event+0x1fc>
case ('4'):
	event = user_entered_recipe4;
 8000d9a:	230a      	movs	r3, #10
 8000d9c:	73fb      	strb	r3, [r7, #15]
	process_event(event, servo, &huart2);
 8000d9e:	7bfb      	ldrb	r3, [r7, #15]
 8000da0:	4a0d      	ldr	r2, [pc, #52]	; (8000dd8 <cmd_generate_event+0x204>)
 8000da2:	6839      	ldr	r1, [r7, #0]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f000 f899 	bl	8000edc <process_event>
	break;
 8000daa:	e011      	b.n	8000dd0 <cmd_generate_event+0x1fc>
case ('5'):
	event = user_entered_recipe5;
 8000dac:	230b      	movs	r3, #11
 8000dae:	73fb      	strb	r3, [r7, #15]
	process_event(event, servo, &huart2);
 8000db0:	7bfb      	ldrb	r3, [r7, #15]
 8000db2:	4a09      	ldr	r2, [pc, #36]	; (8000dd8 <cmd_generate_event+0x204>)
 8000db4:	6839      	ldr	r1, [r7, #0]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f000 f890 	bl	8000edc <process_event>
	break;
 8000dbc:	e008      	b.n	8000dd0 <cmd_generate_event+0x1fc>
default:
	event = user_entered_invalid;
 8000dbe:	230d      	movs	r3, #13
 8000dc0:	73fb      	strb	r3, [r7, #15]
	process_event(event, servo, &huart2);
 8000dc2:	7bfb      	ldrb	r3, [r7, #15]
 8000dc4:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <cmd_generate_event+0x204>)
 8000dc6:	6839      	ldr	r1, [r7, #0]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f000 f887 	bl	8000edc <process_event>
	//handle Wrong input
	;
	break;
 8000dce:	bf00      	nop

	}

}
 8000dd0:	bf00      	nop
 8000dd2:	3710      	adds	r7, #16
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20000210 	.word	0x20000210

08000ddc <Move_Servo>:

void Move_Servo(int pos, int servo) {
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
	if (servo == 1) {
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d129      	bne.n	8000e40 <Move_Servo+0x64>
		switch (pos) {
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2b05      	cmp	r3, #5
 8000df0:	d856      	bhi.n	8000ea0 <Move_Servo+0xc4>
 8000df2:	a201      	add	r2, pc, #4	; (adr r2, 8000df8 <Move_Servo+0x1c>)
 8000df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000df8:	08000e11 	.word	0x08000e11
 8000dfc:	08000e19 	.word	0x08000e19
 8000e00:	08000e21 	.word	0x08000e21
 8000e04:	08000e29 	.word	0x08000e29
 8000e08:	08000e31 	.word	0x08000e31
 8000e0c:	08000e39 	.word	0x08000e39
		case (0):
			MOVE_MOTOR1_POS1()
 8000e10:	4b26      	ldr	r3, [pc, #152]	; (8000eac <Move_Servo+0xd0>)
 8000e12:	2218      	movs	r2, #24
 8000e14:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8000e16:	e043      	b.n	8000ea0 <Move_Servo+0xc4>
		case (1):
			MOVE_MOTOR1_POS2()
 8000e18:	4b24      	ldr	r3, [pc, #144]	; (8000eac <Move_Servo+0xd0>)
 8000e1a:	2223      	movs	r2, #35	; 0x23
 8000e1c:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8000e1e:	e03f      	b.n	8000ea0 <Move_Servo+0xc4>
		case (2):
			MOVE_MOTOR1_POS3()
 8000e20:	4b22      	ldr	r3, [pc, #136]	; (8000eac <Move_Servo+0xd0>)
 8000e22:	2232      	movs	r2, #50	; 0x32
 8000e24:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8000e26:	e03b      	b.n	8000ea0 <Move_Servo+0xc4>
		case (3):
			MOVE_MOTOR1_POS4()
 8000e28:	4b20      	ldr	r3, [pc, #128]	; (8000eac <Move_Servo+0xd0>)
 8000e2a:	2244      	movs	r2, #68	; 0x44
 8000e2c:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8000e2e:	e037      	b.n	8000ea0 <Move_Servo+0xc4>
		case (4):
			MOVE_MOTOR1_POS5()
 8000e30:	4b1e      	ldr	r3, [pc, #120]	; (8000eac <Move_Servo+0xd0>)
 8000e32:	2255      	movs	r2, #85	; 0x55
 8000e34:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8000e36:	e033      	b.n	8000ea0 <Move_Servo+0xc4>
		case (5):
			MOVE_MOTOR1_POS6()
 8000e38:	4b1c      	ldr	r3, [pc, #112]	; (8000eac <Move_Servo+0xd0>)
 8000e3a:	2264      	movs	r2, #100	; 0x64
 8000e3c:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8000e3e:	e02f      	b.n	8000ea0 <Move_Servo+0xc4>
		}
	} else {
		switch (pos) {
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2b05      	cmp	r3, #5
 8000e44:	d82c      	bhi.n	8000ea0 <Move_Servo+0xc4>
 8000e46:	a201      	add	r2, pc, #4	; (adr r2, 8000e4c <Move_Servo+0x70>)
 8000e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e4c:	08000e65 	.word	0x08000e65
 8000e50:	08000e6f 	.word	0x08000e6f
 8000e54:	08000e79 	.word	0x08000e79
 8000e58:	08000e83 	.word	0x08000e83
 8000e5c:	08000e8d 	.word	0x08000e8d
 8000e60:	08000e97 	.word	0x08000e97
		case (0):
			MOVE_MOTOR2_POS1()
 8000e64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e68:	2218      	movs	r2, #24
 8000e6a:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000e6c:	e018      	b.n	8000ea0 <Move_Servo+0xc4>
		case (1):
			MOVE_MOTOR2_POS2()
 8000e6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e72:	2223      	movs	r2, #35	; 0x23
 8000e74:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000e76:	e013      	b.n	8000ea0 <Move_Servo+0xc4>
		case (2):
			MOVE_MOTOR2_POS3()
 8000e78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e7c:	2232      	movs	r2, #50	; 0x32
 8000e7e:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000e80:	e00e      	b.n	8000ea0 <Move_Servo+0xc4>
		case (3):
			MOVE_MOTOR2_POS4()
 8000e82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e86:	2244      	movs	r2, #68	; 0x44
 8000e88:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000e8a:	e009      	b.n	8000ea0 <Move_Servo+0xc4>
		case (4):
			MOVE_MOTOR2_POS5()
 8000e8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e90:	2255      	movs	r2, #85	; 0x55
 8000e92:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000e94:	e004      	b.n	8000ea0 <Move_Servo+0xc4>
		case (5):
			MOVE_MOTOR2_POS6()
 8000e96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e9a:	2264      	movs	r2, #100	; 0x64
 8000e9c:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000e9e:	bf00      	nop
		}
	}

}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	40000400 	.word	0x40000400

08000eb0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	timer_running = false;
 8000eb8:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	701a      	strb	r2, [r3, #0]
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000000 	.word	0x20000000

08000ed0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed4:	b672      	cpsid	i
}
 8000ed6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ed8:	e7fe      	b.n	8000ed8 <Error_Handler+0x8>
	...

08000edc <process_event>:
int user_led1 = 0;
int user_led2 = 0;
UART_HandleTypeDef huart;

enum events process_event(enum events one_event, int servo,
		UART_HandleTypeDef *huart2) {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
 8000ee8:	73fb      	strb	r3, [r7, #15]
	huart = *huart2;
 8000eea:	4aa8      	ldr	r2, [pc, #672]	; (800118c <process_event+0x2b0>)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4610      	mov	r0, r2
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	2388      	movs	r3, #136	; 0x88
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	f004 fe55 	bl	8005ba4 <memcpy>
	char *Buffer = malloc(256);
 8000efa:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000efe:	f004 fd39 	bl	8005974 <malloc>
 8000f02:	4603      	mov	r3, r0
 8000f04:	617b      	str	r3, [r7, #20]
	if (Buffer == NULL) {
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d102      	bne.n	8000f12 <process_event+0x36>
		exit(98);
 8000f0c:	2062      	movs	r0, #98	; 0x62
 8000f0e:	f004 fd1f 	bl	8005950 <exit>
	}
	switch (one_event) {
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
 8000f14:	2b0b      	cmp	r3, #11
 8000f16:	f200 81d9 	bhi.w	80012cc <process_event+0x3f0>
 8000f1a:	a201      	add	r2, pc, #4	; (adr r2, 8000f20 <process_event+0x44>)
 8000f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f20:	08000f51 	.word	0x08000f51
 8000f24:	08001015 	.word	0x08001015
 8000f28:	08000fb3 	.word	0x08000fb3
 8000f2c:	08000f9d 	.word	0x08000f9d
 8000f30:	08000f87 	.word	0x08000f87
 8000f34:	080012cd 	.word	0x080012cd
 8000f38:	08000f51 	.word	0x08000f51
 8000f3c:	08001077 	.word	0x08001077
 8000f40:	080010e5 	.word	0x080010e5
 8000f44:	08001153 	.word	0x08001153
 8000f48:	080011f1 	.word	0x080011f1
 8000f4c:	0800125f 	.word	0x0800125f
	//Change the servos to start their recipes
	case (recipe_begin):
	case (user_entered_begin):
		if (servo == 1) {
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d10b      	bne.n	8000f6e <process_event+0x92>
			init_servo1();
 8000f56:	f000 fc89 	bl	800186c <init_servo1>
			current_status_servo1 = status_running;
 8000f5a:	4b8d      	ldr	r3, [pc, #564]	; (8001190 <process_event+0x2b4>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	701a      	strb	r2, [r3, #0]
			servo1_state = state_at_position;
 8000f60:	4b8c      	ldr	r3, [pc, #560]	; (8001194 <process_event+0x2b8>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	701a      	strb	r2, [r3, #0]
			servo1_index = 0;
 8000f66:	4b8c      	ldr	r3, [pc, #560]	; (8001198 <process_event+0x2bc>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
			init_servo2();
			current_status_servo2 = status_running;
			servo2_state = state_at_position;
			servo2_index = 0;
		}
		break;
 8000f6c:	e1b3      	b.n	80012d6 <process_event+0x3fa>
			init_servo2();
 8000f6e:	f000 fca7 	bl	80018c0 <init_servo2>
			current_status_servo2 = status_running;
 8000f72:	4b8a      	ldr	r3, [pc, #552]	; (800119c <process_event+0x2c0>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	701a      	strb	r2, [r3, #0]
			servo2_state = state_at_position;
 8000f78:	4b89      	ldr	r3, [pc, #548]	; (80011a0 <process_event+0x2c4>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	701a      	strb	r2, [r3, #0]
			servo2_index = 0;
 8000f7e:	4b89      	ldr	r3, [pc, #548]	; (80011a4 <process_event+0x2c8>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
		break;
 8000f84:	e1a7      	b.n	80012d6 <process_event+0x3fa>
		//Start the servo back up
	case (user_entered_Continue):
		if (servo == 1) {
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d103      	bne.n	8000f94 <process_event+0xb8>
			current_status_servo1 = status_running;
 8000f8c:	4b80      	ldr	r3, [pc, #512]	; (8001190 <process_event+0x2b4>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	701a      	strb	r2, [r3, #0]
		} else {
			current_status_servo2 = status_running;
		}
		break;
 8000f92:	e1a0      	b.n	80012d6 <process_event+0x3fa>
			current_status_servo2 = status_running;
 8000f94:	4b81      	ldr	r3, [pc, #516]	; (800119c <process_event+0x2c0>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]
		break;
 8000f9a:	e19c      	b.n	80012d6 <process_event+0x3fa>
		//Pause the servo motor
	case (user_entered_Pause):
		if (servo == 1) {
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d103      	bne.n	8000faa <process_event+0xce>
			current_status_servo1 = status_paused;
 8000fa2:	4b7b      	ldr	r3, [pc, #492]	; (8001190 <process_event+0x2b4>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	701a      	strb	r2, [r3, #0]
		} else {
			current_status_servo2 = status_paused;
		}
		break;
 8000fa8:	e195      	b.n	80012d6 <process_event+0x3fa>
			current_status_servo2 = status_paused;
 8000faa:	4b7c      	ldr	r3, [pc, #496]	; (800119c <process_event+0x2c0>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	701a      	strb	r2, [r3, #0]
		break;
 8000fb0:	e191      	b.n	80012d6 <process_event+0x3fa>

	case (user_entered_Right):
		if (servo == 1) {
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d116      	bne.n	8000fe6 <process_event+0x10a>
			//check if the recipe is paused and not at the rightmost position
			if (current_status_servo1 == status_paused) {
 8000fb8:	4b75      	ldr	r3, [pc, #468]	; (8001190 <process_event+0x2b4>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	f040 8187 	bne.w	80012d0 <process_event+0x3f4>
				if (servo1_pos != 0) {
 8000fc2:	4b79      	ldr	r3, [pc, #484]	; (80011a8 <process_event+0x2cc>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	f000 8182 	beq.w	80012d0 <process_event+0x3f4>
					Move_Servo(servo1_pos - 1, 1);
 8000fcc:	4b76      	ldr	r3, [pc, #472]	; (80011a8 <process_event+0x2cc>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	3b01      	subs	r3, #1
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ff01 	bl	8000ddc <Move_Servo>
					servo1_pos--;
 8000fda:	4b73      	ldr	r3, [pc, #460]	; (80011a8 <process_event+0x2cc>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	4a71      	ldr	r2, [pc, #452]	; (80011a8 <process_event+0x2cc>)
 8000fe2:	6013      	str	r3, [r2, #0]
					Move_Servo(servo2_pos - 1, 2);
					servo2_pos--;
				}
			}
		}
		break;
 8000fe4:	e174      	b.n	80012d0 <process_event+0x3f4>
			if (current_status_servo2 == status_paused) {
 8000fe6:	4b6d      	ldr	r3, [pc, #436]	; (800119c <process_event+0x2c0>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	f040 8170 	bne.w	80012d0 <process_event+0x3f4>
				if (servo2_pos != 0) {
 8000ff0:	4b6e      	ldr	r3, [pc, #440]	; (80011ac <process_event+0x2d0>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	f000 816b 	beq.w	80012d0 <process_event+0x3f4>
					Move_Servo(servo2_pos - 1, 2);
 8000ffa:	4b6c      	ldr	r3, [pc, #432]	; (80011ac <process_event+0x2d0>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	3b01      	subs	r3, #1
 8001000:	2102      	movs	r1, #2
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff feea 	bl	8000ddc <Move_Servo>
					servo2_pos--;
 8001008:	4b68      	ldr	r3, [pc, #416]	; (80011ac <process_event+0x2d0>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	3b01      	subs	r3, #1
 800100e:	4a67      	ldr	r2, [pc, #412]	; (80011ac <process_event+0x2d0>)
 8001010:	6013      	str	r3, [r2, #0]
		break;
 8001012:	e15d      	b.n	80012d0 <process_event+0x3f4>

	case (user_entered_left):
		if (servo == 1) {
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d116      	bne.n	8001048 <process_event+0x16c>
			if (current_status_servo1 == status_paused) {
 800101a:	4b5d      	ldr	r3, [pc, #372]	; (8001190 <process_event+0x2b4>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b01      	cmp	r3, #1
 8001020:	f040 8158 	bne.w	80012d4 <process_event+0x3f8>
				if (servo1_pos != 5) {
 8001024:	4b60      	ldr	r3, [pc, #384]	; (80011a8 <process_event+0x2cc>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b05      	cmp	r3, #5
 800102a:	f000 8153 	beq.w	80012d4 <process_event+0x3f8>
					Move_Servo(servo1_pos + 1, 1);
 800102e:	4b5e      	ldr	r3, [pc, #376]	; (80011a8 <process_event+0x2cc>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	3301      	adds	r3, #1
 8001034:	2101      	movs	r1, #1
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fed0 	bl	8000ddc <Move_Servo>
					servo1_pos++;
 800103c:	4b5a      	ldr	r3, [pc, #360]	; (80011a8 <process_event+0x2cc>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	3301      	adds	r3, #1
 8001042:	4a59      	ldr	r2, [pc, #356]	; (80011a8 <process_event+0x2cc>)
 8001044:	6013      	str	r3, [r2, #0]
					servo2_pos++;
				}
			}
		}

		break;
 8001046:	e145      	b.n	80012d4 <process_event+0x3f8>
			if (current_status_servo2 == status_paused) {
 8001048:	4b54      	ldr	r3, [pc, #336]	; (800119c <process_event+0x2c0>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b01      	cmp	r3, #1
 800104e:	f040 8141 	bne.w	80012d4 <process_event+0x3f8>
				if (servo2_pos != 5) {
 8001052:	4b56      	ldr	r3, [pc, #344]	; (80011ac <process_event+0x2d0>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2b05      	cmp	r3, #5
 8001058:	f000 813c 	beq.w	80012d4 <process_event+0x3f8>
					Move_Servo(servo2_pos + 1, 2);
 800105c:	4b53      	ldr	r3, [pc, #332]	; (80011ac <process_event+0x2d0>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	3301      	adds	r3, #1
 8001062:	2102      	movs	r1, #2
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff feb9 	bl	8000ddc <Move_Servo>
					servo2_pos++;
 800106a:	4b50      	ldr	r3, [pc, #320]	; (80011ac <process_event+0x2d0>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	3301      	adds	r3, #1
 8001070:	4a4e      	ldr	r2, [pc, #312]	; (80011ac <process_event+0x2d0>)
 8001072:	6013      	str	r3, [r2, #0]
		break;
 8001074:	e12e      	b.n	80012d4 <process_event+0x3f8>
		//Selects each servo's own recipe
	case (user_entered_recipe1):
		if (servo == 1) {
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d119      	bne.n	80010b0 <process_event+0x1d4>
			servo1_recipe = 1;
 800107c:	4b4c      	ldr	r3, [pc, #304]	; (80011b0 <process_event+0x2d4>)
 800107e:	2201      	movs	r2, #1
 8001080:	601a      	str	r2, [r3, #0]
			servo1_index = 0;
 8001082:	4b45      	ldr	r3, [pc, #276]	; (8001198 <process_event+0x2bc>)
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
			servo1_state = state_at_position;
 8001088:	4b42      	ldr	r3, [pc, #264]	; (8001194 <process_event+0x2b8>)
 800108a:	2200      	movs	r2, #0
 800108c:	701a      	strb	r2, [r3, #0]
			sprintf(Buffer, "User selected recipe %d for servo %d \r\n", 1,
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	2201      	movs	r2, #1
 8001092:	4948      	ldr	r1, [pc, #288]	; (80011b4 <process_event+0x2d8>)
 8001094:	6978      	ldr	r0, [r7, #20]
 8001096:	f004 fd21 	bl	8005adc <siprintf>
					servo);
			HAL_UART_Transmit(huart2, (uint8_t*) Buffer, strlen(Buffer), 200);
 800109a:	6978      	ldr	r0, [r7, #20]
 800109c:	f7ff f898 	bl	80001d0 <strlen>
 80010a0:	4603      	mov	r3, r0
 80010a2:	b29a      	uxth	r2, r3
 80010a4:	23c8      	movs	r3, #200	; 0xc8
 80010a6:	6979      	ldr	r1, [r7, #20]
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f003 fef9 	bl	8004ea0 <HAL_UART_Transmit>
			sprintf(Buffer, "User selected recipe %d for servo %d \r\n", 1,
					servo);
			HAL_UART_Transmit(huart2, (uint8_t*) Buffer, strlen(Buffer), 200);
		}

		break;
 80010ae:	e112      	b.n	80012d6 <process_event+0x3fa>
			servo2_recipe = 1;
 80010b0:	4b41      	ldr	r3, [pc, #260]	; (80011b8 <process_event+0x2dc>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	601a      	str	r2, [r3, #0]
			servo2_index = 0;
 80010b6:	4b3b      	ldr	r3, [pc, #236]	; (80011a4 <process_event+0x2c8>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
			servo2_state = state_at_position;
 80010bc:	4b38      	ldr	r3, [pc, #224]	; (80011a0 <process_event+0x2c4>)
 80010be:	2200      	movs	r2, #0
 80010c0:	701a      	strb	r2, [r3, #0]
			sprintf(Buffer, "User selected recipe %d for servo %d \r\n", 1,
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	2201      	movs	r2, #1
 80010c6:	493b      	ldr	r1, [pc, #236]	; (80011b4 <process_event+0x2d8>)
 80010c8:	6978      	ldr	r0, [r7, #20]
 80010ca:	f004 fd07 	bl	8005adc <siprintf>
			HAL_UART_Transmit(huart2, (uint8_t*) Buffer, strlen(Buffer), 200);
 80010ce:	6978      	ldr	r0, [r7, #20]
 80010d0:	f7ff f87e 	bl	80001d0 <strlen>
 80010d4:	4603      	mov	r3, r0
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	23c8      	movs	r3, #200	; 0xc8
 80010da:	6979      	ldr	r1, [r7, #20]
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f003 fedf 	bl	8004ea0 <HAL_UART_Transmit>
		break;
 80010e2:	e0f8      	b.n	80012d6 <process_event+0x3fa>
	case (user_entered_recipe2):
		if (servo == 1) {
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d119      	bne.n	800111e <process_event+0x242>
			servo1_recipe = 2;
 80010ea:	4b31      	ldr	r3, [pc, #196]	; (80011b0 <process_event+0x2d4>)
 80010ec:	2202      	movs	r2, #2
 80010ee:	601a      	str	r2, [r3, #0]
			servo1_index = 0;
 80010f0:	4b29      	ldr	r3, [pc, #164]	; (8001198 <process_event+0x2bc>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
			servo1_state = state_at_position;
 80010f6:	4b27      	ldr	r3, [pc, #156]	; (8001194 <process_event+0x2b8>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	701a      	strb	r2, [r3, #0]
			sprintf(Buffer, "User selected recipe %d for servo %d \r\n", 2,
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	2202      	movs	r2, #2
 8001100:	492c      	ldr	r1, [pc, #176]	; (80011b4 <process_event+0x2d8>)
 8001102:	6978      	ldr	r0, [r7, #20]
 8001104:	f004 fcea 	bl	8005adc <siprintf>
					servo);
			HAL_UART_Transmit(huart2, (uint8_t*) Buffer, strlen(Buffer), 200);
 8001108:	6978      	ldr	r0, [r7, #20]
 800110a:	f7ff f861 	bl	80001d0 <strlen>
 800110e:	4603      	mov	r3, r0
 8001110:	b29a      	uxth	r2, r3
 8001112:	23c8      	movs	r3, #200	; 0xc8
 8001114:	6979      	ldr	r1, [r7, #20]
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f003 fec2 	bl	8004ea0 <HAL_UART_Transmit>
			sprintf(Buffer, "User selected recipe %d for servo %d \r\n", 2,
					servo);
			HAL_UART_Transmit(huart2, (uint8_t*) Buffer, strlen(Buffer), 200);
		}

		break;
 800111c:	e0db      	b.n	80012d6 <process_event+0x3fa>
			servo2_recipe = 2;
 800111e:	4b26      	ldr	r3, [pc, #152]	; (80011b8 <process_event+0x2dc>)
 8001120:	2202      	movs	r2, #2
 8001122:	601a      	str	r2, [r3, #0]
			servo2_index = 0;
 8001124:	4b1f      	ldr	r3, [pc, #124]	; (80011a4 <process_event+0x2c8>)
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
			servo2_state = state_at_position;
 800112a:	4b1d      	ldr	r3, [pc, #116]	; (80011a0 <process_event+0x2c4>)
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
			sprintf(Buffer, "User selected recipe %d for servo %d \r\n", 2,
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	2202      	movs	r2, #2
 8001134:	491f      	ldr	r1, [pc, #124]	; (80011b4 <process_event+0x2d8>)
 8001136:	6978      	ldr	r0, [r7, #20]
 8001138:	f004 fcd0 	bl	8005adc <siprintf>
			HAL_UART_Transmit(huart2, (uint8_t*) Buffer, strlen(Buffer), 200);
 800113c:	6978      	ldr	r0, [r7, #20]
 800113e:	f7ff f847 	bl	80001d0 <strlen>
 8001142:	4603      	mov	r3, r0
 8001144:	b29a      	uxth	r2, r3
 8001146:	23c8      	movs	r3, #200	; 0xc8
 8001148:	6979      	ldr	r1, [r7, #20]
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f003 fea8 	bl	8004ea0 <HAL_UART_Transmit>
		break;
 8001150:	e0c1      	b.n	80012d6 <process_event+0x3fa>
	case (user_entered_recipe3):
		if (servo == 1) {
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d131      	bne.n	80011bc <process_event+0x2e0>
			servo1_recipe = 3;
 8001158:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <process_event+0x2d4>)
 800115a:	2203      	movs	r2, #3
 800115c:	601a      	str	r2, [r3, #0]
			servo1_index = 0;
 800115e:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <process_event+0x2bc>)
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
			servo1_state = state_at_position;
 8001164:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <process_event+0x2b8>)
 8001166:	2200      	movs	r2, #0
 8001168:	701a      	strb	r2, [r3, #0]
			sprintf(Buffer, "User selected recipe %d for servo %d \r\n", 3,
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	2203      	movs	r2, #3
 800116e:	4911      	ldr	r1, [pc, #68]	; (80011b4 <process_event+0x2d8>)
 8001170:	6978      	ldr	r0, [r7, #20]
 8001172:	f004 fcb3 	bl	8005adc <siprintf>
					servo);
			HAL_UART_Transmit(huart2, (uint8_t*) Buffer, strlen(Buffer), 200);
 8001176:	6978      	ldr	r0, [r7, #20]
 8001178:	f7ff f82a 	bl	80001d0 <strlen>
 800117c:	4603      	mov	r3, r0
 800117e:	b29a      	uxth	r2, r3
 8001180:	23c8      	movs	r3, #200	; 0xc8
 8001182:	6979      	ldr	r1, [r7, #20]
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f003 fe8b 	bl	8004ea0 <HAL_UART_Transmit>
			servo2_state = state_at_position;
			sprintf(Buffer, "User selected recipe %d for servo %d \r\n", 3,
					servo);
			HAL_UART_Transmit(huart2, (uint8_t*) Buffer, strlen(Buffer), 200);
		}
		break;
 800118a:	e0a4      	b.n	80012d6 <process_event+0x3fa>
 800118c:	200002e4 	.word	0x200002e4
 8001190:	20000064 	.word	0x20000064
 8001194:	200002a8 	.word	0x200002a8
 8001198:	20000298 	.word	0x20000298
 800119c:	20000065 	.word	0x20000065
 80011a0:	200002a9 	.word	0x200002a9
 80011a4:	2000029c 	.word	0x2000029c
 80011a8:	200002ac 	.word	0x200002ac
 80011ac:	200002b0 	.word	0x200002b0
 80011b0:	200002a0 	.word	0x200002a0
 80011b4:	080062e4 	.word	0x080062e4
 80011b8:	200002a4 	.word	0x200002a4
			servo2_recipe = 3;
 80011bc:	4b48      	ldr	r3, [pc, #288]	; (80012e0 <process_event+0x404>)
 80011be:	2203      	movs	r2, #3
 80011c0:	601a      	str	r2, [r3, #0]
			servo2_index = 0;
 80011c2:	4b48      	ldr	r3, [pc, #288]	; (80012e4 <process_event+0x408>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
			servo2_state = state_at_position;
 80011c8:	4b47      	ldr	r3, [pc, #284]	; (80012e8 <process_event+0x40c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]
			sprintf(Buffer, "User selected recipe %d for servo %d \r\n", 3,
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	2203      	movs	r2, #3
 80011d2:	4946      	ldr	r1, [pc, #280]	; (80012ec <process_event+0x410>)
 80011d4:	6978      	ldr	r0, [r7, #20]
 80011d6:	f004 fc81 	bl	8005adc <siprintf>
			HAL_UART_Transmit(huart2, (uint8_t*) Buffer, strlen(Buffer), 200);
 80011da:	6978      	ldr	r0, [r7, #20]
 80011dc:	f7fe fff8 	bl	80001d0 <strlen>
 80011e0:	4603      	mov	r3, r0
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	23c8      	movs	r3, #200	; 0xc8
 80011e6:	6979      	ldr	r1, [r7, #20]
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f003 fe59 	bl	8004ea0 <HAL_UART_Transmit>
		break;
 80011ee:	e072      	b.n	80012d6 <process_event+0x3fa>
	case (user_entered_recipe4):
		if (servo == 1) {
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d119      	bne.n	800122a <process_event+0x34e>
			servo1_recipe = 4;
 80011f6:	4b3e      	ldr	r3, [pc, #248]	; (80012f0 <process_event+0x414>)
 80011f8:	2204      	movs	r2, #4
 80011fa:	601a      	str	r2, [r3, #0]
			servo1_index = 0;
 80011fc:	4b3d      	ldr	r3, [pc, #244]	; (80012f4 <process_event+0x418>)
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
			servo1_state = state_at_position;
 8001202:	4b3d      	ldr	r3, [pc, #244]	; (80012f8 <process_event+0x41c>)
 8001204:	2200      	movs	r2, #0
 8001206:	701a      	strb	r2, [r3, #0]
			sprintf(Buffer, "User selected recipe %d for servo %d \r\n", 4,
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	2204      	movs	r2, #4
 800120c:	4937      	ldr	r1, [pc, #220]	; (80012ec <process_event+0x410>)
 800120e:	6978      	ldr	r0, [r7, #20]
 8001210:	f004 fc64 	bl	8005adc <siprintf>
					servo);
			HAL_UART_Transmit(huart2, (uint8_t*) Buffer, strlen(Buffer), 200);
 8001214:	6978      	ldr	r0, [r7, #20]
 8001216:	f7fe ffdb 	bl	80001d0 <strlen>
 800121a:	4603      	mov	r3, r0
 800121c:	b29a      	uxth	r2, r3
 800121e:	23c8      	movs	r3, #200	; 0xc8
 8001220:	6979      	ldr	r1, [r7, #20]
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f003 fe3c 	bl	8004ea0 <HAL_UART_Transmit>
			servo2_state = state_at_position;
			sprintf(Buffer, "User selected recipe %d for servo %d \r\n", 4,
					servo);
			HAL_UART_Transmit(huart2, (uint8_t*) Buffer, strlen(Buffer), 200);
		}
		break;
 8001228:	e055      	b.n	80012d6 <process_event+0x3fa>
			servo2_recipe = 4;
 800122a:	4b2d      	ldr	r3, [pc, #180]	; (80012e0 <process_event+0x404>)
 800122c:	2204      	movs	r2, #4
 800122e:	601a      	str	r2, [r3, #0]
			servo2_index = 0;
 8001230:	4b2c      	ldr	r3, [pc, #176]	; (80012e4 <process_event+0x408>)
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
			servo2_state = state_at_position;
 8001236:	4b2c      	ldr	r3, [pc, #176]	; (80012e8 <process_event+0x40c>)
 8001238:	2200      	movs	r2, #0
 800123a:	701a      	strb	r2, [r3, #0]
			sprintf(Buffer, "User selected recipe %d for servo %d \r\n", 4,
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	2204      	movs	r2, #4
 8001240:	492a      	ldr	r1, [pc, #168]	; (80012ec <process_event+0x410>)
 8001242:	6978      	ldr	r0, [r7, #20]
 8001244:	f004 fc4a 	bl	8005adc <siprintf>
			HAL_UART_Transmit(huart2, (uint8_t*) Buffer, strlen(Buffer), 200);
 8001248:	6978      	ldr	r0, [r7, #20]
 800124a:	f7fe ffc1 	bl	80001d0 <strlen>
 800124e:	4603      	mov	r3, r0
 8001250:	b29a      	uxth	r2, r3
 8001252:	23c8      	movs	r3, #200	; 0xc8
 8001254:	6979      	ldr	r1, [r7, #20]
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f003 fe22 	bl	8004ea0 <HAL_UART_Transmit>
		break;
 800125c:	e03b      	b.n	80012d6 <process_event+0x3fa>
	case (user_entered_recipe5):
		if (servo == 1) {
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d119      	bne.n	8001298 <process_event+0x3bc>
			servo1_recipe = 5;
 8001264:	4b22      	ldr	r3, [pc, #136]	; (80012f0 <process_event+0x414>)
 8001266:	2205      	movs	r2, #5
 8001268:	601a      	str	r2, [r3, #0]
			servo1_index = 0;
 800126a:	4b22      	ldr	r3, [pc, #136]	; (80012f4 <process_event+0x418>)
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
			servo1_state = state_at_position;
 8001270:	4b21      	ldr	r3, [pc, #132]	; (80012f8 <process_event+0x41c>)
 8001272:	2200      	movs	r2, #0
 8001274:	701a      	strb	r2, [r3, #0]
			sprintf(Buffer, "User selected recipe %d for servo %d \r\n", 5,
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	2205      	movs	r2, #5
 800127a:	491c      	ldr	r1, [pc, #112]	; (80012ec <process_event+0x410>)
 800127c:	6978      	ldr	r0, [r7, #20]
 800127e:	f004 fc2d 	bl	8005adc <siprintf>
					servo);
			HAL_UART_Transmit(huart2, (uint8_t*) Buffer, strlen(Buffer), 200);
 8001282:	6978      	ldr	r0, [r7, #20]
 8001284:	f7fe ffa4 	bl	80001d0 <strlen>
 8001288:	4603      	mov	r3, r0
 800128a:	b29a      	uxth	r2, r3
 800128c:	23c8      	movs	r3, #200	; 0xc8
 800128e:	6979      	ldr	r1, [r7, #20]
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f003 fe05 	bl	8004ea0 <HAL_UART_Transmit>
			sprintf(Buffer, "User selected recipe %d for servo %d \r\n", 5,
					servo);
			HAL_UART_Transmit(huart2, (uint8_t*) Buffer, strlen(Buffer), 200);
		}

		break;
 8001296:	e01e      	b.n	80012d6 <process_event+0x3fa>
			servo2_recipe = 5;
 8001298:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <process_event+0x404>)
 800129a:	2205      	movs	r2, #5
 800129c:	601a      	str	r2, [r3, #0]
			servo2_index = 0;
 800129e:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <process_event+0x408>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
			servo2_state = state_at_position;
 80012a4:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <process_event+0x40c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	701a      	strb	r2, [r3, #0]
			sprintf(Buffer, "User selected recipe %d for servo %d \r\n", 5,
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	2205      	movs	r2, #5
 80012ae:	490f      	ldr	r1, [pc, #60]	; (80012ec <process_event+0x410>)
 80012b0:	6978      	ldr	r0, [r7, #20]
 80012b2:	f004 fc13 	bl	8005adc <siprintf>
			HAL_UART_Transmit(huart2, (uint8_t*) Buffer, strlen(Buffer), 200);
 80012b6:	6978      	ldr	r0, [r7, #20]
 80012b8:	f7fe ff8a 	bl	80001d0 <strlen>
 80012bc:	4603      	mov	r3, r0
 80012be:	b29a      	uxth	r2, r3
 80012c0:	23c8      	movs	r3, #200	; 0xc8
 80012c2:	6979      	ldr	r1, [r7, #20]
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f003 fdeb 	bl	8004ea0 <HAL_UART_Transmit>
		break;
 80012ca:	e004      	b.n	80012d6 <process_event+0x3fa>
	default:
		//handle errors
		break;
 80012cc:	bf00      	nop
 80012ce:	e002      	b.n	80012d6 <process_event+0x3fa>
		break;
 80012d0:	bf00      	nop
 80012d2:	e000      	b.n	80012d6 <process_event+0x3fa>
		break;
 80012d4:	bf00      	nop

	}
	return one_event;
 80012d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3718      	adds	r7, #24
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	200002a4 	.word	0x200002a4
 80012e4:	2000029c 	.word	0x2000029c
 80012e8:	200002a9 	.word	0x200002a9
 80012ec:	080062e4 	.word	0x080062e4
 80012f0:	200002a0 	.word	0x200002a0
 80012f4:	20000298 	.word	0x20000298
 80012f8:	200002a8 	.word	0x200002a8

080012fc <process_servo1>:

void process_servo1(void) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
	char cmd;
	switch (servo1_state) {
 8001302:	4b2f      	ldr	r3, [pc, #188]	; (80013c0 <process_servo1+0xc4>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b04      	cmp	r3, #4
 8001308:	d855      	bhi.n	80013b6 <process_servo1+0xba>
 800130a:	a201      	add	r2, pc, #4	; (adr r2, 8001310 <process_servo1+0x14>)
 800130c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001310:	08001325 	.word	0x08001325
 8001314:	080013b1 	.word	0x080013b1
 8001318:	08001359 	.word	0x08001359
 800131c:	0800138b 	.word	0x0800138b
 8001320:	0800137f 	.word	0x0800137f
	case (state_at_position):
		//Do another command
		cmd = recipes[servo1_recipe - 1][servo1_index];
 8001324:	4b27      	ldr	r3, [pc, #156]	; (80013c4 <process_servo1+0xc8>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	3b01      	subs	r3, #1
 800132a:	4a27      	ldr	r2, [pc, #156]	; (80013c8 <process_servo1+0xcc>)
 800132c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001330:	4b26      	ldr	r3, [pc, #152]	; (80013cc <process_servo1+0xd0>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4413      	add	r3, r2
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	71fb      	strb	r3, [r7, #7]
		int check = check_errors(cmd, 1);
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	2101      	movs	r1, #1
 800133e:	4618      	mov	r0, r3
 8001340:	f000 fa5a 	bl	80017f8 <check_errors>
 8001344:	6038      	str	r0, [r7, #0]
		if (check == 0) {
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d133      	bne.n	80013b4 <process_servo1+0xb8>
			process_servo_command(cmd, 1);
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	2101      	movs	r1, #1
 8001350:	4618      	mov	r0, r3
 8001352:	f000 f8e1 	bl	8001518 <process_servo_command>
		}
		break;
 8001356:	e02d      	b.n	80013b4 <process_servo1+0xb8>
	case (state_moving):
		if (servo1_move_cycles != 0) {
 8001358:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <process_servo1+0xd4>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d005      	beq.n	800136c <process_servo1+0x70>
			servo1_move_cycles--;
 8001360:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <process_servo1+0xd4>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	3b01      	subs	r3, #1
 8001366:	4a1a      	ldr	r2, [pc, #104]	; (80013d0 <process_servo1+0xd4>)
 8001368:	6013      	str	r3, [r2, #0]
		} else {
			//Change state to at position and ready for a new command
			servo1_state = state_at_position;
			servo1_index++;
		}
		break;
 800136a:	e024      	b.n	80013b6 <process_servo1+0xba>
			servo1_state = state_at_position;
 800136c:	4b14      	ldr	r3, [pc, #80]	; (80013c0 <process_servo1+0xc4>)
 800136e:	2200      	movs	r2, #0
 8001370:	701a      	strb	r2, [r3, #0]
			servo1_index++;
 8001372:	4b16      	ldr	r3, [pc, #88]	; (80013cc <process_servo1+0xd0>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	3301      	adds	r3, #1
 8001378:	4a14      	ldr	r2, [pc, #80]	; (80013cc <process_servo1+0xd0>)
 800137a:	6013      	str	r3, [r2, #0]
		break;
 800137c:	e01b      	b.n	80013b6 <process_servo1+0xba>

	case (state_recipe_ended):
		init_servo1();
 800137e:	f000 fa75 	bl	800186c <init_servo1>
		servo1_state = state_at_position;
 8001382:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <process_servo1+0xc4>)
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]
		break;
 8001388:	e015      	b.n	80013b6 <process_servo1+0xba>
	case (state_unknown):
		//Error State
		break;

	case (state_waiting):
		if (servo1_wait_cycles != 0) {
 800138a:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <process_servo1+0xd8>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d005      	beq.n	800139e <process_servo1+0xa2>
			servo1_wait_cycles--;
 8001392:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <process_servo1+0xd8>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	3b01      	subs	r3, #1
 8001398:	4a0e      	ldr	r2, [pc, #56]	; (80013d4 <process_servo1+0xd8>)
 800139a:	6013      	str	r3, [r2, #0]
		} else {
			servo1_state = state_at_position;
			servo1_index++;
		}
		break;
 800139c:	e00b      	b.n	80013b6 <process_servo1+0xba>
			servo1_state = state_at_position;
 800139e:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <process_servo1+0xc4>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	701a      	strb	r2, [r3, #0]
			servo1_index++;
 80013a4:	4b09      	ldr	r3, [pc, #36]	; (80013cc <process_servo1+0xd0>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	3301      	adds	r3, #1
 80013aa:	4a08      	ldr	r2, [pc, #32]	; (80013cc <process_servo1+0xd0>)
 80013ac:	6013      	str	r3, [r2, #0]
		break;
 80013ae:	e002      	b.n	80013b6 <process_servo1+0xba>
		break;
 80013b0:	bf00      	nop
 80013b2:	e000      	b.n	80013b6 <process_servo1+0xba>
		break;
 80013b4:	bf00      	nop
	}

}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	200002a8 	.word	0x200002a8
 80013c4:	200002a0 	.word	0x200002a0
 80013c8:	2000004c 	.word	0x2000004c
 80013cc:	20000298 	.word	0x20000298
 80013d0:	200002bc 	.word	0x200002bc
 80013d4:	200002c4 	.word	0x200002c4

080013d8 <process_servo2>:

void process_servo2(void) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
	char cmd;
	switch (servo2_state) {
 80013de:	4b2f      	ldr	r3, [pc, #188]	; (800149c <process_servo2+0xc4>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b04      	cmp	r3, #4
 80013e4:	d855      	bhi.n	8001492 <process_servo2+0xba>
 80013e6:	a201      	add	r2, pc, #4	; (adr r2, 80013ec <process_servo2+0x14>)
 80013e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ec:	08001401 	.word	0x08001401
 80013f0:	0800148d 	.word	0x0800148d
 80013f4:	08001435 	.word	0x08001435
 80013f8:	0800145b 	.word	0x0800145b
 80013fc:	08001481 	.word	0x08001481
	case (state_at_position):
		//Do another command
		cmd = recipes[servo2_recipe - 1][servo2_index];
 8001400:	4b27      	ldr	r3, [pc, #156]	; (80014a0 <process_servo2+0xc8>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	3b01      	subs	r3, #1
 8001406:	4a27      	ldr	r2, [pc, #156]	; (80014a4 <process_servo2+0xcc>)
 8001408:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800140c:	4b26      	ldr	r3, [pc, #152]	; (80014a8 <process_servo2+0xd0>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4413      	add	r3, r2
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	71fb      	strb	r3, [r7, #7]
		int check = check_errors(cmd, 2);
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	2102      	movs	r1, #2
 800141a:	4618      	mov	r0, r3
 800141c:	f000 f9ec 	bl	80017f8 <check_errors>
 8001420:	6038      	str	r0, [r7, #0]
		if (check == 0) {
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d133      	bne.n	8001490 <process_servo2+0xb8>
			process_servo_command(cmd, 2);
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	2102      	movs	r1, #2
 800142c:	4618      	mov	r0, r3
 800142e:	f000 f873 	bl	8001518 <process_servo_command>
		}
		break;
 8001432:	e02d      	b.n	8001490 <process_servo2+0xb8>
	case (state_moving):
		//decrement the move cycles until it is 0, meaning we are at the position
		if (servo2_move_cycles != 0) {
 8001434:	4b1d      	ldr	r3, [pc, #116]	; (80014ac <process_servo2+0xd4>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d005      	beq.n	8001448 <process_servo2+0x70>
			servo2_move_cycles--;
 800143c:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <process_servo2+0xd4>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	3b01      	subs	r3, #1
 8001442:	4a1a      	ldr	r2, [pc, #104]	; (80014ac <process_servo2+0xd4>)
 8001444:	6013      	str	r3, [r2, #0]
		} else {
			//Change state to at position and ready for a new command
			servo2_state = state_at_position;
			servo2_index++;
		}
		break;
 8001446:	e024      	b.n	8001492 <process_servo2+0xba>
			servo2_state = state_at_position;
 8001448:	4b14      	ldr	r3, [pc, #80]	; (800149c <process_servo2+0xc4>)
 800144a:	2200      	movs	r2, #0
 800144c:	701a      	strb	r2, [r3, #0]
			servo2_index++;
 800144e:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <process_servo2+0xd0>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	3301      	adds	r3, #1
 8001454:	4a14      	ldr	r2, [pc, #80]	; (80014a8 <process_servo2+0xd0>)
 8001456:	6013      	str	r3, [r2, #0]
		break;
 8001458:	e01b      	b.n	8001492 <process_servo2+0xba>

	case (state_waiting):
		if (servo2_wait_cycles != 0) {
 800145a:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <process_servo2+0xd8>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d005      	beq.n	800146e <process_servo2+0x96>
			servo2_wait_cycles--;
 8001462:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <process_servo2+0xd8>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	3b01      	subs	r3, #1
 8001468:	4a11      	ldr	r2, [pc, #68]	; (80014b0 <process_servo2+0xd8>)
 800146a:	6013      	str	r3, [r2, #0]
		} else {
			servo2_state = state_at_position;
			servo2_index++;
		}
		break;
 800146c:	e011      	b.n	8001492 <process_servo2+0xba>
			servo2_state = state_at_position;
 800146e:	4b0b      	ldr	r3, [pc, #44]	; (800149c <process_servo2+0xc4>)
 8001470:	2200      	movs	r2, #0
 8001472:	701a      	strb	r2, [r3, #0]
			servo2_index++;
 8001474:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <process_servo2+0xd0>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	3301      	adds	r3, #1
 800147a:	4a0b      	ldr	r2, [pc, #44]	; (80014a8 <process_servo2+0xd0>)
 800147c:	6013      	str	r3, [r2, #0]
		break;
 800147e:	e008      	b.n	8001492 <process_servo2+0xba>

	case (state_recipe_ended):
		init_servo2();
 8001480:	f000 fa1e 	bl	80018c0 <init_servo2>
		servo2_state = state_at_position;
 8001484:	4b05      	ldr	r3, [pc, #20]	; (800149c <process_servo2+0xc4>)
 8001486:	2200      	movs	r2, #0
 8001488:	701a      	strb	r2, [r3, #0]
		break;
 800148a:	e002      	b.n	8001492 <process_servo2+0xba>

	case (state_unknown):
		//Error State
		break;
 800148c:	bf00      	nop
 800148e:	e000      	b.n	8001492 <process_servo2+0xba>
		break;
 8001490:	bf00      	nop
	}

}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	200002a9 	.word	0x200002a9
 80014a0:	200002a4 	.word	0x200002a4
 80014a4:	2000004c 	.word	0x2000004c
 80014a8:	2000029c 	.word	0x2000029c
 80014ac:	200002c0 	.word	0x200002c0
 80014b0:	200002c8 	.word	0x200002c8

080014b4 <state_machine>:

void state_machine() {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
	switch (current_status_servo1) {
 80014b8:	4b15      	ldr	r3, [pc, #84]	; (8001510 <state_machine+0x5c>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b04      	cmp	r3, #4
 80014be:	d810      	bhi.n	80014e2 <state_machine+0x2e>
 80014c0:	a201      	add	r2, pc, #4	; (adr r2, 80014c8 <state_machine+0x14>)
 80014c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c6:	bf00      	nop
 80014c8:	080014dd 	.word	0x080014dd
 80014cc:	080014e3 	.word	0x080014e3
 80014d0:	080014e3 	.word	0x080014e3
 80014d4:	080014e3 	.word	0x080014e3
 80014d8:	080014e3 	.word	0x080014e3
	case status_running:
		//Step the servo1 thorough one recipe
		process_servo1();
 80014dc:	f7ff ff0e 	bl	80012fc <process_servo1>
		break;
 80014e0:	bf00      	nop
		;
		break;

	}

	switch (current_status_servo2) {
 80014e2:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <state_machine+0x60>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	d810      	bhi.n	800150c <state_machine+0x58>
 80014ea:	a201      	add	r2, pc, #4	; (adr r2, 80014f0 <state_machine+0x3c>)
 80014ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f0:	08001505 	.word	0x08001505
 80014f4:	0800150b 	.word	0x0800150b
 80014f8:	0800150b 	.word	0x0800150b
 80014fc:	0800150b 	.word	0x0800150b
 8001500:	0800150b 	.word	0x0800150b
	case status_running:
		//Step the servos thorough one recipe
		process_servo2();
 8001504:	f7ff ff68 	bl	80013d8 <process_servo2>
		break;
 8001508:	e000      	b.n	800150c <state_machine+0x58>
	case status_paused:
		;
		break;
 800150a:	bf00      	nop
		;
		break;

	}

}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000064 	.word	0x20000064
 8001514:	20000065 	.word	0x20000065

08001518 <process_servo_command>:

void process_servo_command(char cmd, int servo) {
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	6039      	str	r1, [r7, #0]
 8001522:	71fb      	strb	r3, [r7, #7]
	int opcode = cmd & 0xE0;
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800152a:	60fb      	str	r3, [r7, #12]
	int parameter = cmd & 0x1F;
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	f003 031f 	and.w	r3, r3, #31
 8001532:	60bb      	str	r3, [r7, #8]
	switch (opcode) {
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2ba0      	cmp	r3, #160	; 0xa0
 8001538:	f000 8083 	beq.w	8001642 <process_servo_command+0x12a>
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2ba0      	cmp	r3, #160	; 0xa0
 8001540:	f300 80c9 	bgt.w	80016d6 <process_servo_command+0x1be>
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2b80      	cmp	r3, #128	; 0x80
 8001548:	d054      	beq.n	80015f4 <process_servo_command+0xdc>
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2b80      	cmp	r3, #128	; 0x80
 800154e:	f300 80c2 	bgt.w	80016d6 <process_servo_command+0x1be>
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2b40      	cmp	r3, #64	; 0x40
 8001556:	d03a      	beq.n	80015ce <process_servo_command+0xb6>
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2b40      	cmp	r3, #64	; 0x40
 800155c:	f300 80bb 	bgt.w	80016d6 <process_servo_command+0x1be>
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2b00      	cmp	r3, #0
 8001564:	f000 80ac 	beq.w	80016c0 <process_servo_command+0x1a8>
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2b20      	cmp	r3, #32
 800156c:	f040 80b3 	bne.w	80016d6 <process_servo_command+0x1be>
	case MOV:
		//DO MOV command
		if (parameter <= 5) {
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	2b05      	cmp	r3, #5
 8001574:	dc20      	bgt.n	80015b8 <process_servo_command+0xa0>
			move_servo(parameter, servo);
 8001576:	6839      	ldr	r1, [r7, #0]
 8001578:	68b8      	ldr	r0, [r7, #8]
 800157a:	f000 f8d7 	bl	800172c <move_servo>
			if (servo == 1) {
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d10c      	bne.n	800159e <process_servo_command+0x86>
				servo1_move_cycles = abs(servo1_pos - parameter);
 8001584:	4b56      	ldr	r3, [pc, #344]	; (80016e0 <process_servo_command+0x1c8>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b00      	cmp	r3, #0
 800158e:	bfb8      	it	lt
 8001590:	425b      	neglt	r3, r3
 8001592:	4a54      	ldr	r2, [pc, #336]	; (80016e4 <process_servo_command+0x1cc>)
 8001594:	6013      	str	r3, [r2, #0]
				servo1_state = state_moving;
 8001596:	4b54      	ldr	r3, [pc, #336]	; (80016e8 <process_servo_command+0x1d0>)
 8001598:	2202      	movs	r2, #2
 800159a:	701a      	strb	r2, [r3, #0]
				current_status_servo1 = status_command_error;
			} else {
				current_status_servo2 = status_command_error;
			}
		}
		break;
 800159c:	e09c      	b.n	80016d8 <process_servo_command+0x1c0>
				servo2_move_cycles = abs(servo1_pos - parameter);
 800159e:	4b50      	ldr	r3, [pc, #320]	; (80016e0 <process_servo_command+0x1c8>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	bfb8      	it	lt
 80015aa:	425b      	neglt	r3, r3
 80015ac:	4a4f      	ldr	r2, [pc, #316]	; (80016ec <process_servo_command+0x1d4>)
 80015ae:	6013      	str	r3, [r2, #0]
				servo2_state = state_moving;
 80015b0:	4b4f      	ldr	r3, [pc, #316]	; (80016f0 <process_servo_command+0x1d8>)
 80015b2:	2202      	movs	r2, #2
 80015b4:	701a      	strb	r2, [r3, #0]
		break;
 80015b6:	e08f      	b.n	80016d8 <process_servo_command+0x1c0>
			if (servo == 1) {
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d103      	bne.n	80015c6 <process_servo_command+0xae>
				current_status_servo1 = status_command_error;
 80015be:	4b4d      	ldr	r3, [pc, #308]	; (80016f4 <process_servo_command+0x1dc>)
 80015c0:	2203      	movs	r2, #3
 80015c2:	701a      	strb	r2, [r3, #0]
		break;
 80015c4:	e088      	b.n	80016d8 <process_servo_command+0x1c0>
				current_status_servo2 = status_command_error;
 80015c6:	4b4c      	ldr	r3, [pc, #304]	; (80016f8 <process_servo_command+0x1e0>)
 80015c8:	2203      	movs	r2, #3
 80015ca:	701a      	strb	r2, [r3, #0]
		break;
 80015cc:	e084      	b.n	80016d8 <process_servo_command+0x1c0>
	case WAIT:
		//DO Wait command
		if (servo == 1) {
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d107      	bne.n	80015e4 <process_servo_command+0xcc>
			//Wait the amount of cycles now
			servo1_state = state_waiting;
 80015d4:	4b44      	ldr	r3, [pc, #272]	; (80016e8 <process_servo_command+0x1d0>)
 80015d6:	2203      	movs	r2, #3
 80015d8:	701a      	strb	r2, [r3, #0]
			servo1_wait_cycles = parameter + 1;
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	3301      	adds	r3, #1
 80015de:	4a47      	ldr	r2, [pc, #284]	; (80016fc <process_servo_command+0x1e4>)
 80015e0:	6013      	str	r3, [r2, #0]
		} else {
			servo2_state = state_waiting;
			servo2_wait_cycles = parameter + 1;
		}
		break;
 80015e2:	e079      	b.n	80016d8 <process_servo_command+0x1c0>
			servo2_state = state_waiting;
 80015e4:	4b42      	ldr	r3, [pc, #264]	; (80016f0 <process_servo_command+0x1d8>)
 80015e6:	2203      	movs	r2, #3
 80015e8:	701a      	strb	r2, [r3, #0]
			servo2_wait_cycles = parameter + 1;
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	3301      	adds	r3, #1
 80015ee:	4a44      	ldr	r2, [pc, #272]	; (8001700 <process_servo_command+0x1e8>)
 80015f0:	6013      	str	r3, [r2, #0]
		break;
 80015f2:	e071      	b.n	80016d8 <process_servo_command+0x1c0>
	case LOOP:
		//DO LOOP command
		if (servo == 1) {
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d111      	bne.n	800161e <process_servo_command+0x106>
			servo1_loop_index_start = servo1_index;
 80015fa:	4b42      	ldr	r3, [pc, #264]	; (8001704 <process_servo_command+0x1ec>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	461a      	mov	r2, r3
 8001600:	4b41      	ldr	r3, [pc, #260]	; (8001708 <process_servo_command+0x1f0>)
 8001602:	601a      	str	r2, [r3, #0]
			servo1_loop_times = parameter + 1;
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	3301      	adds	r3, #1
 8001608:	4a40      	ldr	r2, [pc, #256]	; (800170c <process_servo_command+0x1f4>)
 800160a:	6013      	str	r3, [r2, #0]
			servo1_index++;
 800160c:	4b3d      	ldr	r3, [pc, #244]	; (8001704 <process_servo_command+0x1ec>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	3301      	adds	r3, #1
 8001612:	4a3c      	ldr	r2, [pc, #240]	; (8001704 <process_servo_command+0x1ec>)
 8001614:	6013      	str	r3, [r2, #0]
			servo1_in_loop = 1;
 8001616:	4b3e      	ldr	r3, [pc, #248]	; (8001710 <process_servo_command+0x1f8>)
 8001618:	2201      	movs	r2, #1
 800161a:	601a      	str	r2, [r3, #0]
			servo2_loop_index_start = servo2_index;
			servo2_loop_times = parameter + 1;
			servo2_index++;
			servo2_in_loop = 1;
		}
		break;
 800161c:	e05c      	b.n	80016d8 <process_servo_command+0x1c0>
			servo2_loop_index_start = servo2_index;
 800161e:	4b3d      	ldr	r3, [pc, #244]	; (8001714 <process_servo_command+0x1fc>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	461a      	mov	r2, r3
 8001624:	4b3c      	ldr	r3, [pc, #240]	; (8001718 <process_servo_command+0x200>)
 8001626:	601a      	str	r2, [r3, #0]
			servo2_loop_times = parameter + 1;
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	3301      	adds	r3, #1
 800162c:	4a3b      	ldr	r2, [pc, #236]	; (800171c <process_servo_command+0x204>)
 800162e:	6013      	str	r3, [r2, #0]
			servo2_index++;
 8001630:	4b38      	ldr	r3, [pc, #224]	; (8001714 <process_servo_command+0x1fc>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	3301      	adds	r3, #1
 8001636:	4a37      	ldr	r2, [pc, #220]	; (8001714 <process_servo_command+0x1fc>)
 8001638:	6013      	str	r3, [r2, #0]
			servo2_in_loop = 1;
 800163a:	4b39      	ldr	r3, [pc, #228]	; (8001720 <process_servo_command+0x208>)
 800163c:	2201      	movs	r2, #1
 800163e:	601a      	str	r2, [r3, #0]
		break;
 8001640:	e04a      	b.n	80016d8 <process_servo_command+0x1c0>
	case END_LOOP:
		//DO ENDLOOP command
		if (servo == 1) {
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d11d      	bne.n	8001684 <process_servo_command+0x16c>
			//finished iterations, move past loop
			if (servo1_loop_times == 0) {
 8001648:	4b30      	ldr	r3, [pc, #192]	; (800170c <process_servo_command+0x1f4>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d108      	bne.n	8001662 <process_servo_command+0x14a>
				servo1_index++;
 8001650:	4b2c      	ldr	r3, [pc, #176]	; (8001704 <process_servo_command+0x1ec>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	3301      	adds	r3, #1
 8001656:	4a2b      	ldr	r2, [pc, #172]	; (8001704 <process_servo_command+0x1ec>)
 8001658:	6013      	str	r3, [r2, #0]
				servo1_in_loop = 0;
 800165a:	4b2d      	ldr	r3, [pc, #180]	; (8001710 <process_servo_command+0x1f8>)
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
				servo2_loop_index_end = servo2_index;
				servo2_index = servo2_loop_index_start + 1;
				servo2_loop_times--;
			}
		}
		break;
 8001660:	e03a      	b.n	80016d8 <process_servo_command+0x1c0>
				servo1_loop_index_end = servo1_index;
 8001662:	4b28      	ldr	r3, [pc, #160]	; (8001704 <process_servo_command+0x1ec>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	461a      	mov	r2, r3
 8001668:	4b2e      	ldr	r3, [pc, #184]	; (8001724 <process_servo_command+0x20c>)
 800166a:	601a      	str	r2, [r3, #0]
				servo1_index = servo1_loop_index_start + 1;
 800166c:	4b26      	ldr	r3, [pc, #152]	; (8001708 <process_servo_command+0x1f0>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	3301      	adds	r3, #1
 8001672:	461a      	mov	r2, r3
 8001674:	4b23      	ldr	r3, [pc, #140]	; (8001704 <process_servo_command+0x1ec>)
 8001676:	601a      	str	r2, [r3, #0]
				servo1_loop_times--;
 8001678:	4b24      	ldr	r3, [pc, #144]	; (800170c <process_servo_command+0x1f4>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	3b01      	subs	r3, #1
 800167e:	4a23      	ldr	r2, [pc, #140]	; (800170c <process_servo_command+0x1f4>)
 8001680:	6013      	str	r3, [r2, #0]
		break;
 8001682:	e029      	b.n	80016d8 <process_servo_command+0x1c0>
			if (servo2_loop_times == 0) {
 8001684:	4b25      	ldr	r3, [pc, #148]	; (800171c <process_servo_command+0x204>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d108      	bne.n	800169e <process_servo_command+0x186>
				servo2_index++;
 800168c:	4b21      	ldr	r3, [pc, #132]	; (8001714 <process_servo_command+0x1fc>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	3301      	adds	r3, #1
 8001692:	4a20      	ldr	r2, [pc, #128]	; (8001714 <process_servo_command+0x1fc>)
 8001694:	6013      	str	r3, [r2, #0]
				servo2_in_loop = 0;
 8001696:	4b22      	ldr	r3, [pc, #136]	; (8001720 <process_servo_command+0x208>)
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
		break;
 800169c:	e01c      	b.n	80016d8 <process_servo_command+0x1c0>
				servo2_loop_index_end = servo2_index;
 800169e:	4b1d      	ldr	r3, [pc, #116]	; (8001714 <process_servo_command+0x1fc>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	461a      	mov	r2, r3
 80016a4:	4b20      	ldr	r3, [pc, #128]	; (8001728 <process_servo_command+0x210>)
 80016a6:	601a      	str	r2, [r3, #0]
				servo2_index = servo2_loop_index_start + 1;
 80016a8:	4b1b      	ldr	r3, [pc, #108]	; (8001718 <process_servo_command+0x200>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	3301      	adds	r3, #1
 80016ae:	461a      	mov	r2, r3
 80016b0:	4b18      	ldr	r3, [pc, #96]	; (8001714 <process_servo_command+0x1fc>)
 80016b2:	601a      	str	r2, [r3, #0]
				servo2_loop_times--;
 80016b4:	4b19      	ldr	r3, [pc, #100]	; (800171c <process_servo_command+0x204>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	3b01      	subs	r3, #1
 80016ba:	4a18      	ldr	r2, [pc, #96]	; (800171c <process_servo_command+0x204>)
 80016bc:	6013      	str	r3, [r2, #0]
		break;
 80016be:	e00b      	b.n	80016d8 <process_servo_command+0x1c0>
	case RECIPE_END:
		//Handle recipe end
		if (servo == 1) {
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d103      	bne.n	80016ce <process_servo_command+0x1b6>
			servo1_state = state_recipe_ended;
 80016c6:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <process_servo_command+0x1d0>)
 80016c8:	2204      	movs	r2, #4
 80016ca:	701a      	strb	r2, [r3, #0]
		} else {
			servo2_state = state_recipe_ended;
		}
		break;
 80016cc:	e004      	b.n	80016d8 <process_servo_command+0x1c0>
			servo2_state = state_recipe_ended;
 80016ce:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <process_servo_command+0x1d8>)
 80016d0:	2204      	movs	r2, #4
 80016d2:	701a      	strb	r2, [r3, #0]
		break;
 80016d4:	e000      	b.n	80016d8 <process_servo_command+0x1c0>
		//Handle Extra command
	default:
		break;
 80016d6:	bf00      	nop

	}

}
 80016d8:	bf00      	nop
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	200002ac 	.word	0x200002ac
 80016e4:	200002bc 	.word	0x200002bc
 80016e8:	200002a8 	.word	0x200002a8
 80016ec:	200002c0 	.word	0x200002c0
 80016f0:	200002a9 	.word	0x200002a9
 80016f4:	20000064 	.word	0x20000064
 80016f8:	20000065 	.word	0x20000065
 80016fc:	200002c4 	.word	0x200002c4
 8001700:	200002c8 	.word	0x200002c8
 8001704:	20000298 	.word	0x20000298
 8001708:	200002cc 	.word	0x200002cc
 800170c:	200002dc 	.word	0x200002dc
 8001710:	200002b4 	.word	0x200002b4
 8001714:	2000029c 	.word	0x2000029c
 8001718:	200002d0 	.word	0x200002d0
 800171c:	200002e0 	.word	0x200002e0
 8001720:	200002b8 	.word	0x200002b8
 8001724:	200002d4 	.word	0x200002d4
 8001728:	200002d8 	.word	0x200002d8

0800172c <move_servo>:
void move_servo(int pos, int servo) {
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
	switch (pos) {
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b04      	cmp	r3, #4
 800173a:	d849      	bhi.n	80017d0 <move_servo+0xa4>
 800173c:	a201      	add	r2, pc, #4	; (adr r2, 8001744 <move_servo+0x18>)
 800173e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001742:	bf00      	nop
 8001744:	08001759 	.word	0x08001759
 8001748:	08001771 	.word	0x08001771
 800174c:	08001789 	.word	0x08001789
 8001750:	080017a1 	.word	0x080017a1
 8001754:	080017b9 	.word	0x080017b9
	case 0:
		if (servo == 1) {
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d103      	bne.n	8001766 <move_servo+0x3a>
			MOVE_MOTOR1_POS1()
 800175e:	4b25      	ldr	r3, [pc, #148]	; (80017f4 <move_servo+0xc8>)
 8001760:	2218      	movs	r2, #24
 8001762:	635a      	str	r2, [r3, #52]	; 0x34
		} else {
			MOVE_MOTOR2_POS1()
		}
		break;
 8001764:	e040      	b.n	80017e8 <move_servo+0xbc>
			MOVE_MOTOR2_POS1()
 8001766:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800176a:	2218      	movs	r2, #24
 800176c:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 800176e:	e03b      	b.n	80017e8 <move_servo+0xbc>
	case 1:
		if (servo == 1) {
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d103      	bne.n	800177e <move_servo+0x52>
			MOVE_MOTOR1_POS2()
 8001776:	4b1f      	ldr	r3, [pc, #124]	; (80017f4 <move_servo+0xc8>)
 8001778:	2223      	movs	r2, #35	; 0x23
 800177a:	635a      	str	r2, [r3, #52]	; 0x34
		} else {
			MOVE_MOTOR2_POS2()
		}
		break;
 800177c:	e034      	b.n	80017e8 <move_servo+0xbc>
			MOVE_MOTOR2_POS2()
 800177e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001782:	2223      	movs	r2, #35	; 0x23
 8001784:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8001786:	e02f      	b.n	80017e8 <move_servo+0xbc>
	case 2:
		if (servo == 1) {
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d103      	bne.n	8001796 <move_servo+0x6a>
			MOVE_MOTOR1_POS3()
 800178e:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <move_servo+0xc8>)
 8001790:	2232      	movs	r2, #50	; 0x32
 8001792:	635a      	str	r2, [r3, #52]	; 0x34
		} else {
			MOVE_MOTOR2_POS3()
		}
		break;
 8001794:	e028      	b.n	80017e8 <move_servo+0xbc>
			MOVE_MOTOR2_POS3()
 8001796:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800179a:	2232      	movs	r2, #50	; 0x32
 800179c:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 800179e:	e023      	b.n	80017e8 <move_servo+0xbc>
	case 3:
		if (servo == 1) {
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d103      	bne.n	80017ae <move_servo+0x82>
			MOVE_MOTOR1_POS4()
 80017a6:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <move_servo+0xc8>)
 80017a8:	2244      	movs	r2, #68	; 0x44
 80017aa:	635a      	str	r2, [r3, #52]	; 0x34
		} else {
			MOVE_MOTOR2_POS4()
		}
		break;
 80017ac:	e01c      	b.n	80017e8 <move_servo+0xbc>
			MOVE_MOTOR2_POS4()
 80017ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017b2:	2244      	movs	r2, #68	; 0x44
 80017b4:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 80017b6:	e017      	b.n	80017e8 <move_servo+0xbc>
	case 4:
		if (servo == 1) {
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d103      	bne.n	80017c6 <move_servo+0x9a>
			MOVE_MOTOR1_POS5()
 80017be:	4b0d      	ldr	r3, [pc, #52]	; (80017f4 <move_servo+0xc8>)
 80017c0:	2255      	movs	r2, #85	; 0x55
 80017c2:	635a      	str	r2, [r3, #52]	; 0x34
		} else {
			MOVE_MOTOR2_POS5()
		}
		break;
 80017c4:	e010      	b.n	80017e8 <move_servo+0xbc>
			MOVE_MOTOR2_POS5()
 80017c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017ca:	2255      	movs	r2, #85	; 0x55
 80017cc:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 80017ce:	e00b      	b.n	80017e8 <move_servo+0xbc>
	default:
		if (servo == 1) {
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d103      	bne.n	80017de <move_servo+0xb2>
			MOVE_MOTOR1_POS6()
 80017d6:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <move_servo+0xc8>)
 80017d8:	2264      	movs	r2, #100	; 0x64
 80017da:	635a      	str	r2, [r3, #52]	; 0x34
		} else {
			MOVE_MOTOR2_POS6()
		}
		break;
 80017dc:	e003      	b.n	80017e6 <move_servo+0xba>
			MOVE_MOTOR2_POS6()
 80017de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017e2:	2264      	movs	r2, #100	; 0x64
 80017e4:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 80017e6:	bf00      	nop
	}
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	40000400 	.word	0x40000400

080017f8 <check_errors>:
// returns 0 if no problems with command, otherwise will return -1 for nested error
int check_errors(char cmd, int servo) {
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	6039      	str	r1, [r7, #0]
 8001802:	71fb      	strb	r3, [r7, #7]
	int opcode = cmd & 0xE0;
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800180a:	60fb      	str	r3, [r7, #12]
	if ((opcode == LOOP) && servo1_in_loop && servo == 1) {
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2b80      	cmp	r3, #128	; 0x80
 8001810:	d10c      	bne.n	800182c <check_errors+0x34>
 8001812:	4b12      	ldr	r3, [pc, #72]	; (800185c <check_errors+0x64>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d008      	beq.n	800182c <check_errors+0x34>
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d105      	bne.n	800182c <check_errors+0x34>
		current_status_servo1 = status_nested_error;
 8001820:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <check_errors+0x68>)
 8001822:	2204      	movs	r2, #4
 8001824:	701a      	strb	r2, [r3, #0]
		return -1;
 8001826:	f04f 33ff 	mov.w	r3, #4294967295
 800182a:	e010      	b.n	800184e <check_errors+0x56>
	}
	if ((opcode == LOOP) && servo2_in_loop && servo == 2) {
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2b80      	cmp	r3, #128	; 0x80
 8001830:	d10c      	bne.n	800184c <check_errors+0x54>
 8001832:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <check_errors+0x6c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d008      	beq.n	800184c <check_errors+0x54>
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	2b02      	cmp	r3, #2
 800183e:	d105      	bne.n	800184c <check_errors+0x54>
		current_status_servo2 = status_nested_error;
 8001840:	4b09      	ldr	r3, [pc, #36]	; (8001868 <check_errors+0x70>)
 8001842:	2204      	movs	r2, #4
 8001844:	701a      	strb	r2, [r3, #0]
		return -1;
 8001846:	f04f 33ff 	mov.w	r3, #4294967295
 800184a:	e000      	b.n	800184e <check_errors+0x56>
	}
	return 0;
 800184c:	2300      	movs	r3, #0

}
 800184e:	4618      	mov	r0, r3
 8001850:	3714      	adds	r7, #20
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	200002b4 	.word	0x200002b4
 8001860:	20000064 	.word	0x20000064
 8001864:	200002b8 	.word	0x200002b8
 8001868:	20000065 	.word	0x20000065

0800186c <init_servo1>:
void init_servo1() {
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
	MOVE_MOTOR1_POS1()
 8001870:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <init_servo1+0x38>)
 8001872:	2218      	movs	r2, #24
 8001874:	635a      	str	r2, [r3, #52]	; 0x34
	servo1_index = 0;
 8001876:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <init_servo1+0x3c>)
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
	servo1_loop_index_end = 0;
 800187c:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <init_servo1+0x40>)
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
	servo1_loop_index_start = 0;
 8001882:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <init_servo1+0x44>)
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
	servo1_loop_times = 0;
 8001888:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <init_servo1+0x48>)
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
	servo1_pos = 0;
 800188e:	4b0a      	ldr	r3, [pc, #40]	; (80018b8 <init_servo1+0x4c>)
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
	current_status_servo1 = status_paused;
 8001894:	4b09      	ldr	r3, [pc, #36]	; (80018bc <init_servo1+0x50>)
 8001896:	2201      	movs	r2, #1
 8001898:	701a      	strb	r2, [r3, #0]
}
 800189a:	bf00      	nop
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	40000400 	.word	0x40000400
 80018a8:	20000298 	.word	0x20000298
 80018ac:	200002d4 	.word	0x200002d4
 80018b0:	200002cc 	.word	0x200002cc
 80018b4:	200002dc 	.word	0x200002dc
 80018b8:	200002ac 	.word	0x200002ac
 80018bc:	20000064 	.word	0x20000064

080018c0 <init_servo2>:

void init_servo2() {
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
	MOVE_MOTOR2_POS1()
 80018c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018c8:	2218      	movs	r2, #24
 80018ca:	63da      	str	r2, [r3, #60]	; 0x3c
	servo2_index = 0;
 80018cc:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <init_servo2+0x3c>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
	servo2_loop_index_end = 0;
 80018d2:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <init_servo2+0x40>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
	servo2_loop_index_start = 0;
 80018d8:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <init_servo2+0x44>)
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
	servo2_loop_times = 0;
 80018de:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <init_servo2+0x48>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
	servo2_pos = 0;
 80018e4:	4b09      	ldr	r3, [pc, #36]	; (800190c <init_servo2+0x4c>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
	current_status_servo2 = status_paused;
 80018ea:	4b09      	ldr	r3, [pc, #36]	; (8001910 <init_servo2+0x50>)
 80018ec:	2201      	movs	r2, #1
 80018ee:	701a      	strb	r2, [r3, #0]
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	2000029c 	.word	0x2000029c
 8001900:	200002d8 	.word	0x200002d8
 8001904:	200002d0 	.word	0x200002d0
 8001908:	200002e0 	.word	0x200002e0
 800190c:	200002b0 	.word	0x200002b0
 8001910:	20000065 	.word	0x20000065

08001914 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800191a:	4b0f      	ldr	r3, [pc, #60]	; (8001958 <HAL_MspInit+0x44>)
 800191c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800191e:	4a0e      	ldr	r2, [pc, #56]	; (8001958 <HAL_MspInit+0x44>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	6613      	str	r3, [r2, #96]	; 0x60
 8001926:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <HAL_MspInit+0x44>)
 8001928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	607b      	str	r3, [r7, #4]
 8001930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001932:	4b09      	ldr	r3, [pc, #36]	; (8001958 <HAL_MspInit+0x44>)
 8001934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001936:	4a08      	ldr	r2, [pc, #32]	; (8001958 <HAL_MspInit+0x44>)
 8001938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800193c:	6593      	str	r3, [r2, #88]	; 0x58
 800193e:	4b06      	ldr	r3, [pc, #24]	; (8001958 <HAL_MspInit+0x44>)
 8001940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001946:	603b      	str	r3, [r7, #0]
 8001948:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	40021000 	.word	0x40021000

0800195c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800196c:	d10c      	bne.n	8001988 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800196e:	4b27      	ldr	r3, [pc, #156]	; (8001a0c <HAL_TIM_Base_MspInit+0xb0>)
 8001970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001972:	4a26      	ldr	r2, [pc, #152]	; (8001a0c <HAL_TIM_Base_MspInit+0xb0>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	6593      	str	r3, [r2, #88]	; 0x58
 800197a:	4b24      	ldr	r3, [pc, #144]	; (8001a0c <HAL_TIM_Base_MspInit+0xb0>)
 800197c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	617b      	str	r3, [r7, #20]
 8001984:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001986:	e03c      	b.n	8001a02 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a20      	ldr	r2, [pc, #128]	; (8001a10 <HAL_TIM_Base_MspInit+0xb4>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d10c      	bne.n	80019ac <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001992:	4b1e      	ldr	r3, [pc, #120]	; (8001a0c <HAL_TIM_Base_MspInit+0xb0>)
 8001994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001996:	4a1d      	ldr	r2, [pc, #116]	; (8001a0c <HAL_TIM_Base_MspInit+0xb0>)
 8001998:	f043 0302 	orr.w	r3, r3, #2
 800199c:	6593      	str	r3, [r2, #88]	; 0x58
 800199e:	4b1b      	ldr	r3, [pc, #108]	; (8001a0c <HAL_TIM_Base_MspInit+0xb0>)
 80019a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	613b      	str	r3, [r7, #16]
 80019a8:	693b      	ldr	r3, [r7, #16]
}
 80019aa:	e02a      	b.n	8001a02 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM5)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a18      	ldr	r2, [pc, #96]	; (8001a14 <HAL_TIM_Base_MspInit+0xb8>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d10c      	bne.n	80019d0 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80019b6:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <HAL_TIM_Base_MspInit+0xb0>)
 80019b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ba:	4a14      	ldr	r2, [pc, #80]	; (8001a0c <HAL_TIM_Base_MspInit+0xb0>)
 80019bc:	f043 0308 	orr.w	r3, r3, #8
 80019c0:	6593      	str	r3, [r2, #88]	; 0x58
 80019c2:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <HAL_TIM_Base_MspInit+0xb0>)
 80019c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c6:	f003 0308 	and.w	r3, r3, #8
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
}
 80019ce:	e018      	b.n	8001a02 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM6)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a10      	ldr	r2, [pc, #64]	; (8001a18 <HAL_TIM_Base_MspInit+0xbc>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d113      	bne.n	8001a02 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80019da:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <HAL_TIM_Base_MspInit+0xb0>)
 80019dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019de:	4a0b      	ldr	r2, [pc, #44]	; (8001a0c <HAL_TIM_Base_MspInit+0xb0>)
 80019e0:	f043 0310 	orr.w	r3, r3, #16
 80019e4:	6593      	str	r3, [r2, #88]	; 0x58
 80019e6:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <HAL_TIM_Base_MspInit+0xb0>)
 80019e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ea:	f003 0310 	and.w	r3, r3, #16
 80019ee:	60bb      	str	r3, [r7, #8]
 80019f0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80019f2:	2200      	movs	r2, #0
 80019f4:	2100      	movs	r1, #0
 80019f6:	2036      	movs	r0, #54	; 0x36
 80019f8:	f000 fadd 	bl	8001fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80019fc:	2036      	movs	r0, #54	; 0x36
 80019fe:	f000 faf6 	bl	8001fee <HAL_NVIC_EnableIRQ>
}
 8001a02:	bf00      	nop
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	40000400 	.word	0x40000400
 8001a14:	40000c00 	.word	0x40000c00
 8001a18:	40001000 	.word	0x40001000

08001a1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08a      	sub	sp, #40	; 0x28
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a24:	f107 0314 	add.w	r3, r7, #20
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a3c:	d11d      	bne.n	8001a7a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a3e:	4b21      	ldr	r3, [pc, #132]	; (8001ac4 <HAL_TIM_MspPostInit+0xa8>)
 8001a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a42:	4a20      	ldr	r2, [pc, #128]	; (8001ac4 <HAL_TIM_MspPostInit+0xa8>)
 8001a44:	f043 0302 	orr.w	r3, r3, #2
 8001a48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a4a:	4b1e      	ldr	r3, [pc, #120]	; (8001ac4 <HAL_TIM_MspPostInit+0xa8>)
 8001a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	613b      	str	r3, [r7, #16]
 8001a54:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a64:	2300      	movs	r3, #0
 8001a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a6c:	f107 0314 	add.w	r3, r7, #20
 8001a70:	4619      	mov	r1, r3
 8001a72:	4815      	ldr	r0, [pc, #84]	; (8001ac8 <HAL_TIM_MspPostInit+0xac>)
 8001a74:	f000 fad6 	bl	8002024 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a78:	e020      	b.n	8001abc <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM3)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a13      	ldr	r2, [pc, #76]	; (8001acc <HAL_TIM_MspPostInit+0xb0>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d11b      	bne.n	8001abc <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a84:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <HAL_TIM_MspPostInit+0xa8>)
 8001a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a88:	4a0e      	ldr	r2, [pc, #56]	; (8001ac4 <HAL_TIM_MspPostInit+0xa8>)
 8001a8a:	f043 0302 	orr.w	r3, r3, #2
 8001a8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a90:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <HAL_TIM_MspPostInit+0xa8>)
 8001a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a9c:	2310      	movs	r3, #16
 8001a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001aac:	2302      	movs	r3, #2
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4804      	ldr	r0, [pc, #16]	; (8001ac8 <HAL_TIM_MspPostInit+0xac>)
 8001ab8:	f000 fab4 	bl	8002024 <HAL_GPIO_Init>
}
 8001abc:	bf00      	nop
 8001abe:	3728      	adds	r7, #40	; 0x28
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	48000400 	.word	0x48000400
 8001acc:	40000400 	.word	0x40000400

08001ad0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b0ac      	sub	sp, #176	; 0xb0
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ae8:	f107 0314 	add.w	r3, r7, #20
 8001aec:	2288      	movs	r2, #136	; 0x88
 8001aee:	2100      	movs	r1, #0
 8001af0:	4618      	mov	r0, r3
 8001af2:	f004 f813 	bl	8005b1c <memset>
  if(huart->Instance==USART2)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a21      	ldr	r2, [pc, #132]	; (8001b80 <HAL_UART_MspInit+0xb0>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d13b      	bne.n	8001b78 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b00:	2302      	movs	r3, #2
 8001b02:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b04:	2300      	movs	r3, #0
 8001b06:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b08:	f107 0314 	add.w	r3, r7, #20
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f001 faaf 	bl	8003070 <HAL_RCCEx_PeriphCLKConfig>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b18:	f7ff f9da 	bl	8000ed0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b1c:	4b19      	ldr	r3, [pc, #100]	; (8001b84 <HAL_UART_MspInit+0xb4>)
 8001b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b20:	4a18      	ldr	r2, [pc, #96]	; (8001b84 <HAL_UART_MspInit+0xb4>)
 8001b22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b26:	6593      	str	r3, [r2, #88]	; 0x58
 8001b28:	4b16      	ldr	r3, [pc, #88]	; (8001b84 <HAL_UART_MspInit+0xb4>)
 8001b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b30:	613b      	str	r3, [r7, #16]
 8001b32:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b34:	4b13      	ldr	r3, [pc, #76]	; (8001b84 <HAL_UART_MspInit+0xb4>)
 8001b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b38:	4a12      	ldr	r2, [pc, #72]	; (8001b84 <HAL_UART_MspInit+0xb4>)
 8001b3a:	f043 0301 	orr.w	r3, r3, #1
 8001b3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b40:	4b10      	ldr	r3, [pc, #64]	; (8001b84 <HAL_UART_MspInit+0xb4>)
 8001b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b4c:	230c      	movs	r3, #12
 8001b4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b52:	2302      	movs	r3, #2
 8001b54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b64:	2307      	movs	r3, #7
 8001b66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b6e:	4619      	mov	r1, r3
 8001b70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b74:	f000 fa56 	bl	8002024 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b78:	bf00      	nop
 8001b7a:	37b0      	adds	r7, #176	; 0xb0
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40004400 	.word	0x40004400
 8001b84:	40021000 	.word	0x40021000

08001b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b8c:	e7fe      	b.n	8001b8c <NMI_Handler+0x4>

08001b8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b92:	e7fe      	b.n	8001b92 <HardFault_Handler+0x4>

08001b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b98:	e7fe      	b.n	8001b98 <MemManage_Handler+0x4>

08001b9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b9e:	e7fe      	b.n	8001b9e <BusFault_Handler+0x4>

08001ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ba4:	e7fe      	b.n	8001ba4 <UsageFault_Handler+0x4>

08001ba6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bd4:	f000 f8f4 	bl	8001dc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bd8:	bf00      	nop
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001be0:	4802      	ldr	r0, [pc, #8]	; (8001bec <TIM6_DAC_IRQHandler+0x10>)
 8001be2:	f002 f931 	bl	8003e48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	200001c4 	.word	0x200001c4

08001bf0 <_kill>:
{
  return 1;
}

int _kill(int pid, int sig)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bfa:	f003 ffa7 	bl	8005b4c <__errno>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2216      	movs	r2, #22
 8001c02:	601a      	str	r2, [r3, #0]
  return -1;
 8001c04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <_exit>:

void _exit (int status)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c18:	f04f 31ff 	mov.w	r1, #4294967295
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f7ff ffe7 	bl	8001bf0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c22:	e7fe      	b.n	8001c22 <_exit+0x12>

08001c24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c2c:	4a14      	ldr	r2, [pc, #80]	; (8001c80 <_sbrk+0x5c>)
 8001c2e:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <_sbrk+0x60>)
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c38:	4b13      	ldr	r3, [pc, #76]	; (8001c88 <_sbrk+0x64>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d102      	bne.n	8001c46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c40:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <_sbrk+0x64>)
 8001c42:	4a12      	ldr	r2, [pc, #72]	; (8001c8c <_sbrk+0x68>)
 8001c44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c46:	4b10      	ldr	r3, [pc, #64]	; (8001c88 <_sbrk+0x64>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d207      	bcs.n	8001c64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c54:	f003 ff7a 	bl	8005b4c <__errno>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	220c      	movs	r2, #12
 8001c5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c62:	e009      	b.n	8001c78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c64:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <_sbrk+0x64>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c6a:	4b07      	ldr	r3, [pc, #28]	; (8001c88 <_sbrk+0x64>)
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4413      	add	r3, r2
 8001c72:	4a05      	ldr	r2, [pc, #20]	; (8001c88 <_sbrk+0x64>)
 8001c74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c76:	68fb      	ldr	r3, [r7, #12]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3718      	adds	r7, #24
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	20018000 	.word	0x20018000
 8001c84:	00000400 	.word	0x00000400
 8001c88:	2000036c 	.word	0x2000036c
 8001c8c:	200004c0 	.word	0x200004c0

08001c90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <SystemInit+0x20>)
 8001c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c9a:	4a05      	ldr	r2, [pc, #20]	; (8001cb0 <SystemInit+0x20>)
 8001c9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ca0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001ca4:	bf00      	nop
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001cb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cb8:	f7ff ffea 	bl	8001c90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cbc:	480c      	ldr	r0, [pc, #48]	; (8001cf0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cbe:	490d      	ldr	r1, [pc, #52]	; (8001cf4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cc0:	4a0d      	ldr	r2, [pc, #52]	; (8001cf8 <LoopForever+0xe>)
  movs r3, #0
 8001cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cc4:	e002      	b.n	8001ccc <LoopCopyDataInit>

08001cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cca:	3304      	adds	r3, #4

08001ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cd0:	d3f9      	bcc.n	8001cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cd2:	4a0a      	ldr	r2, [pc, #40]	; (8001cfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cd4:	4c0a      	ldr	r4, [pc, #40]	; (8001d00 <LoopForever+0x16>)
  movs r3, #0
 8001cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cd8:	e001      	b.n	8001cde <LoopFillZerobss>

08001cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cdc:	3204      	adds	r2, #4

08001cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ce0:	d3fb      	bcc.n	8001cda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ce2:	f003 ff39 	bl	8005b58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ce6:	f7fe fc49 	bl	800057c <main>

08001cea <LoopForever>:

LoopForever:
    b LoopForever
 8001cea:	e7fe      	b.n	8001cea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001cec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001cf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cf4:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8001cf8:	08006398 	.word	0x08006398
  ldr r2, =_sbss
 8001cfc:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 8001d00:	200004c0 	.word	0x200004c0

08001d04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d04:	e7fe      	b.n	8001d04 <ADC1_2_IRQHandler>
	...

08001d08 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d12:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <HAL_Init+0x3c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a0b      	ldr	r2, [pc, #44]	; (8001d44 <HAL_Init+0x3c>)
 8001d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d1c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d1e:	2003      	movs	r0, #3
 8001d20:	f000 f93e 	bl	8001fa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d24:	2000      	movs	r0, #0
 8001d26:	f000 f80f 	bl	8001d48 <HAL_InitTick>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d002      	beq.n	8001d36 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	71fb      	strb	r3, [r7, #7]
 8001d34:	e001      	b.n	8001d3a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d36:	f7ff fded 	bl	8001914 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40022000 	.word	0x40022000

08001d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d50:	2300      	movs	r3, #0
 8001d52:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d54:	4b17      	ldr	r3, [pc, #92]	; (8001db4 <HAL_InitTick+0x6c>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d023      	beq.n	8001da4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d5c:	4b16      	ldr	r3, [pc, #88]	; (8001db8 <HAL_InitTick+0x70>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	4b14      	ldr	r3, [pc, #80]	; (8001db4 <HAL_InitTick+0x6c>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	4619      	mov	r1, r3
 8001d66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d72:	4618      	mov	r0, r3
 8001d74:	f000 f949 	bl	800200a <HAL_SYSTICK_Config>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10f      	bne.n	8001d9e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b0f      	cmp	r3, #15
 8001d82:	d809      	bhi.n	8001d98 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d84:	2200      	movs	r2, #0
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	f04f 30ff 	mov.w	r0, #4294967295
 8001d8c:	f000 f913 	bl	8001fb6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d90:	4a0a      	ldr	r2, [pc, #40]	; (8001dbc <HAL_InitTick+0x74>)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6013      	str	r3, [r2, #0]
 8001d96:	e007      	b.n	8001da8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	73fb      	strb	r3, [r7, #15]
 8001d9c:	e004      	b.n	8001da8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	73fb      	strb	r3, [r7, #15]
 8001da2:	e001      	b.n	8001da8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000070 	.word	0x20000070
 8001db8:	20000068 	.word	0x20000068
 8001dbc:	2000006c 	.word	0x2000006c

08001dc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001dc4:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <HAL_IncTick+0x20>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <HAL_IncTick+0x24>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4413      	add	r3, r2
 8001dd0:	4a04      	ldr	r2, [pc, #16]	; (8001de4 <HAL_IncTick+0x24>)
 8001dd2:	6013      	str	r3, [r2, #0]
}
 8001dd4:	bf00      	nop
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	20000070 	.word	0x20000070
 8001de4:	20000370 	.word	0x20000370

08001de8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return uwTick;
 8001dec:	4b03      	ldr	r3, [pc, #12]	; (8001dfc <HAL_GetTick+0x14>)
 8001dee:	681b      	ldr	r3, [r3, #0]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	20000370 	.word	0x20000370

08001e00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e10:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <__NVIC_SetPriorityGrouping+0x44>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e16:	68ba      	ldr	r2, [r7, #8]
 8001e18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e32:	4a04      	ldr	r2, [pc, #16]	; (8001e44 <__NVIC_SetPriorityGrouping+0x44>)
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	60d3      	str	r3, [r2, #12]
}
 8001e38:	bf00      	nop
 8001e3a:	3714      	adds	r7, #20
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	e000ed00 	.word	0xe000ed00

08001e48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e4c:	4b04      	ldr	r3, [pc, #16]	; (8001e60 <__NVIC_GetPriorityGrouping+0x18>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	0a1b      	lsrs	r3, r3, #8
 8001e52:	f003 0307 	and.w	r3, r3, #7
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr
 8001e60:	e000ed00 	.word	0xe000ed00

08001e64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	db0b      	blt.n	8001e8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e76:	79fb      	ldrb	r3, [r7, #7]
 8001e78:	f003 021f 	and.w	r2, r3, #31
 8001e7c:	4907      	ldr	r1, [pc, #28]	; (8001e9c <__NVIC_EnableIRQ+0x38>)
 8001e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e82:	095b      	lsrs	r3, r3, #5
 8001e84:	2001      	movs	r0, #1
 8001e86:	fa00 f202 	lsl.w	r2, r0, r2
 8001e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	e000e100 	.word	0xe000e100

08001ea0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	6039      	str	r1, [r7, #0]
 8001eaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	db0a      	blt.n	8001eca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	b2da      	uxtb	r2, r3
 8001eb8:	490c      	ldr	r1, [pc, #48]	; (8001eec <__NVIC_SetPriority+0x4c>)
 8001eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebe:	0112      	lsls	r2, r2, #4
 8001ec0:	b2d2      	uxtb	r2, r2
 8001ec2:	440b      	add	r3, r1
 8001ec4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ec8:	e00a      	b.n	8001ee0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	4908      	ldr	r1, [pc, #32]	; (8001ef0 <__NVIC_SetPriority+0x50>)
 8001ed0:	79fb      	ldrb	r3, [r7, #7]
 8001ed2:	f003 030f 	and.w	r3, r3, #15
 8001ed6:	3b04      	subs	r3, #4
 8001ed8:	0112      	lsls	r2, r2, #4
 8001eda:	b2d2      	uxtb	r2, r2
 8001edc:	440b      	add	r3, r1
 8001ede:	761a      	strb	r2, [r3, #24]
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	e000e100 	.word	0xe000e100
 8001ef0:	e000ed00 	.word	0xe000ed00

08001ef4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b089      	sub	sp, #36	; 0x24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	f1c3 0307 	rsb	r3, r3, #7
 8001f0e:	2b04      	cmp	r3, #4
 8001f10:	bf28      	it	cs
 8001f12:	2304      	movcs	r3, #4
 8001f14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	3304      	adds	r3, #4
 8001f1a:	2b06      	cmp	r3, #6
 8001f1c:	d902      	bls.n	8001f24 <NVIC_EncodePriority+0x30>
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	3b03      	subs	r3, #3
 8001f22:	e000      	b.n	8001f26 <NVIC_EncodePriority+0x32>
 8001f24:	2300      	movs	r3, #0
 8001f26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f28:	f04f 32ff 	mov.w	r2, #4294967295
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43da      	mvns	r2, r3
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	401a      	ands	r2, r3
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	fa01 f303 	lsl.w	r3, r1, r3
 8001f46:	43d9      	mvns	r1, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f4c:	4313      	orrs	r3, r2
         );
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3724      	adds	r7, #36	; 0x24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
	...

08001f5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3b01      	subs	r3, #1
 8001f68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f6c:	d301      	bcc.n	8001f72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e00f      	b.n	8001f92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f72:	4a0a      	ldr	r2, [pc, #40]	; (8001f9c <SysTick_Config+0x40>)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f7a:	210f      	movs	r1, #15
 8001f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f80:	f7ff ff8e 	bl	8001ea0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f84:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <SysTick_Config+0x40>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f8a:	4b04      	ldr	r3, [pc, #16]	; (8001f9c <SysTick_Config+0x40>)
 8001f8c:	2207      	movs	r2, #7
 8001f8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	e000e010 	.word	0xe000e010

08001fa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f7ff ff29 	bl	8001e00 <__NVIC_SetPriorityGrouping>
}
 8001fae:	bf00      	nop
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b086      	sub	sp, #24
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	60b9      	str	r1, [r7, #8]
 8001fc0:	607a      	str	r2, [r7, #4]
 8001fc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fc8:	f7ff ff3e 	bl	8001e48 <__NVIC_GetPriorityGrouping>
 8001fcc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	68b9      	ldr	r1, [r7, #8]
 8001fd2:	6978      	ldr	r0, [r7, #20]
 8001fd4:	f7ff ff8e 	bl	8001ef4 <NVIC_EncodePriority>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fde:	4611      	mov	r1, r2
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff ff5d 	bl	8001ea0 <__NVIC_SetPriority>
}
 8001fe6:	bf00      	nop
 8001fe8:	3718      	adds	r7, #24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b082      	sub	sp, #8
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff ff31 	bl	8001e64 <__NVIC_EnableIRQ>
}
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b082      	sub	sp, #8
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7ff ffa2 	bl	8001f5c <SysTick_Config>
 8002018:	4603      	mov	r3, r0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
	...

08002024 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002024:	b480      	push	{r7}
 8002026:	b087      	sub	sp, #28
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002032:	e17f      	b.n	8002334 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	2101      	movs	r1, #1
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	fa01 f303 	lsl.w	r3, r1, r3
 8002040:	4013      	ands	r3, r2
 8002042:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2b00      	cmp	r3, #0
 8002048:	f000 8171 	beq.w	800232e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f003 0303 	and.w	r3, r3, #3
 8002054:	2b01      	cmp	r3, #1
 8002056:	d005      	beq.n	8002064 <HAL_GPIO_Init+0x40>
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f003 0303 	and.w	r3, r3, #3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d130      	bne.n	80020c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	2203      	movs	r2, #3
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	43db      	mvns	r3, r3
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	4013      	ands	r3, r2
 800207a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	68da      	ldr	r2, [r3, #12]
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	4313      	orrs	r3, r2
 800208c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800209a:	2201      	movs	r2, #1
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43db      	mvns	r3, r3
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	4013      	ands	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	091b      	lsrs	r3, r3, #4
 80020b0:	f003 0201 	and.w	r2, r3, #1
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	4313      	orrs	r3, r2
 80020be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f003 0303 	and.w	r3, r3, #3
 80020ce:	2b03      	cmp	r3, #3
 80020d0:	d118      	bne.n	8002104 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80020d8:	2201      	movs	r2, #1
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	4013      	ands	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	08db      	lsrs	r3, r3, #3
 80020ee:	f003 0201 	and.w	r2, r3, #1
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 0303 	and.w	r3, r3, #3
 800210c:	2b03      	cmp	r3, #3
 800210e:	d017      	beq.n	8002140 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	2203      	movs	r2, #3
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	4013      	ands	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	4313      	orrs	r3, r2
 8002138:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 0303 	and.w	r3, r3, #3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d123      	bne.n	8002194 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	08da      	lsrs	r2, r3, #3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3208      	adds	r2, #8
 8002154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002158:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	220f      	movs	r2, #15
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	43db      	mvns	r3, r3
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	4013      	ands	r3, r2
 800216e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	691a      	ldr	r2, [r3, #16]
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	f003 0307 	and.w	r3, r3, #7
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	4313      	orrs	r3, r2
 8002184:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	08da      	lsrs	r2, r3, #3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3208      	adds	r2, #8
 800218e:	6939      	ldr	r1, [r7, #16]
 8002190:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	2203      	movs	r2, #3
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	43db      	mvns	r3, r3
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	4013      	ands	r3, r2
 80021aa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f003 0203 	and.w	r2, r3, #3
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	4313      	orrs	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f000 80ac 	beq.w	800232e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021d6:	4b5f      	ldr	r3, [pc, #380]	; (8002354 <HAL_GPIO_Init+0x330>)
 80021d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021da:	4a5e      	ldr	r2, [pc, #376]	; (8002354 <HAL_GPIO_Init+0x330>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	6613      	str	r3, [r2, #96]	; 0x60
 80021e2:	4b5c      	ldr	r3, [pc, #368]	; (8002354 <HAL_GPIO_Init+0x330>)
 80021e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	60bb      	str	r3, [r7, #8]
 80021ec:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021ee:	4a5a      	ldr	r2, [pc, #360]	; (8002358 <HAL_GPIO_Init+0x334>)
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	089b      	lsrs	r3, r3, #2
 80021f4:	3302      	adds	r3, #2
 80021f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	220f      	movs	r2, #15
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43db      	mvns	r3, r3
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	4013      	ands	r3, r2
 8002210:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002218:	d025      	beq.n	8002266 <HAL_GPIO_Init+0x242>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a4f      	ldr	r2, [pc, #316]	; (800235c <HAL_GPIO_Init+0x338>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d01f      	beq.n	8002262 <HAL_GPIO_Init+0x23e>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a4e      	ldr	r2, [pc, #312]	; (8002360 <HAL_GPIO_Init+0x33c>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d019      	beq.n	800225e <HAL_GPIO_Init+0x23a>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a4d      	ldr	r2, [pc, #308]	; (8002364 <HAL_GPIO_Init+0x340>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d013      	beq.n	800225a <HAL_GPIO_Init+0x236>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a4c      	ldr	r2, [pc, #304]	; (8002368 <HAL_GPIO_Init+0x344>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d00d      	beq.n	8002256 <HAL_GPIO_Init+0x232>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a4b      	ldr	r2, [pc, #300]	; (800236c <HAL_GPIO_Init+0x348>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d007      	beq.n	8002252 <HAL_GPIO_Init+0x22e>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a4a      	ldr	r2, [pc, #296]	; (8002370 <HAL_GPIO_Init+0x34c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d101      	bne.n	800224e <HAL_GPIO_Init+0x22a>
 800224a:	2306      	movs	r3, #6
 800224c:	e00c      	b.n	8002268 <HAL_GPIO_Init+0x244>
 800224e:	2307      	movs	r3, #7
 8002250:	e00a      	b.n	8002268 <HAL_GPIO_Init+0x244>
 8002252:	2305      	movs	r3, #5
 8002254:	e008      	b.n	8002268 <HAL_GPIO_Init+0x244>
 8002256:	2304      	movs	r3, #4
 8002258:	e006      	b.n	8002268 <HAL_GPIO_Init+0x244>
 800225a:	2303      	movs	r3, #3
 800225c:	e004      	b.n	8002268 <HAL_GPIO_Init+0x244>
 800225e:	2302      	movs	r3, #2
 8002260:	e002      	b.n	8002268 <HAL_GPIO_Init+0x244>
 8002262:	2301      	movs	r3, #1
 8002264:	e000      	b.n	8002268 <HAL_GPIO_Init+0x244>
 8002266:	2300      	movs	r3, #0
 8002268:	697a      	ldr	r2, [r7, #20]
 800226a:	f002 0203 	and.w	r2, r2, #3
 800226e:	0092      	lsls	r2, r2, #2
 8002270:	4093      	lsls	r3, r2
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	4313      	orrs	r3, r2
 8002276:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002278:	4937      	ldr	r1, [pc, #220]	; (8002358 <HAL_GPIO_Init+0x334>)
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	089b      	lsrs	r3, r3, #2
 800227e:	3302      	adds	r3, #2
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002286:	4b3b      	ldr	r3, [pc, #236]	; (8002374 <HAL_GPIO_Init+0x350>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	43db      	mvns	r3, r3
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	4013      	ands	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022aa:	4a32      	ldr	r2, [pc, #200]	; (8002374 <HAL_GPIO_Init+0x350>)
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80022b0:	4b30      	ldr	r3, [pc, #192]	; (8002374 <HAL_GPIO_Init+0x350>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	43db      	mvns	r3, r3
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	4013      	ands	r3, r2
 80022be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d003      	beq.n	80022d4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022d4:	4a27      	ldr	r2, [pc, #156]	; (8002374 <HAL_GPIO_Init+0x350>)
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80022da:	4b26      	ldr	r3, [pc, #152]	; (8002374 <HAL_GPIO_Init+0x350>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	43db      	mvns	r3, r3
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	4013      	ands	r3, r2
 80022e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022fe:	4a1d      	ldr	r2, [pc, #116]	; (8002374 <HAL_GPIO_Init+0x350>)
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002304:	4b1b      	ldr	r3, [pc, #108]	; (8002374 <HAL_GPIO_Init+0x350>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	43db      	mvns	r3, r3
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	4013      	ands	r3, r2
 8002312:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d003      	beq.n	8002328 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	4313      	orrs	r3, r2
 8002326:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002328:	4a12      	ldr	r2, [pc, #72]	; (8002374 <HAL_GPIO_Init+0x350>)
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	3301      	adds	r3, #1
 8002332:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	fa22 f303 	lsr.w	r3, r2, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	f47f ae78 	bne.w	8002034 <HAL_GPIO_Init+0x10>
  }
}
 8002344:	bf00      	nop
 8002346:	bf00      	nop
 8002348:	371c      	adds	r7, #28
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	40021000 	.word	0x40021000
 8002358:	40010000 	.word	0x40010000
 800235c:	48000400 	.word	0x48000400
 8002360:	48000800 	.word	0x48000800
 8002364:	48000c00 	.word	0x48000c00
 8002368:	48001000 	.word	0x48001000
 800236c:	48001400 	.word	0x48001400
 8002370:	48001800 	.word	0x48001800
 8002374:	40010400 	.word	0x40010400

08002378 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	460b      	mov	r3, r1
 8002382:	807b      	strh	r3, [r7, #2]
 8002384:	4613      	mov	r3, r2
 8002386:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002388:	787b      	ldrb	r3, [r7, #1]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800238e:	887a      	ldrh	r2, [r7, #2]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002394:	e002      	b.n	800239c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002396:	887a      	ldrh	r2, [r7, #2]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80023ac:	4b04      	ldr	r3, [pc, #16]	; (80023c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	40007000 	.word	0x40007000

080023c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023d2:	d130      	bne.n	8002436 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80023d4:	4b23      	ldr	r3, [pc, #140]	; (8002464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023e0:	d038      	beq.n	8002454 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023e2:	4b20      	ldr	r3, [pc, #128]	; (8002464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023ea:	4a1e      	ldr	r2, [pc, #120]	; (8002464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023f0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023f2:	4b1d      	ldr	r3, [pc, #116]	; (8002468 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2232      	movs	r2, #50	; 0x32
 80023f8:	fb02 f303 	mul.w	r3, r2, r3
 80023fc:	4a1b      	ldr	r2, [pc, #108]	; (800246c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80023fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002402:	0c9b      	lsrs	r3, r3, #18
 8002404:	3301      	adds	r3, #1
 8002406:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002408:	e002      	b.n	8002410 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	3b01      	subs	r3, #1
 800240e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002410:	4b14      	ldr	r3, [pc, #80]	; (8002464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002418:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800241c:	d102      	bne.n	8002424 <HAL_PWREx_ControlVoltageScaling+0x60>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1f2      	bne.n	800240a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002424:	4b0f      	ldr	r3, [pc, #60]	; (8002464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002426:	695b      	ldr	r3, [r3, #20]
 8002428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800242c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002430:	d110      	bne.n	8002454 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e00f      	b.n	8002456 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002436:	4b0b      	ldr	r3, [pc, #44]	; (8002464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800243e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002442:	d007      	beq.n	8002454 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002444:	4b07      	ldr	r3, [pc, #28]	; (8002464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800244c:	4a05      	ldr	r2, [pc, #20]	; (8002464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800244e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002452:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3714      	adds	r7, #20
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	40007000 	.word	0x40007000
 8002468:	20000068 	.word	0x20000068
 800246c:	431bde83 	.word	0x431bde83

08002470 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b088      	sub	sp, #32
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e3ca      	b.n	8002c18 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002482:	4b97      	ldr	r3, [pc, #604]	; (80026e0 <HAL_RCC_OscConfig+0x270>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 030c 	and.w	r3, r3, #12
 800248a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800248c:	4b94      	ldr	r3, [pc, #592]	; (80026e0 <HAL_RCC_OscConfig+0x270>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	f003 0303 	and.w	r3, r3, #3
 8002494:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0310 	and.w	r3, r3, #16
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f000 80e4 	beq.w	800266c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d007      	beq.n	80024ba <HAL_RCC_OscConfig+0x4a>
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	2b0c      	cmp	r3, #12
 80024ae:	f040 808b 	bne.w	80025c8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	f040 8087 	bne.w	80025c8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024ba:	4b89      	ldr	r3, [pc, #548]	; (80026e0 <HAL_RCC_OscConfig+0x270>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d005      	beq.n	80024d2 <HAL_RCC_OscConfig+0x62>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e3a2      	b.n	8002c18 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a1a      	ldr	r2, [r3, #32]
 80024d6:	4b82      	ldr	r3, [pc, #520]	; (80026e0 <HAL_RCC_OscConfig+0x270>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0308 	and.w	r3, r3, #8
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d004      	beq.n	80024ec <HAL_RCC_OscConfig+0x7c>
 80024e2:	4b7f      	ldr	r3, [pc, #508]	; (80026e0 <HAL_RCC_OscConfig+0x270>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024ea:	e005      	b.n	80024f8 <HAL_RCC_OscConfig+0x88>
 80024ec:	4b7c      	ldr	r3, [pc, #496]	; (80026e0 <HAL_RCC_OscConfig+0x270>)
 80024ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024f2:	091b      	lsrs	r3, r3, #4
 80024f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d223      	bcs.n	8002544 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	4618      	mov	r0, r3
 8002502:	f000 fd55 	bl	8002fb0 <RCC_SetFlashLatencyFromMSIRange>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e383      	b.n	8002c18 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002510:	4b73      	ldr	r3, [pc, #460]	; (80026e0 <HAL_RCC_OscConfig+0x270>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a72      	ldr	r2, [pc, #456]	; (80026e0 <HAL_RCC_OscConfig+0x270>)
 8002516:	f043 0308 	orr.w	r3, r3, #8
 800251a:	6013      	str	r3, [r2, #0]
 800251c:	4b70      	ldr	r3, [pc, #448]	; (80026e0 <HAL_RCC_OscConfig+0x270>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	496d      	ldr	r1, [pc, #436]	; (80026e0 <HAL_RCC_OscConfig+0x270>)
 800252a:	4313      	orrs	r3, r2
 800252c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800252e:	4b6c      	ldr	r3, [pc, #432]	; (80026e0 <HAL_RCC_OscConfig+0x270>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	021b      	lsls	r3, r3, #8
 800253c:	4968      	ldr	r1, [pc, #416]	; (80026e0 <HAL_RCC_OscConfig+0x270>)
 800253e:	4313      	orrs	r3, r2
 8002540:	604b      	str	r3, [r1, #4]
 8002542:	e025      	b.n	8002590 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002544:	4b66      	ldr	r3, [pc, #408]	; (80026e0 <HAL_RCC_OscConfig+0x270>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a65      	ldr	r2, [pc, #404]	; (80026e0 <HAL_RCC_OscConfig+0x270>)
 800254a:	f043 0308 	orr.w	r3, r3, #8
 800254e:	6013      	str	r3, [r2, #0]
 8002550:	4b63      	ldr	r3, [pc, #396]	; (80026e0 <HAL_RCC_OscConfig+0x270>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	4960      	ldr	r1, [pc, #384]	; (80026e0 <HAL_RCC_OscConfig+0x270>)
 800255e:	4313      	orrs	r3, r2
 8002560:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002562:	4b5f      	ldr	r3, [pc, #380]	; (80026e0 <HAL_RCC_OscConfig+0x270>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	021b      	lsls	r3, r3, #8
 8002570:	495b      	ldr	r1, [pc, #364]	; (80026e0 <HAL_RCC_OscConfig+0x270>)
 8002572:	4313      	orrs	r3, r2
 8002574:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d109      	bne.n	8002590 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	4618      	mov	r0, r3
 8002582:	f000 fd15 	bl	8002fb0 <RCC_SetFlashLatencyFromMSIRange>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e343      	b.n	8002c18 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002590:	f000 fc4a 	bl	8002e28 <HAL_RCC_GetSysClockFreq>
 8002594:	4602      	mov	r2, r0
 8002596:	4b52      	ldr	r3, [pc, #328]	; (80026e0 <HAL_RCC_OscConfig+0x270>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	091b      	lsrs	r3, r3, #4
 800259c:	f003 030f 	and.w	r3, r3, #15
 80025a0:	4950      	ldr	r1, [pc, #320]	; (80026e4 <HAL_RCC_OscConfig+0x274>)
 80025a2:	5ccb      	ldrb	r3, [r1, r3]
 80025a4:	f003 031f 	and.w	r3, r3, #31
 80025a8:	fa22 f303 	lsr.w	r3, r2, r3
 80025ac:	4a4e      	ldr	r2, [pc, #312]	; (80026e8 <HAL_RCC_OscConfig+0x278>)
 80025ae:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80025b0:	4b4e      	ldr	r3, [pc, #312]	; (80026ec <HAL_RCC_OscConfig+0x27c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff fbc7 	bl	8001d48 <HAL_InitTick>
 80025ba:	4603      	mov	r3, r0
 80025bc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80025be:	7bfb      	ldrb	r3, [r7, #15]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d052      	beq.n	800266a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
 80025c6:	e327      	b.n	8002c18 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d032      	beq.n	8002636 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80025d0:	4b43      	ldr	r3, [pc, #268]	; (80026e0 <HAL_RCC_OscConfig+0x270>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a42      	ldr	r2, [pc, #264]	; (80026e0 <HAL_RCC_OscConfig+0x270>)
 80025d6:	f043 0301 	orr.w	r3, r3, #1
 80025da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025dc:	f7ff fc04 	bl	8001de8 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025e4:	f7ff fc00 	bl	8001de8 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e310      	b.n	8002c18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025f6:	4b3a      	ldr	r3, [pc, #232]	; (80026e0 <HAL_RCC_OscConfig+0x270>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0f0      	beq.n	80025e4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002602:	4b37      	ldr	r3, [pc, #220]	; (80026e0 <HAL_RCC_OscConfig+0x270>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a36      	ldr	r2, [pc, #216]	; (80026e0 <HAL_RCC_OscConfig+0x270>)
 8002608:	f043 0308 	orr.w	r3, r3, #8
 800260c:	6013      	str	r3, [r2, #0]
 800260e:	4b34      	ldr	r3, [pc, #208]	; (80026e0 <HAL_RCC_OscConfig+0x270>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	4931      	ldr	r1, [pc, #196]	; (80026e0 <HAL_RCC_OscConfig+0x270>)
 800261c:	4313      	orrs	r3, r2
 800261e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002620:	4b2f      	ldr	r3, [pc, #188]	; (80026e0 <HAL_RCC_OscConfig+0x270>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	69db      	ldr	r3, [r3, #28]
 800262c:	021b      	lsls	r3, r3, #8
 800262e:	492c      	ldr	r1, [pc, #176]	; (80026e0 <HAL_RCC_OscConfig+0x270>)
 8002630:	4313      	orrs	r3, r2
 8002632:	604b      	str	r3, [r1, #4]
 8002634:	e01a      	b.n	800266c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002636:	4b2a      	ldr	r3, [pc, #168]	; (80026e0 <HAL_RCC_OscConfig+0x270>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a29      	ldr	r2, [pc, #164]	; (80026e0 <HAL_RCC_OscConfig+0x270>)
 800263c:	f023 0301 	bic.w	r3, r3, #1
 8002640:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002642:	f7ff fbd1 	bl	8001de8 <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002648:	e008      	b.n	800265c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800264a:	f7ff fbcd 	bl	8001de8 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e2dd      	b.n	8002c18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800265c:	4b20      	ldr	r3, [pc, #128]	; (80026e0 <HAL_RCC_OscConfig+0x270>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1f0      	bne.n	800264a <HAL_RCC_OscConfig+0x1da>
 8002668:	e000      	b.n	800266c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800266a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	2b00      	cmp	r3, #0
 8002676:	d074      	beq.n	8002762 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	2b08      	cmp	r3, #8
 800267c:	d005      	beq.n	800268a <HAL_RCC_OscConfig+0x21a>
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	2b0c      	cmp	r3, #12
 8002682:	d10e      	bne.n	80026a2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	2b03      	cmp	r3, #3
 8002688:	d10b      	bne.n	80026a2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800268a:	4b15      	ldr	r3, [pc, #84]	; (80026e0 <HAL_RCC_OscConfig+0x270>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d064      	beq.n	8002760 <HAL_RCC_OscConfig+0x2f0>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d160      	bne.n	8002760 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e2ba      	b.n	8002c18 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026aa:	d106      	bne.n	80026ba <HAL_RCC_OscConfig+0x24a>
 80026ac:	4b0c      	ldr	r3, [pc, #48]	; (80026e0 <HAL_RCC_OscConfig+0x270>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a0b      	ldr	r2, [pc, #44]	; (80026e0 <HAL_RCC_OscConfig+0x270>)
 80026b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b6:	6013      	str	r3, [r2, #0]
 80026b8:	e026      	b.n	8002708 <HAL_RCC_OscConfig+0x298>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026c2:	d115      	bne.n	80026f0 <HAL_RCC_OscConfig+0x280>
 80026c4:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <HAL_RCC_OscConfig+0x270>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a05      	ldr	r2, [pc, #20]	; (80026e0 <HAL_RCC_OscConfig+0x270>)
 80026ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026ce:	6013      	str	r3, [r2, #0]
 80026d0:	4b03      	ldr	r3, [pc, #12]	; (80026e0 <HAL_RCC_OscConfig+0x270>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a02      	ldr	r2, [pc, #8]	; (80026e0 <HAL_RCC_OscConfig+0x270>)
 80026d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026da:	6013      	str	r3, [r2, #0]
 80026dc:	e014      	b.n	8002708 <HAL_RCC_OscConfig+0x298>
 80026de:	bf00      	nop
 80026e0:	40021000 	.word	0x40021000
 80026e4:	0800630c 	.word	0x0800630c
 80026e8:	20000068 	.word	0x20000068
 80026ec:	2000006c 	.word	0x2000006c
 80026f0:	4ba0      	ldr	r3, [pc, #640]	; (8002974 <HAL_RCC_OscConfig+0x504>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a9f      	ldr	r2, [pc, #636]	; (8002974 <HAL_RCC_OscConfig+0x504>)
 80026f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026fa:	6013      	str	r3, [r2, #0]
 80026fc:	4b9d      	ldr	r3, [pc, #628]	; (8002974 <HAL_RCC_OscConfig+0x504>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a9c      	ldr	r2, [pc, #624]	; (8002974 <HAL_RCC_OscConfig+0x504>)
 8002702:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002706:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d013      	beq.n	8002738 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002710:	f7ff fb6a 	bl	8001de8 <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002718:	f7ff fb66 	bl	8001de8 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b64      	cmp	r3, #100	; 0x64
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e276      	b.n	8002c18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800272a:	4b92      	ldr	r3, [pc, #584]	; (8002974 <HAL_RCC_OscConfig+0x504>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0f0      	beq.n	8002718 <HAL_RCC_OscConfig+0x2a8>
 8002736:	e014      	b.n	8002762 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002738:	f7ff fb56 	bl	8001de8 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002740:	f7ff fb52 	bl	8001de8 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b64      	cmp	r3, #100	; 0x64
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e262      	b.n	8002c18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002752:	4b88      	ldr	r3, [pc, #544]	; (8002974 <HAL_RCC_OscConfig+0x504>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1f0      	bne.n	8002740 <HAL_RCC_OscConfig+0x2d0>
 800275e:	e000      	b.n	8002762 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002760:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d060      	beq.n	8002830 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	2b04      	cmp	r3, #4
 8002772:	d005      	beq.n	8002780 <HAL_RCC_OscConfig+0x310>
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	2b0c      	cmp	r3, #12
 8002778:	d119      	bne.n	80027ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	2b02      	cmp	r3, #2
 800277e:	d116      	bne.n	80027ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002780:	4b7c      	ldr	r3, [pc, #496]	; (8002974 <HAL_RCC_OscConfig+0x504>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002788:	2b00      	cmp	r3, #0
 800278a:	d005      	beq.n	8002798 <HAL_RCC_OscConfig+0x328>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e23f      	b.n	8002c18 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002798:	4b76      	ldr	r3, [pc, #472]	; (8002974 <HAL_RCC_OscConfig+0x504>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	061b      	lsls	r3, r3, #24
 80027a6:	4973      	ldr	r1, [pc, #460]	; (8002974 <HAL_RCC_OscConfig+0x504>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027ac:	e040      	b.n	8002830 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d023      	beq.n	80027fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027b6:	4b6f      	ldr	r3, [pc, #444]	; (8002974 <HAL_RCC_OscConfig+0x504>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a6e      	ldr	r2, [pc, #440]	; (8002974 <HAL_RCC_OscConfig+0x504>)
 80027bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c2:	f7ff fb11 	bl	8001de8 <HAL_GetTick>
 80027c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027c8:	e008      	b.n	80027dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ca:	f7ff fb0d 	bl	8001de8 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e21d      	b.n	8002c18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027dc:	4b65      	ldr	r3, [pc, #404]	; (8002974 <HAL_RCC_OscConfig+0x504>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d0f0      	beq.n	80027ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e8:	4b62      	ldr	r3, [pc, #392]	; (8002974 <HAL_RCC_OscConfig+0x504>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	061b      	lsls	r3, r3, #24
 80027f6:	495f      	ldr	r1, [pc, #380]	; (8002974 <HAL_RCC_OscConfig+0x504>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	604b      	str	r3, [r1, #4]
 80027fc:	e018      	b.n	8002830 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027fe:	4b5d      	ldr	r3, [pc, #372]	; (8002974 <HAL_RCC_OscConfig+0x504>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a5c      	ldr	r2, [pc, #368]	; (8002974 <HAL_RCC_OscConfig+0x504>)
 8002804:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002808:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800280a:	f7ff faed 	bl	8001de8 <HAL_GetTick>
 800280e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002810:	e008      	b.n	8002824 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002812:	f7ff fae9 	bl	8001de8 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e1f9      	b.n	8002c18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002824:	4b53      	ldr	r3, [pc, #332]	; (8002974 <HAL_RCC_OscConfig+0x504>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1f0      	bne.n	8002812 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0308 	and.w	r3, r3, #8
 8002838:	2b00      	cmp	r3, #0
 800283a:	d03c      	beq.n	80028b6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d01c      	beq.n	800287e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002844:	4b4b      	ldr	r3, [pc, #300]	; (8002974 <HAL_RCC_OscConfig+0x504>)
 8002846:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800284a:	4a4a      	ldr	r2, [pc, #296]	; (8002974 <HAL_RCC_OscConfig+0x504>)
 800284c:	f043 0301 	orr.w	r3, r3, #1
 8002850:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002854:	f7ff fac8 	bl	8001de8 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800285c:	f7ff fac4 	bl	8001de8 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e1d4      	b.n	8002c18 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800286e:	4b41      	ldr	r3, [pc, #260]	; (8002974 <HAL_RCC_OscConfig+0x504>)
 8002870:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0ef      	beq.n	800285c <HAL_RCC_OscConfig+0x3ec>
 800287c:	e01b      	b.n	80028b6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800287e:	4b3d      	ldr	r3, [pc, #244]	; (8002974 <HAL_RCC_OscConfig+0x504>)
 8002880:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002884:	4a3b      	ldr	r2, [pc, #236]	; (8002974 <HAL_RCC_OscConfig+0x504>)
 8002886:	f023 0301 	bic.w	r3, r3, #1
 800288a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800288e:	f7ff faab 	bl	8001de8 <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002894:	e008      	b.n	80028a8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002896:	f7ff faa7 	bl	8001de8 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e1b7      	b.n	8002c18 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028a8:	4b32      	ldr	r3, [pc, #200]	; (8002974 <HAL_RCC_OscConfig+0x504>)
 80028aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1ef      	bne.n	8002896 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0304 	and.w	r3, r3, #4
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f000 80a6 	beq.w	8002a10 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028c4:	2300      	movs	r3, #0
 80028c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80028c8:	4b2a      	ldr	r3, [pc, #168]	; (8002974 <HAL_RCC_OscConfig+0x504>)
 80028ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d10d      	bne.n	80028f0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028d4:	4b27      	ldr	r3, [pc, #156]	; (8002974 <HAL_RCC_OscConfig+0x504>)
 80028d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d8:	4a26      	ldr	r2, [pc, #152]	; (8002974 <HAL_RCC_OscConfig+0x504>)
 80028da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028de:	6593      	str	r3, [r2, #88]	; 0x58
 80028e0:	4b24      	ldr	r3, [pc, #144]	; (8002974 <HAL_RCC_OscConfig+0x504>)
 80028e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ec:	2301      	movs	r3, #1
 80028ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028f0:	4b21      	ldr	r3, [pc, #132]	; (8002978 <HAL_RCC_OscConfig+0x508>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d118      	bne.n	800292e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028fc:	4b1e      	ldr	r3, [pc, #120]	; (8002978 <HAL_RCC_OscConfig+0x508>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a1d      	ldr	r2, [pc, #116]	; (8002978 <HAL_RCC_OscConfig+0x508>)
 8002902:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002906:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002908:	f7ff fa6e 	bl	8001de8 <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002910:	f7ff fa6a 	bl	8001de8 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e17a      	b.n	8002c18 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002922:	4b15      	ldr	r3, [pc, #84]	; (8002978 <HAL_RCC_OscConfig+0x508>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292a:	2b00      	cmp	r3, #0
 800292c:	d0f0      	beq.n	8002910 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d108      	bne.n	8002948 <HAL_RCC_OscConfig+0x4d8>
 8002936:	4b0f      	ldr	r3, [pc, #60]	; (8002974 <HAL_RCC_OscConfig+0x504>)
 8002938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800293c:	4a0d      	ldr	r2, [pc, #52]	; (8002974 <HAL_RCC_OscConfig+0x504>)
 800293e:	f043 0301 	orr.w	r3, r3, #1
 8002942:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002946:	e029      	b.n	800299c <HAL_RCC_OscConfig+0x52c>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	2b05      	cmp	r3, #5
 800294e:	d115      	bne.n	800297c <HAL_RCC_OscConfig+0x50c>
 8002950:	4b08      	ldr	r3, [pc, #32]	; (8002974 <HAL_RCC_OscConfig+0x504>)
 8002952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002956:	4a07      	ldr	r2, [pc, #28]	; (8002974 <HAL_RCC_OscConfig+0x504>)
 8002958:	f043 0304 	orr.w	r3, r3, #4
 800295c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002960:	4b04      	ldr	r3, [pc, #16]	; (8002974 <HAL_RCC_OscConfig+0x504>)
 8002962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002966:	4a03      	ldr	r2, [pc, #12]	; (8002974 <HAL_RCC_OscConfig+0x504>)
 8002968:	f043 0301 	orr.w	r3, r3, #1
 800296c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002970:	e014      	b.n	800299c <HAL_RCC_OscConfig+0x52c>
 8002972:	bf00      	nop
 8002974:	40021000 	.word	0x40021000
 8002978:	40007000 	.word	0x40007000
 800297c:	4b9c      	ldr	r3, [pc, #624]	; (8002bf0 <HAL_RCC_OscConfig+0x780>)
 800297e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002982:	4a9b      	ldr	r2, [pc, #620]	; (8002bf0 <HAL_RCC_OscConfig+0x780>)
 8002984:	f023 0301 	bic.w	r3, r3, #1
 8002988:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800298c:	4b98      	ldr	r3, [pc, #608]	; (8002bf0 <HAL_RCC_OscConfig+0x780>)
 800298e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002992:	4a97      	ldr	r2, [pc, #604]	; (8002bf0 <HAL_RCC_OscConfig+0x780>)
 8002994:	f023 0304 	bic.w	r3, r3, #4
 8002998:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d016      	beq.n	80029d2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a4:	f7ff fa20 	bl	8001de8 <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029aa:	e00a      	b.n	80029c2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ac:	f7ff fa1c 	bl	8001de8 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e12a      	b.n	8002c18 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029c2:	4b8b      	ldr	r3, [pc, #556]	; (8002bf0 <HAL_RCC_OscConfig+0x780>)
 80029c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0ed      	beq.n	80029ac <HAL_RCC_OscConfig+0x53c>
 80029d0:	e015      	b.n	80029fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d2:	f7ff fa09 	bl	8001de8 <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029d8:	e00a      	b.n	80029f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029da:	f7ff fa05 	bl	8001de8 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e113      	b.n	8002c18 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029f0:	4b7f      	ldr	r3, [pc, #508]	; (8002bf0 <HAL_RCC_OscConfig+0x780>)
 80029f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1ed      	bne.n	80029da <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029fe:	7ffb      	ldrb	r3, [r7, #31]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d105      	bne.n	8002a10 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a04:	4b7a      	ldr	r3, [pc, #488]	; (8002bf0 <HAL_RCC_OscConfig+0x780>)
 8002a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a08:	4a79      	ldr	r2, [pc, #484]	; (8002bf0 <HAL_RCC_OscConfig+0x780>)
 8002a0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a0e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f000 80fe 	beq.w	8002c16 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	f040 80d0 	bne.w	8002bc4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a24:	4b72      	ldr	r3, [pc, #456]	; (8002bf0 <HAL_RCC_OscConfig+0x780>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	f003 0203 	and.w	r2, r3, #3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d130      	bne.n	8002a9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a42:	3b01      	subs	r3, #1
 8002a44:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d127      	bne.n	8002a9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a54:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d11f      	bne.n	8002a9a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a64:	2a07      	cmp	r2, #7
 8002a66:	bf14      	ite	ne
 8002a68:	2201      	movne	r2, #1
 8002a6a:	2200      	moveq	r2, #0
 8002a6c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d113      	bne.n	8002a9a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7c:	085b      	lsrs	r3, r3, #1
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d109      	bne.n	8002a9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a90:	085b      	lsrs	r3, r3, #1
 8002a92:	3b01      	subs	r3, #1
 8002a94:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d06e      	beq.n	8002b78 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	2b0c      	cmp	r3, #12
 8002a9e:	d069      	beq.n	8002b74 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002aa0:	4b53      	ldr	r3, [pc, #332]	; (8002bf0 <HAL_RCC_OscConfig+0x780>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d105      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002aac:	4b50      	ldr	r3, [pc, #320]	; (8002bf0 <HAL_RCC_OscConfig+0x780>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e0ad      	b.n	8002c18 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002abc:	4b4c      	ldr	r3, [pc, #304]	; (8002bf0 <HAL_RCC_OscConfig+0x780>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a4b      	ldr	r2, [pc, #300]	; (8002bf0 <HAL_RCC_OscConfig+0x780>)
 8002ac2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ac6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ac8:	f7ff f98e 	bl	8001de8 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ad0:	f7ff f98a 	bl	8001de8 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e09a      	b.n	8002c18 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ae2:	4b43      	ldr	r3, [pc, #268]	; (8002bf0 <HAL_RCC_OscConfig+0x780>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f0      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aee:	4b40      	ldr	r3, [pc, #256]	; (8002bf0 <HAL_RCC_OscConfig+0x780>)
 8002af0:	68da      	ldr	r2, [r3, #12]
 8002af2:	4b40      	ldr	r3, [pc, #256]	; (8002bf4 <HAL_RCC_OscConfig+0x784>)
 8002af4:	4013      	ands	r3, r2
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002afe:	3a01      	subs	r2, #1
 8002b00:	0112      	lsls	r2, r2, #4
 8002b02:	4311      	orrs	r1, r2
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b08:	0212      	lsls	r2, r2, #8
 8002b0a:	4311      	orrs	r1, r2
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b10:	0852      	lsrs	r2, r2, #1
 8002b12:	3a01      	subs	r2, #1
 8002b14:	0552      	lsls	r2, r2, #21
 8002b16:	4311      	orrs	r1, r2
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b1c:	0852      	lsrs	r2, r2, #1
 8002b1e:	3a01      	subs	r2, #1
 8002b20:	0652      	lsls	r2, r2, #25
 8002b22:	4311      	orrs	r1, r2
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b28:	0912      	lsrs	r2, r2, #4
 8002b2a:	0452      	lsls	r2, r2, #17
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	4930      	ldr	r1, [pc, #192]	; (8002bf0 <HAL_RCC_OscConfig+0x780>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b34:	4b2e      	ldr	r3, [pc, #184]	; (8002bf0 <HAL_RCC_OscConfig+0x780>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a2d      	ldr	r2, [pc, #180]	; (8002bf0 <HAL_RCC_OscConfig+0x780>)
 8002b3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b3e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b40:	4b2b      	ldr	r3, [pc, #172]	; (8002bf0 <HAL_RCC_OscConfig+0x780>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	4a2a      	ldr	r2, [pc, #168]	; (8002bf0 <HAL_RCC_OscConfig+0x780>)
 8002b46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b4a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b4c:	f7ff f94c 	bl	8001de8 <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b54:	f7ff f948 	bl	8001de8 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e058      	b.n	8002c18 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b66:	4b22      	ldr	r3, [pc, #136]	; (8002bf0 <HAL_RCC_OscConfig+0x780>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0f0      	beq.n	8002b54 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b72:	e050      	b.n	8002c16 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e04f      	b.n	8002c18 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b78:	4b1d      	ldr	r3, [pc, #116]	; (8002bf0 <HAL_RCC_OscConfig+0x780>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d148      	bne.n	8002c16 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b84:	4b1a      	ldr	r3, [pc, #104]	; (8002bf0 <HAL_RCC_OscConfig+0x780>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a19      	ldr	r2, [pc, #100]	; (8002bf0 <HAL_RCC_OscConfig+0x780>)
 8002b8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b8e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b90:	4b17      	ldr	r3, [pc, #92]	; (8002bf0 <HAL_RCC_OscConfig+0x780>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	4a16      	ldr	r2, [pc, #88]	; (8002bf0 <HAL_RCC_OscConfig+0x780>)
 8002b96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b9a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b9c:	f7ff f924 	bl	8001de8 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba4:	f7ff f920 	bl	8001de8 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e030      	b.n	8002c18 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bb6:	4b0e      	ldr	r3, [pc, #56]	; (8002bf0 <HAL_RCC_OscConfig+0x780>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d0f0      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x734>
 8002bc2:	e028      	b.n	8002c16 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	2b0c      	cmp	r3, #12
 8002bc8:	d023      	beq.n	8002c12 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bca:	4b09      	ldr	r3, [pc, #36]	; (8002bf0 <HAL_RCC_OscConfig+0x780>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a08      	ldr	r2, [pc, #32]	; (8002bf0 <HAL_RCC_OscConfig+0x780>)
 8002bd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd6:	f7ff f907 	bl	8001de8 <HAL_GetTick>
 8002bda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bdc:	e00c      	b.n	8002bf8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bde:	f7ff f903 	bl	8001de8 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d905      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e013      	b.n	8002c18 <HAL_RCC_OscConfig+0x7a8>
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bf8:	4b09      	ldr	r3, [pc, #36]	; (8002c20 <HAL_RCC_OscConfig+0x7b0>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1ec      	bne.n	8002bde <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c04:	4b06      	ldr	r3, [pc, #24]	; (8002c20 <HAL_RCC_OscConfig+0x7b0>)
 8002c06:	68da      	ldr	r2, [r3, #12]
 8002c08:	4905      	ldr	r1, [pc, #20]	; (8002c20 <HAL_RCC_OscConfig+0x7b0>)
 8002c0a:	4b06      	ldr	r3, [pc, #24]	; (8002c24 <HAL_RCC_OscConfig+0x7b4>)
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	60cb      	str	r3, [r1, #12]
 8002c10:	e001      	b.n	8002c16 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e000      	b.n	8002c18 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3720      	adds	r7, #32
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	40021000 	.word	0x40021000
 8002c24:	feeefffc 	.word	0xfeeefffc

08002c28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d101      	bne.n	8002c3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e0e7      	b.n	8002e0c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c3c:	4b75      	ldr	r3, [pc, #468]	; (8002e14 <HAL_RCC_ClockConfig+0x1ec>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0307 	and.w	r3, r3, #7
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d910      	bls.n	8002c6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c4a:	4b72      	ldr	r3, [pc, #456]	; (8002e14 <HAL_RCC_ClockConfig+0x1ec>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f023 0207 	bic.w	r2, r3, #7
 8002c52:	4970      	ldr	r1, [pc, #448]	; (8002e14 <HAL_RCC_ClockConfig+0x1ec>)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c5a:	4b6e      	ldr	r3, [pc, #440]	; (8002e14 <HAL_RCC_ClockConfig+0x1ec>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d001      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e0cf      	b.n	8002e0c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d010      	beq.n	8002c9a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	4b66      	ldr	r3, [pc, #408]	; (8002e18 <HAL_RCC_ClockConfig+0x1f0>)
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d908      	bls.n	8002c9a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c88:	4b63      	ldr	r3, [pc, #396]	; (8002e18 <HAL_RCC_ClockConfig+0x1f0>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	4960      	ldr	r1, [pc, #384]	; (8002e18 <HAL_RCC_ClockConfig+0x1f0>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d04c      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2b03      	cmp	r3, #3
 8002cac:	d107      	bne.n	8002cbe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cae:	4b5a      	ldr	r3, [pc, #360]	; (8002e18 <HAL_RCC_ClockConfig+0x1f0>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d121      	bne.n	8002cfe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e0a6      	b.n	8002e0c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d107      	bne.n	8002cd6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cc6:	4b54      	ldr	r3, [pc, #336]	; (8002e18 <HAL_RCC_ClockConfig+0x1f0>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d115      	bne.n	8002cfe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e09a      	b.n	8002e0c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d107      	bne.n	8002cee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cde:	4b4e      	ldr	r3, [pc, #312]	; (8002e18 <HAL_RCC_ClockConfig+0x1f0>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d109      	bne.n	8002cfe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e08e      	b.n	8002e0c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cee:	4b4a      	ldr	r3, [pc, #296]	; (8002e18 <HAL_RCC_ClockConfig+0x1f0>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e086      	b.n	8002e0c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cfe:	4b46      	ldr	r3, [pc, #280]	; (8002e18 <HAL_RCC_ClockConfig+0x1f0>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f023 0203 	bic.w	r2, r3, #3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	4943      	ldr	r1, [pc, #268]	; (8002e18 <HAL_RCC_ClockConfig+0x1f0>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d10:	f7ff f86a 	bl	8001de8 <HAL_GetTick>
 8002d14:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d16:	e00a      	b.n	8002d2e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d18:	f7ff f866 	bl	8001de8 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e06e      	b.n	8002e0c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d2e:	4b3a      	ldr	r3, [pc, #232]	; (8002e18 <HAL_RCC_ClockConfig+0x1f0>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 020c 	and.w	r2, r3, #12
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d1eb      	bne.n	8002d18 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d010      	beq.n	8002d6e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	4b31      	ldr	r3, [pc, #196]	; (8002e18 <HAL_RCC_ClockConfig+0x1f0>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d208      	bcs.n	8002d6e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d5c:	4b2e      	ldr	r3, [pc, #184]	; (8002e18 <HAL_RCC_ClockConfig+0x1f0>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	492b      	ldr	r1, [pc, #172]	; (8002e18 <HAL_RCC_ClockConfig+0x1f0>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d6e:	4b29      	ldr	r3, [pc, #164]	; (8002e14 <HAL_RCC_ClockConfig+0x1ec>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0307 	and.w	r3, r3, #7
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d210      	bcs.n	8002d9e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7c:	4b25      	ldr	r3, [pc, #148]	; (8002e14 <HAL_RCC_ClockConfig+0x1ec>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f023 0207 	bic.w	r2, r3, #7
 8002d84:	4923      	ldr	r1, [pc, #140]	; (8002e14 <HAL_RCC_ClockConfig+0x1ec>)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d8c:	4b21      	ldr	r3, [pc, #132]	; (8002e14 <HAL_RCC_ClockConfig+0x1ec>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0307 	and.w	r3, r3, #7
 8002d94:	683a      	ldr	r2, [r7, #0]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d001      	beq.n	8002d9e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e036      	b.n	8002e0c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0304 	and.w	r3, r3, #4
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d008      	beq.n	8002dbc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002daa:	4b1b      	ldr	r3, [pc, #108]	; (8002e18 <HAL_RCC_ClockConfig+0x1f0>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	4918      	ldr	r1, [pc, #96]	; (8002e18 <HAL_RCC_ClockConfig+0x1f0>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0308 	and.w	r3, r3, #8
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d009      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dc8:	4b13      	ldr	r3, [pc, #76]	; (8002e18 <HAL_RCC_ClockConfig+0x1f0>)
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	4910      	ldr	r1, [pc, #64]	; (8002e18 <HAL_RCC_ClockConfig+0x1f0>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ddc:	f000 f824 	bl	8002e28 <HAL_RCC_GetSysClockFreq>
 8002de0:	4602      	mov	r2, r0
 8002de2:	4b0d      	ldr	r3, [pc, #52]	; (8002e18 <HAL_RCC_ClockConfig+0x1f0>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	091b      	lsrs	r3, r3, #4
 8002de8:	f003 030f 	and.w	r3, r3, #15
 8002dec:	490b      	ldr	r1, [pc, #44]	; (8002e1c <HAL_RCC_ClockConfig+0x1f4>)
 8002dee:	5ccb      	ldrb	r3, [r1, r3]
 8002df0:	f003 031f 	and.w	r3, r3, #31
 8002df4:	fa22 f303 	lsr.w	r3, r2, r3
 8002df8:	4a09      	ldr	r2, [pc, #36]	; (8002e20 <HAL_RCC_ClockConfig+0x1f8>)
 8002dfa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002dfc:	4b09      	ldr	r3, [pc, #36]	; (8002e24 <HAL_RCC_ClockConfig+0x1fc>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7fe ffa1 	bl	8001d48 <HAL_InitTick>
 8002e06:	4603      	mov	r3, r0
 8002e08:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e0a:	7afb      	ldrb	r3, [r7, #11]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40022000 	.word	0x40022000
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	0800630c 	.word	0x0800630c
 8002e20:	20000068 	.word	0x20000068
 8002e24:	2000006c 	.word	0x2000006c

08002e28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b089      	sub	sp, #36	; 0x24
 8002e2c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	61fb      	str	r3, [r7, #28]
 8002e32:	2300      	movs	r3, #0
 8002e34:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e36:	4b3e      	ldr	r3, [pc, #248]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f003 030c 	and.w	r3, r3, #12
 8002e3e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e40:	4b3b      	ldr	r3, [pc, #236]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	f003 0303 	and.w	r3, r3, #3
 8002e48:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d005      	beq.n	8002e5c <HAL_RCC_GetSysClockFreq+0x34>
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	2b0c      	cmp	r3, #12
 8002e54:	d121      	bne.n	8002e9a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d11e      	bne.n	8002e9a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e5c:	4b34      	ldr	r3, [pc, #208]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0308 	and.w	r3, r3, #8
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d107      	bne.n	8002e78 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e68:	4b31      	ldr	r3, [pc, #196]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e6e:	0a1b      	lsrs	r3, r3, #8
 8002e70:	f003 030f 	and.w	r3, r3, #15
 8002e74:	61fb      	str	r3, [r7, #28]
 8002e76:	e005      	b.n	8002e84 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e78:	4b2d      	ldr	r3, [pc, #180]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	091b      	lsrs	r3, r3, #4
 8002e7e:	f003 030f 	and.w	r3, r3, #15
 8002e82:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e84:	4a2b      	ldr	r2, [pc, #172]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e8c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10d      	bne.n	8002eb0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e98:	e00a      	b.n	8002eb0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	2b04      	cmp	r3, #4
 8002e9e:	d102      	bne.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ea0:	4b25      	ldr	r3, [pc, #148]	; (8002f38 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ea2:	61bb      	str	r3, [r7, #24]
 8002ea4:	e004      	b.n	8002eb0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	2b08      	cmp	r3, #8
 8002eaa:	d101      	bne.n	8002eb0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002eac:	4b23      	ldr	r3, [pc, #140]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x114>)
 8002eae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	2b0c      	cmp	r3, #12
 8002eb4:	d134      	bne.n	8002f20 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002eb6:	4b1e      	ldr	r3, [pc, #120]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	f003 0303 	and.w	r3, r3, #3
 8002ebe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d003      	beq.n	8002ece <HAL_RCC_GetSysClockFreq+0xa6>
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	2b03      	cmp	r3, #3
 8002eca:	d003      	beq.n	8002ed4 <HAL_RCC_GetSysClockFreq+0xac>
 8002ecc:	e005      	b.n	8002eda <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002ece:	4b1a      	ldr	r3, [pc, #104]	; (8002f38 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ed0:	617b      	str	r3, [r7, #20]
      break;
 8002ed2:	e005      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ed4:	4b19      	ldr	r3, [pc, #100]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x114>)
 8002ed6:	617b      	str	r3, [r7, #20]
      break;
 8002ed8:	e002      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	617b      	str	r3, [r7, #20]
      break;
 8002ede:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ee0:	4b13      	ldr	r3, [pc, #76]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	091b      	lsrs	r3, r3, #4
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	3301      	adds	r3, #1
 8002eec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002eee:	4b10      	ldr	r3, [pc, #64]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	0a1b      	lsrs	r3, r3, #8
 8002ef4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	fb03 f202 	mul.w	r2, r3, r2
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f04:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f06:	4b0a      	ldr	r3, [pc, #40]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	0e5b      	lsrs	r3, r3, #25
 8002f0c:	f003 0303 	and.w	r3, r3, #3
 8002f10:	3301      	adds	r3, #1
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f20:	69bb      	ldr	r3, [r7, #24]
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3724      	adds	r7, #36	; 0x24
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	40021000 	.word	0x40021000
 8002f34:	08006324 	.word	0x08006324
 8002f38:	00f42400 	.word	0x00f42400
 8002f3c:	007a1200 	.word	0x007a1200

08002f40 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f44:	4b03      	ldr	r3, [pc, #12]	; (8002f54 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f46:	681b      	ldr	r3, [r3, #0]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	20000068 	.word	0x20000068

08002f58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f5c:	f7ff fff0 	bl	8002f40 <HAL_RCC_GetHCLKFreq>
 8002f60:	4602      	mov	r2, r0
 8002f62:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	0a1b      	lsrs	r3, r3, #8
 8002f68:	f003 0307 	and.w	r3, r3, #7
 8002f6c:	4904      	ldr	r1, [pc, #16]	; (8002f80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f6e:	5ccb      	ldrb	r3, [r1, r3]
 8002f70:	f003 031f 	and.w	r3, r3, #31
 8002f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	0800631c 	.word	0x0800631c

08002f84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002f88:	f7ff ffda 	bl	8002f40 <HAL_RCC_GetHCLKFreq>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	0adb      	lsrs	r3, r3, #11
 8002f94:	f003 0307 	and.w	r3, r3, #7
 8002f98:	4904      	ldr	r1, [pc, #16]	; (8002fac <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f9a:	5ccb      	ldrb	r3, [r1, r3]
 8002f9c:	f003 031f 	and.w	r3, r3, #31
 8002fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	0800631c 	.word	0x0800631c

08002fb0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002fb8:	2300      	movs	r3, #0
 8002fba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002fbc:	4b2a      	ldr	r3, [pc, #168]	; (8003068 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d003      	beq.n	8002fd0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002fc8:	f7ff f9ee 	bl	80023a8 <HAL_PWREx_GetVoltageRange>
 8002fcc:	6178      	str	r0, [r7, #20]
 8002fce:	e014      	b.n	8002ffa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fd0:	4b25      	ldr	r3, [pc, #148]	; (8003068 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd4:	4a24      	ldr	r2, [pc, #144]	; (8003068 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fda:	6593      	str	r3, [r2, #88]	; 0x58
 8002fdc:	4b22      	ldr	r3, [pc, #136]	; (8003068 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe4:	60fb      	str	r3, [r7, #12]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002fe8:	f7ff f9de 	bl	80023a8 <HAL_PWREx_GetVoltageRange>
 8002fec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002fee:	4b1e      	ldr	r3, [pc, #120]	; (8003068 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff2:	4a1d      	ldr	r2, [pc, #116]	; (8003068 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ff4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ff8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003000:	d10b      	bne.n	800301a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b80      	cmp	r3, #128	; 0x80
 8003006:	d919      	bls.n	800303c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2ba0      	cmp	r3, #160	; 0xa0
 800300c:	d902      	bls.n	8003014 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800300e:	2302      	movs	r3, #2
 8003010:	613b      	str	r3, [r7, #16]
 8003012:	e013      	b.n	800303c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003014:	2301      	movs	r3, #1
 8003016:	613b      	str	r3, [r7, #16]
 8003018:	e010      	b.n	800303c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2b80      	cmp	r3, #128	; 0x80
 800301e:	d902      	bls.n	8003026 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003020:	2303      	movs	r3, #3
 8003022:	613b      	str	r3, [r7, #16]
 8003024:	e00a      	b.n	800303c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2b80      	cmp	r3, #128	; 0x80
 800302a:	d102      	bne.n	8003032 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800302c:	2302      	movs	r3, #2
 800302e:	613b      	str	r3, [r7, #16]
 8003030:	e004      	b.n	800303c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2b70      	cmp	r3, #112	; 0x70
 8003036:	d101      	bne.n	800303c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003038:	2301      	movs	r3, #1
 800303a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800303c:	4b0b      	ldr	r3, [pc, #44]	; (800306c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f023 0207 	bic.w	r2, r3, #7
 8003044:	4909      	ldr	r1, [pc, #36]	; (800306c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	4313      	orrs	r3, r2
 800304a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800304c:	4b07      	ldr	r3, [pc, #28]	; (800306c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	429a      	cmp	r2, r3
 8003058:	d001      	beq.n	800305e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e000      	b.n	8003060 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3718      	adds	r7, #24
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40021000 	.word	0x40021000
 800306c:	40022000 	.word	0x40022000

08003070 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003078:	2300      	movs	r3, #0
 800307a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800307c:	2300      	movs	r3, #0
 800307e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003088:	2b00      	cmp	r3, #0
 800308a:	d041      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003090:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003094:	d02a      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003096:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800309a:	d824      	bhi.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800309c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030a0:	d008      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80030a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030a6:	d81e      	bhi.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00a      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80030ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030b0:	d010      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80030b2:	e018      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030b4:	4b86      	ldr	r3, [pc, #536]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	4a85      	ldr	r2, [pc, #532]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030be:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030c0:	e015      	b.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	3304      	adds	r3, #4
 80030c6:	2100      	movs	r1, #0
 80030c8:	4618      	mov	r0, r3
 80030ca:	f000 fabb 	bl	8003644 <RCCEx_PLLSAI1_Config>
 80030ce:	4603      	mov	r3, r0
 80030d0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030d2:	e00c      	b.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	3320      	adds	r3, #32
 80030d8:	2100      	movs	r1, #0
 80030da:	4618      	mov	r0, r3
 80030dc:	f000 fba6 	bl	800382c <RCCEx_PLLSAI2_Config>
 80030e0:	4603      	mov	r3, r0
 80030e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030e4:	e003      	b.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	74fb      	strb	r3, [r7, #19]
      break;
 80030ea:	e000      	b.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80030ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030ee:	7cfb      	ldrb	r3, [r7, #19]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d10b      	bne.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030f4:	4b76      	ldr	r3, [pc, #472]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003102:	4973      	ldr	r1, [pc, #460]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003104:	4313      	orrs	r3, r2
 8003106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800310a:	e001      	b.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800310c:	7cfb      	ldrb	r3, [r7, #19]
 800310e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d041      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003120:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003124:	d02a      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003126:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800312a:	d824      	bhi.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800312c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003130:	d008      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003132:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003136:	d81e      	bhi.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00a      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800313c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003140:	d010      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003142:	e018      	b.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003144:	4b62      	ldr	r3, [pc, #392]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	4a61      	ldr	r2, [pc, #388]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800314a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800314e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003150:	e015      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	3304      	adds	r3, #4
 8003156:	2100      	movs	r1, #0
 8003158:	4618      	mov	r0, r3
 800315a:	f000 fa73 	bl	8003644 <RCCEx_PLLSAI1_Config>
 800315e:	4603      	mov	r3, r0
 8003160:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003162:	e00c      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3320      	adds	r3, #32
 8003168:	2100      	movs	r1, #0
 800316a:	4618      	mov	r0, r3
 800316c:	f000 fb5e 	bl	800382c <RCCEx_PLLSAI2_Config>
 8003170:	4603      	mov	r3, r0
 8003172:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003174:	e003      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	74fb      	strb	r3, [r7, #19]
      break;
 800317a:	e000      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800317c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800317e:	7cfb      	ldrb	r3, [r7, #19]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d10b      	bne.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003184:	4b52      	ldr	r3, [pc, #328]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003192:	494f      	ldr	r1, [pc, #316]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003194:	4313      	orrs	r3, r2
 8003196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800319a:	e001      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800319c:	7cfb      	ldrb	r3, [r7, #19]
 800319e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f000 80a0 	beq.w	80032ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031ae:	2300      	movs	r3, #0
 80031b0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031b2:	4b47      	ldr	r3, [pc, #284]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80031be:	2301      	movs	r3, #1
 80031c0:	e000      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80031c2:	2300      	movs	r3, #0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00d      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031c8:	4b41      	ldr	r3, [pc, #260]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031cc:	4a40      	ldr	r2, [pc, #256]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031d2:	6593      	str	r3, [r2, #88]	; 0x58
 80031d4:	4b3e      	ldr	r3, [pc, #248]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031dc:	60bb      	str	r3, [r7, #8]
 80031de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031e0:	2301      	movs	r3, #1
 80031e2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031e4:	4b3b      	ldr	r3, [pc, #236]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a3a      	ldr	r2, [pc, #232]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031f0:	f7fe fdfa 	bl	8001de8 <HAL_GetTick>
 80031f4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031f6:	e009      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031f8:	f7fe fdf6 	bl	8001de8 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d902      	bls.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	74fb      	strb	r3, [r7, #19]
        break;
 800320a:	e005      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800320c:	4b31      	ldr	r3, [pc, #196]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003214:	2b00      	cmp	r3, #0
 8003216:	d0ef      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003218:	7cfb      	ldrb	r3, [r7, #19]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d15c      	bne.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800321e:	4b2c      	ldr	r3, [pc, #176]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003224:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003228:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d01f      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	429a      	cmp	r2, r3
 800323a:	d019      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800323c:	4b24      	ldr	r3, [pc, #144]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800323e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003246:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003248:	4b21      	ldr	r3, [pc, #132]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800324a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800324e:	4a20      	ldr	r2, [pc, #128]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003254:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003258:	4b1d      	ldr	r3, [pc, #116]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800325a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800325e:	4a1c      	ldr	r2, [pc, #112]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003260:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003264:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003268:	4a19      	ldr	r2, [pc, #100]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d016      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327a:	f7fe fdb5 	bl	8001de8 <HAL_GetTick>
 800327e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003280:	e00b      	b.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003282:	f7fe fdb1 	bl	8001de8 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003290:	4293      	cmp	r3, r2
 8003292:	d902      	bls.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	74fb      	strb	r3, [r7, #19]
            break;
 8003298:	e006      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800329a:	4b0d      	ldr	r3, [pc, #52]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800329c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0ec      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80032a8:	7cfb      	ldrb	r3, [r7, #19]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10c      	bne.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032ae:	4b08      	ldr	r3, [pc, #32]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032be:	4904      	ldr	r1, [pc, #16]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80032c6:	e009      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032c8:	7cfb      	ldrb	r3, [r7, #19]
 80032ca:	74bb      	strb	r3, [r7, #18]
 80032cc:	e006      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80032ce:	bf00      	nop
 80032d0:	40021000 	.word	0x40021000
 80032d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032d8:	7cfb      	ldrb	r3, [r7, #19]
 80032da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032dc:	7c7b      	ldrb	r3, [r7, #17]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d105      	bne.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032e2:	4b9e      	ldr	r3, [pc, #632]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e6:	4a9d      	ldr	r2, [pc, #628]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032ec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00a      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032fa:	4b98      	ldr	r3, [pc, #608]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003300:	f023 0203 	bic.w	r2, r3, #3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003308:	4994      	ldr	r1, [pc, #592]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800330a:	4313      	orrs	r3, r2
 800330c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00a      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800331c:	4b8f      	ldr	r3, [pc, #572]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800331e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003322:	f023 020c 	bic.w	r2, r3, #12
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800332a:	498c      	ldr	r1, [pc, #560]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800332c:	4313      	orrs	r3, r2
 800332e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0304 	and.w	r3, r3, #4
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00a      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800333e:	4b87      	ldr	r3, [pc, #540]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003344:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334c:	4983      	ldr	r1, [pc, #524]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800334e:	4313      	orrs	r3, r2
 8003350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0308 	and.w	r3, r3, #8
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00a      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003360:	4b7e      	ldr	r3, [pc, #504]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003366:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336e:	497b      	ldr	r1, [pc, #492]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003370:	4313      	orrs	r3, r2
 8003372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0310 	and.w	r3, r3, #16
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00a      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003382:	4b76      	ldr	r3, [pc, #472]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003388:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003390:	4972      	ldr	r1, [pc, #456]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003392:	4313      	orrs	r3, r2
 8003394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0320 	and.w	r3, r3, #32
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00a      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033a4:	4b6d      	ldr	r3, [pc, #436]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b2:	496a      	ldr	r1, [pc, #424]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00a      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033c6:	4b65      	ldr	r3, [pc, #404]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d4:	4961      	ldr	r1, [pc, #388]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00a      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033e8:	4b5c      	ldr	r3, [pc, #368]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033f6:	4959      	ldr	r1, [pc, #356]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00a      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800340a:	4b54      	ldr	r3, [pc, #336]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800340c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003410:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003418:	4950      	ldr	r1, [pc, #320]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800341a:	4313      	orrs	r3, r2
 800341c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00a      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800342c:	4b4b      	ldr	r3, [pc, #300]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800342e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003432:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343a:	4948      	ldr	r1, [pc, #288]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800343c:	4313      	orrs	r3, r2
 800343e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00a      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800344e:	4b43      	ldr	r3, [pc, #268]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003454:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345c:	493f      	ldr	r1, [pc, #252]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800345e:	4313      	orrs	r3, r2
 8003460:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d028      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003470:	4b3a      	ldr	r3, [pc, #232]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003476:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800347e:	4937      	ldr	r1, [pc, #220]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003480:	4313      	orrs	r3, r2
 8003482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800348a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800348e:	d106      	bne.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003490:	4b32      	ldr	r3, [pc, #200]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	4a31      	ldr	r2, [pc, #196]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003496:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800349a:	60d3      	str	r3, [r2, #12]
 800349c:	e011      	b.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034a6:	d10c      	bne.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	3304      	adds	r3, #4
 80034ac:	2101      	movs	r1, #1
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 f8c8 	bl	8003644 <RCCEx_PLLSAI1_Config>
 80034b4:	4603      	mov	r3, r0
 80034b6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80034b8:	7cfb      	ldrb	r3, [r7, #19]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80034be:	7cfb      	ldrb	r3, [r7, #19]
 80034c0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d028      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80034ce:	4b23      	ldr	r3, [pc, #140]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034dc:	491f      	ldr	r1, [pc, #124]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034ec:	d106      	bne.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034ee:	4b1b      	ldr	r3, [pc, #108]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	4a1a      	ldr	r2, [pc, #104]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034f8:	60d3      	str	r3, [r2, #12]
 80034fa:	e011      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003500:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003504:	d10c      	bne.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	3304      	adds	r3, #4
 800350a:	2101      	movs	r1, #1
 800350c:	4618      	mov	r0, r3
 800350e:	f000 f899 	bl	8003644 <RCCEx_PLLSAI1_Config>
 8003512:	4603      	mov	r3, r0
 8003514:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003516:	7cfb      	ldrb	r3, [r7, #19]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d001      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800351c:	7cfb      	ldrb	r3, [r7, #19]
 800351e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d02b      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800352c:	4b0b      	ldr	r3, [pc, #44]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800352e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003532:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800353a:	4908      	ldr	r1, [pc, #32]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800353c:	4313      	orrs	r3, r2
 800353e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003546:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800354a:	d109      	bne.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800354c:	4b03      	ldr	r3, [pc, #12]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	4a02      	ldr	r2, [pc, #8]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003552:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003556:	60d3      	str	r3, [r2, #12]
 8003558:	e014      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800355a:	bf00      	nop
 800355c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003564:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003568:	d10c      	bne.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	3304      	adds	r3, #4
 800356e:	2101      	movs	r1, #1
 8003570:	4618      	mov	r0, r3
 8003572:	f000 f867 	bl	8003644 <RCCEx_PLLSAI1_Config>
 8003576:	4603      	mov	r3, r0
 8003578:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800357a:	7cfb      	ldrb	r3, [r7, #19]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d001      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003580:	7cfb      	ldrb	r3, [r7, #19]
 8003582:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d02f      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003590:	4b2b      	ldr	r3, [pc, #172]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003596:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800359e:	4928      	ldr	r1, [pc, #160]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035ae:	d10d      	bne.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	3304      	adds	r3, #4
 80035b4:	2102      	movs	r1, #2
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 f844 	bl	8003644 <RCCEx_PLLSAI1_Config>
 80035bc:	4603      	mov	r3, r0
 80035be:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035c0:	7cfb      	ldrb	r3, [r7, #19]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d014      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80035c6:	7cfb      	ldrb	r3, [r7, #19]
 80035c8:	74bb      	strb	r3, [r7, #18]
 80035ca:	e011      	b.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035d4:	d10c      	bne.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	3320      	adds	r3, #32
 80035da:	2102      	movs	r1, #2
 80035dc:	4618      	mov	r0, r3
 80035de:	f000 f925 	bl	800382c <RCCEx_PLLSAI2_Config>
 80035e2:	4603      	mov	r3, r0
 80035e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035e6:	7cfb      	ldrb	r3, [r7, #19]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80035ec:	7cfb      	ldrb	r3, [r7, #19]
 80035ee:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00a      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80035fc:	4b10      	ldr	r3, [pc, #64]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003602:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800360a:	490d      	ldr	r1, [pc, #52]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800360c:	4313      	orrs	r3, r2
 800360e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00b      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800361e:	4b08      	ldr	r3, [pc, #32]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003624:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800362e:	4904      	ldr	r1, [pc, #16]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003630:	4313      	orrs	r3, r2
 8003632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003636:	7cbb      	ldrb	r3, [r7, #18]
}
 8003638:	4618      	mov	r0, r3
 800363a:	3718      	adds	r7, #24
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	40021000 	.word	0x40021000

08003644 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800364e:	2300      	movs	r3, #0
 8003650:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003652:	4b75      	ldr	r3, [pc, #468]	; (8003828 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	f003 0303 	and.w	r3, r3, #3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d018      	beq.n	8003690 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800365e:	4b72      	ldr	r3, [pc, #456]	; (8003828 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	f003 0203 	and.w	r2, r3, #3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	429a      	cmp	r2, r3
 800366c:	d10d      	bne.n	800368a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
       ||
 8003672:	2b00      	cmp	r3, #0
 8003674:	d009      	beq.n	800368a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003676:	4b6c      	ldr	r3, [pc, #432]	; (8003828 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	091b      	lsrs	r3, r3, #4
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	1c5a      	adds	r2, r3, #1
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
       ||
 8003686:	429a      	cmp	r2, r3
 8003688:	d047      	beq.n	800371a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	73fb      	strb	r3, [r7, #15]
 800368e:	e044      	b.n	800371a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2b03      	cmp	r3, #3
 8003696:	d018      	beq.n	80036ca <RCCEx_PLLSAI1_Config+0x86>
 8003698:	2b03      	cmp	r3, #3
 800369a:	d825      	bhi.n	80036e8 <RCCEx_PLLSAI1_Config+0xa4>
 800369c:	2b01      	cmp	r3, #1
 800369e:	d002      	beq.n	80036a6 <RCCEx_PLLSAI1_Config+0x62>
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d009      	beq.n	80036b8 <RCCEx_PLLSAI1_Config+0x74>
 80036a4:	e020      	b.n	80036e8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036a6:	4b60      	ldr	r3, [pc, #384]	; (8003828 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d11d      	bne.n	80036ee <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036b6:	e01a      	b.n	80036ee <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036b8:	4b5b      	ldr	r3, [pc, #364]	; (8003828 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d116      	bne.n	80036f2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036c8:	e013      	b.n	80036f2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036ca:	4b57      	ldr	r3, [pc, #348]	; (8003828 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10f      	bne.n	80036f6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036d6:	4b54      	ldr	r3, [pc, #336]	; (8003828 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d109      	bne.n	80036f6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036e6:	e006      	b.n	80036f6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	73fb      	strb	r3, [r7, #15]
      break;
 80036ec:	e004      	b.n	80036f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036ee:	bf00      	nop
 80036f0:	e002      	b.n	80036f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036f2:	bf00      	nop
 80036f4:	e000      	b.n	80036f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80036f8:	7bfb      	ldrb	r3, [r7, #15]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10d      	bne.n	800371a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80036fe:	4b4a      	ldr	r3, [pc, #296]	; (8003828 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6819      	ldr	r1, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	3b01      	subs	r3, #1
 8003710:	011b      	lsls	r3, r3, #4
 8003712:	430b      	orrs	r3, r1
 8003714:	4944      	ldr	r1, [pc, #272]	; (8003828 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003716:	4313      	orrs	r3, r2
 8003718:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800371a:	7bfb      	ldrb	r3, [r7, #15]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d17d      	bne.n	800381c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003720:	4b41      	ldr	r3, [pc, #260]	; (8003828 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a40      	ldr	r2, [pc, #256]	; (8003828 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003726:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800372a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800372c:	f7fe fb5c 	bl	8001de8 <HAL_GetTick>
 8003730:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003732:	e009      	b.n	8003748 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003734:	f7fe fb58 	bl	8001de8 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d902      	bls.n	8003748 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	73fb      	strb	r3, [r7, #15]
        break;
 8003746:	e005      	b.n	8003754 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003748:	4b37      	ldr	r3, [pc, #220]	; (8003828 <RCCEx_PLLSAI1_Config+0x1e4>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1ef      	bne.n	8003734 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003754:	7bfb      	ldrb	r3, [r7, #15]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d160      	bne.n	800381c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d111      	bne.n	8003784 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003760:	4b31      	ldr	r3, [pc, #196]	; (8003828 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003768:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	6892      	ldr	r2, [r2, #8]
 8003770:	0211      	lsls	r1, r2, #8
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	68d2      	ldr	r2, [r2, #12]
 8003776:	0912      	lsrs	r2, r2, #4
 8003778:	0452      	lsls	r2, r2, #17
 800377a:	430a      	orrs	r2, r1
 800377c:	492a      	ldr	r1, [pc, #168]	; (8003828 <RCCEx_PLLSAI1_Config+0x1e4>)
 800377e:	4313      	orrs	r3, r2
 8003780:	610b      	str	r3, [r1, #16]
 8003782:	e027      	b.n	80037d4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d112      	bne.n	80037b0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800378a:	4b27      	ldr	r3, [pc, #156]	; (8003828 <RCCEx_PLLSAI1_Config+0x1e4>)
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003792:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	6892      	ldr	r2, [r2, #8]
 800379a:	0211      	lsls	r1, r2, #8
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6912      	ldr	r2, [r2, #16]
 80037a0:	0852      	lsrs	r2, r2, #1
 80037a2:	3a01      	subs	r2, #1
 80037a4:	0552      	lsls	r2, r2, #21
 80037a6:	430a      	orrs	r2, r1
 80037a8:	491f      	ldr	r1, [pc, #124]	; (8003828 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	610b      	str	r3, [r1, #16]
 80037ae:	e011      	b.n	80037d4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037b0:	4b1d      	ldr	r3, [pc, #116]	; (8003828 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80037b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	6892      	ldr	r2, [r2, #8]
 80037c0:	0211      	lsls	r1, r2, #8
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	6952      	ldr	r2, [r2, #20]
 80037c6:	0852      	lsrs	r2, r2, #1
 80037c8:	3a01      	subs	r2, #1
 80037ca:	0652      	lsls	r2, r2, #25
 80037cc:	430a      	orrs	r2, r1
 80037ce:	4916      	ldr	r1, [pc, #88]	; (8003828 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80037d4:	4b14      	ldr	r3, [pc, #80]	; (8003828 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a13      	ldr	r2, [pc, #76]	; (8003828 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80037de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e0:	f7fe fb02 	bl	8001de8 <HAL_GetTick>
 80037e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80037e6:	e009      	b.n	80037fc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037e8:	f7fe fafe 	bl	8001de8 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d902      	bls.n	80037fc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	73fb      	strb	r3, [r7, #15]
          break;
 80037fa:	e005      	b.n	8003808 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80037fc:	4b0a      	ldr	r3, [pc, #40]	; (8003828 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d0ef      	beq.n	80037e8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003808:	7bfb      	ldrb	r3, [r7, #15]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d106      	bne.n	800381c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800380e:	4b06      	ldr	r3, [pc, #24]	; (8003828 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003810:	691a      	ldr	r2, [r3, #16]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	4904      	ldr	r1, [pc, #16]	; (8003828 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003818:	4313      	orrs	r3, r2
 800381a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800381c:	7bfb      	ldrb	r3, [r7, #15]
}
 800381e:	4618      	mov	r0, r3
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	40021000 	.word	0x40021000

0800382c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003836:	2300      	movs	r3, #0
 8003838:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800383a:	4b6a      	ldr	r3, [pc, #424]	; (80039e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	f003 0303 	and.w	r3, r3, #3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d018      	beq.n	8003878 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003846:	4b67      	ldr	r3, [pc, #412]	; (80039e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	f003 0203 	and.w	r2, r3, #3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	429a      	cmp	r2, r3
 8003854:	d10d      	bne.n	8003872 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
       ||
 800385a:	2b00      	cmp	r3, #0
 800385c:	d009      	beq.n	8003872 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800385e:	4b61      	ldr	r3, [pc, #388]	; (80039e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	091b      	lsrs	r3, r3, #4
 8003864:	f003 0307 	and.w	r3, r3, #7
 8003868:	1c5a      	adds	r2, r3, #1
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
       ||
 800386e:	429a      	cmp	r2, r3
 8003870:	d047      	beq.n	8003902 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	73fb      	strb	r3, [r7, #15]
 8003876:	e044      	b.n	8003902 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2b03      	cmp	r3, #3
 800387e:	d018      	beq.n	80038b2 <RCCEx_PLLSAI2_Config+0x86>
 8003880:	2b03      	cmp	r3, #3
 8003882:	d825      	bhi.n	80038d0 <RCCEx_PLLSAI2_Config+0xa4>
 8003884:	2b01      	cmp	r3, #1
 8003886:	d002      	beq.n	800388e <RCCEx_PLLSAI2_Config+0x62>
 8003888:	2b02      	cmp	r3, #2
 800388a:	d009      	beq.n	80038a0 <RCCEx_PLLSAI2_Config+0x74>
 800388c:	e020      	b.n	80038d0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800388e:	4b55      	ldr	r3, [pc, #340]	; (80039e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d11d      	bne.n	80038d6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800389e:	e01a      	b.n	80038d6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038a0:	4b50      	ldr	r3, [pc, #320]	; (80039e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d116      	bne.n	80038da <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038b0:	e013      	b.n	80038da <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038b2:	4b4c      	ldr	r3, [pc, #304]	; (80039e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10f      	bne.n	80038de <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038be:	4b49      	ldr	r3, [pc, #292]	; (80039e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d109      	bne.n	80038de <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038ce:	e006      	b.n	80038de <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	73fb      	strb	r3, [r7, #15]
      break;
 80038d4:	e004      	b.n	80038e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038d6:	bf00      	nop
 80038d8:	e002      	b.n	80038e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038da:	bf00      	nop
 80038dc:	e000      	b.n	80038e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038de:	bf00      	nop
    }

    if(status == HAL_OK)
 80038e0:	7bfb      	ldrb	r3, [r7, #15]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10d      	bne.n	8003902 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80038e6:	4b3f      	ldr	r3, [pc, #252]	; (80039e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6819      	ldr	r1, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	3b01      	subs	r3, #1
 80038f8:	011b      	lsls	r3, r3, #4
 80038fa:	430b      	orrs	r3, r1
 80038fc:	4939      	ldr	r1, [pc, #228]	; (80039e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003902:	7bfb      	ldrb	r3, [r7, #15]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d167      	bne.n	80039d8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003908:	4b36      	ldr	r3, [pc, #216]	; (80039e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a35      	ldr	r2, [pc, #212]	; (80039e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800390e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003912:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003914:	f7fe fa68 	bl	8001de8 <HAL_GetTick>
 8003918:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800391a:	e009      	b.n	8003930 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800391c:	f7fe fa64 	bl	8001de8 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d902      	bls.n	8003930 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	73fb      	strb	r3, [r7, #15]
        break;
 800392e:	e005      	b.n	800393c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003930:	4b2c      	ldr	r3, [pc, #176]	; (80039e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1ef      	bne.n	800391c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800393c:	7bfb      	ldrb	r3, [r7, #15]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d14a      	bne.n	80039d8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d111      	bne.n	800396c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003948:	4b26      	ldr	r3, [pc, #152]	; (80039e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800394a:	695b      	ldr	r3, [r3, #20]
 800394c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	6892      	ldr	r2, [r2, #8]
 8003958:	0211      	lsls	r1, r2, #8
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	68d2      	ldr	r2, [r2, #12]
 800395e:	0912      	lsrs	r2, r2, #4
 8003960:	0452      	lsls	r2, r2, #17
 8003962:	430a      	orrs	r2, r1
 8003964:	491f      	ldr	r1, [pc, #124]	; (80039e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003966:	4313      	orrs	r3, r2
 8003968:	614b      	str	r3, [r1, #20]
 800396a:	e011      	b.n	8003990 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800396c:	4b1d      	ldr	r3, [pc, #116]	; (80039e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003974:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	6892      	ldr	r2, [r2, #8]
 800397c:	0211      	lsls	r1, r2, #8
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	6912      	ldr	r2, [r2, #16]
 8003982:	0852      	lsrs	r2, r2, #1
 8003984:	3a01      	subs	r2, #1
 8003986:	0652      	lsls	r2, r2, #25
 8003988:	430a      	orrs	r2, r1
 800398a:	4916      	ldr	r1, [pc, #88]	; (80039e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800398c:	4313      	orrs	r3, r2
 800398e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003990:	4b14      	ldr	r3, [pc, #80]	; (80039e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a13      	ldr	r2, [pc, #76]	; (80039e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800399a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800399c:	f7fe fa24 	bl	8001de8 <HAL_GetTick>
 80039a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039a2:	e009      	b.n	80039b8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039a4:	f7fe fa20 	bl	8001de8 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d902      	bls.n	80039b8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	73fb      	strb	r3, [r7, #15]
          break;
 80039b6:	e005      	b.n	80039c4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039b8:	4b0a      	ldr	r3, [pc, #40]	; (80039e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d0ef      	beq.n	80039a4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80039c4:	7bfb      	ldrb	r3, [r7, #15]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d106      	bne.n	80039d8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80039ca:	4b06      	ldr	r3, [pc, #24]	; (80039e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039cc:	695a      	ldr	r2, [r3, #20]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	4904      	ldr	r1, [pc, #16]	; (80039e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80039d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	40021000 	.word	0x40021000

080039e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e049      	b.n	8003a8e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d106      	bne.n	8003a14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f7fd ffa4 	bl	800195c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2202      	movs	r2, #2
 8003a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	3304      	adds	r3, #4
 8003a24:	4619      	mov	r1, r3
 8003a26:	4610      	mov	r0, r2
 8003a28:	f000 fd16 	bl	8004458 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
	...

08003a98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d001      	beq.n	8003ab0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e04f      	b.n	8003b50 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68da      	ldr	r2, [r3, #12]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f042 0201 	orr.w	r2, r2, #1
 8003ac6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a23      	ldr	r2, [pc, #140]	; (8003b5c <HAL_TIM_Base_Start_IT+0xc4>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d01d      	beq.n	8003b0e <HAL_TIM_Base_Start_IT+0x76>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ada:	d018      	beq.n	8003b0e <HAL_TIM_Base_Start_IT+0x76>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a1f      	ldr	r2, [pc, #124]	; (8003b60 <HAL_TIM_Base_Start_IT+0xc8>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d013      	beq.n	8003b0e <HAL_TIM_Base_Start_IT+0x76>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a1e      	ldr	r2, [pc, #120]	; (8003b64 <HAL_TIM_Base_Start_IT+0xcc>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d00e      	beq.n	8003b0e <HAL_TIM_Base_Start_IT+0x76>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a1c      	ldr	r2, [pc, #112]	; (8003b68 <HAL_TIM_Base_Start_IT+0xd0>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d009      	beq.n	8003b0e <HAL_TIM_Base_Start_IT+0x76>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a1b      	ldr	r2, [pc, #108]	; (8003b6c <HAL_TIM_Base_Start_IT+0xd4>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d004      	beq.n	8003b0e <HAL_TIM_Base_Start_IT+0x76>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a19      	ldr	r2, [pc, #100]	; (8003b70 <HAL_TIM_Base_Start_IT+0xd8>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d115      	bne.n	8003b3a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689a      	ldr	r2, [r3, #8]
 8003b14:	4b17      	ldr	r3, [pc, #92]	; (8003b74 <HAL_TIM_Base_Start_IT+0xdc>)
 8003b16:	4013      	ands	r3, r2
 8003b18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2b06      	cmp	r3, #6
 8003b1e:	d015      	beq.n	8003b4c <HAL_TIM_Base_Start_IT+0xb4>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b26:	d011      	beq.n	8003b4c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f042 0201 	orr.w	r2, r2, #1
 8003b36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b38:	e008      	b.n	8003b4c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f042 0201 	orr.w	r2, r2, #1
 8003b48:	601a      	str	r2, [r3, #0]
 8003b4a:	e000      	b.n	8003b4e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b4c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr
 8003b5c:	40012c00 	.word	0x40012c00
 8003b60:	40000400 	.word	0x40000400
 8003b64:	40000800 	.word	0x40000800
 8003b68:	40000c00 	.word	0x40000c00
 8003b6c:	40013400 	.word	0x40013400
 8003b70:	40014000 	.word	0x40014000
 8003b74:	00010007 	.word	0x00010007

08003b78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e049      	b.n	8003c1e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d106      	bne.n	8003ba4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 f841 	bl	8003c26 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	3304      	adds	r3, #4
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	4610      	mov	r0, r2
 8003bb8:	f000 fc4e 	bl	8004458 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3708      	adds	r7, #8
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c26:	b480      	push	{r7}
 8003c28:	b083      	sub	sp, #12
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c2e:	bf00      	nop
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
	...

08003c3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d109      	bne.n	8003c60 <HAL_TIM_PWM_Start+0x24>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	bf14      	ite	ne
 8003c58:	2301      	movne	r3, #1
 8003c5a:	2300      	moveq	r3, #0
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	e03c      	b.n	8003cda <HAL_TIM_PWM_Start+0x9e>
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	2b04      	cmp	r3, #4
 8003c64:	d109      	bne.n	8003c7a <HAL_TIM_PWM_Start+0x3e>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	bf14      	ite	ne
 8003c72:	2301      	movne	r3, #1
 8003c74:	2300      	moveq	r3, #0
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	e02f      	b.n	8003cda <HAL_TIM_PWM_Start+0x9e>
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	d109      	bne.n	8003c94 <HAL_TIM_PWM_Start+0x58>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	bf14      	ite	ne
 8003c8c:	2301      	movne	r3, #1
 8003c8e:	2300      	moveq	r3, #0
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	e022      	b.n	8003cda <HAL_TIM_PWM_Start+0x9e>
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	2b0c      	cmp	r3, #12
 8003c98:	d109      	bne.n	8003cae <HAL_TIM_PWM_Start+0x72>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	bf14      	ite	ne
 8003ca6:	2301      	movne	r3, #1
 8003ca8:	2300      	moveq	r3, #0
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	e015      	b.n	8003cda <HAL_TIM_PWM_Start+0x9e>
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	2b10      	cmp	r3, #16
 8003cb2:	d109      	bne.n	8003cc8 <HAL_TIM_PWM_Start+0x8c>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	bf14      	ite	ne
 8003cc0:	2301      	movne	r3, #1
 8003cc2:	2300      	moveq	r3, #0
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	e008      	b.n	8003cda <HAL_TIM_PWM_Start+0x9e>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	bf14      	ite	ne
 8003cd4:	2301      	movne	r3, #1
 8003cd6:	2300      	moveq	r3, #0
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d001      	beq.n	8003ce2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e09c      	b.n	8003e1c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d104      	bne.n	8003cf2 <HAL_TIM_PWM_Start+0xb6>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2202      	movs	r2, #2
 8003cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cf0:	e023      	b.n	8003d3a <HAL_TIM_PWM_Start+0xfe>
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	2b04      	cmp	r3, #4
 8003cf6:	d104      	bne.n	8003d02 <HAL_TIM_PWM_Start+0xc6>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2202      	movs	r2, #2
 8003cfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d00:	e01b      	b.n	8003d3a <HAL_TIM_PWM_Start+0xfe>
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	2b08      	cmp	r3, #8
 8003d06:	d104      	bne.n	8003d12 <HAL_TIM_PWM_Start+0xd6>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d10:	e013      	b.n	8003d3a <HAL_TIM_PWM_Start+0xfe>
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	2b0c      	cmp	r3, #12
 8003d16:	d104      	bne.n	8003d22 <HAL_TIM_PWM_Start+0xe6>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d20:	e00b      	b.n	8003d3a <HAL_TIM_PWM_Start+0xfe>
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	2b10      	cmp	r3, #16
 8003d26:	d104      	bne.n	8003d32 <HAL_TIM_PWM_Start+0xf6>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d30:	e003      	b.n	8003d3a <HAL_TIM_PWM_Start+0xfe>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2202      	movs	r2, #2
 8003d36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	6839      	ldr	r1, [r7, #0]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f000 ff92 	bl	8004c6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a35      	ldr	r2, [pc, #212]	; (8003e24 <HAL_TIM_PWM_Start+0x1e8>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d013      	beq.n	8003d7a <HAL_TIM_PWM_Start+0x13e>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a34      	ldr	r2, [pc, #208]	; (8003e28 <HAL_TIM_PWM_Start+0x1ec>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d00e      	beq.n	8003d7a <HAL_TIM_PWM_Start+0x13e>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a32      	ldr	r2, [pc, #200]	; (8003e2c <HAL_TIM_PWM_Start+0x1f0>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d009      	beq.n	8003d7a <HAL_TIM_PWM_Start+0x13e>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a31      	ldr	r2, [pc, #196]	; (8003e30 <HAL_TIM_PWM_Start+0x1f4>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d004      	beq.n	8003d7a <HAL_TIM_PWM_Start+0x13e>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a2f      	ldr	r2, [pc, #188]	; (8003e34 <HAL_TIM_PWM_Start+0x1f8>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d101      	bne.n	8003d7e <HAL_TIM_PWM_Start+0x142>
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e000      	b.n	8003d80 <HAL_TIM_PWM_Start+0x144>
 8003d7e:	2300      	movs	r3, #0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d007      	beq.n	8003d94 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d92:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a22      	ldr	r2, [pc, #136]	; (8003e24 <HAL_TIM_PWM_Start+0x1e8>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d01d      	beq.n	8003dda <HAL_TIM_PWM_Start+0x19e>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da6:	d018      	beq.n	8003dda <HAL_TIM_PWM_Start+0x19e>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a22      	ldr	r2, [pc, #136]	; (8003e38 <HAL_TIM_PWM_Start+0x1fc>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d013      	beq.n	8003dda <HAL_TIM_PWM_Start+0x19e>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a21      	ldr	r2, [pc, #132]	; (8003e3c <HAL_TIM_PWM_Start+0x200>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d00e      	beq.n	8003dda <HAL_TIM_PWM_Start+0x19e>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a1f      	ldr	r2, [pc, #124]	; (8003e40 <HAL_TIM_PWM_Start+0x204>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d009      	beq.n	8003dda <HAL_TIM_PWM_Start+0x19e>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a17      	ldr	r2, [pc, #92]	; (8003e28 <HAL_TIM_PWM_Start+0x1ec>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d004      	beq.n	8003dda <HAL_TIM_PWM_Start+0x19e>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a15      	ldr	r2, [pc, #84]	; (8003e2c <HAL_TIM_PWM_Start+0x1f0>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d115      	bne.n	8003e06 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	689a      	ldr	r2, [r3, #8]
 8003de0:	4b18      	ldr	r3, [pc, #96]	; (8003e44 <HAL_TIM_PWM_Start+0x208>)
 8003de2:	4013      	ands	r3, r2
 8003de4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2b06      	cmp	r3, #6
 8003dea:	d015      	beq.n	8003e18 <HAL_TIM_PWM_Start+0x1dc>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003df2:	d011      	beq.n	8003e18 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f042 0201 	orr.w	r2, r2, #1
 8003e02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e04:	e008      	b.n	8003e18 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f042 0201 	orr.w	r2, r2, #1
 8003e14:	601a      	str	r2, [r3, #0]
 8003e16:	e000      	b.n	8003e1a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e18:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3710      	adds	r7, #16
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	40012c00 	.word	0x40012c00
 8003e28:	40013400 	.word	0x40013400
 8003e2c:	40014000 	.word	0x40014000
 8003e30:	40014400 	.word	0x40014400
 8003e34:	40014800 	.word	0x40014800
 8003e38:	40000400 	.word	0x40000400
 8003e3c:	40000800 	.word	0x40000800
 8003e40:	40000c00 	.word	0x40000c00
 8003e44:	00010007 	.word	0x00010007

08003e48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d020      	beq.n	8003eac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d01b      	beq.n	8003eac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f06f 0202 	mvn.w	r2, #2
 8003e7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	f003 0303 	and.w	r3, r3, #3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 fac1 	bl	800441a <HAL_TIM_IC_CaptureCallback>
 8003e98:	e005      	b.n	8003ea6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 fab3 	bl	8004406 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 fac4 	bl	800442e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	f003 0304 	and.w	r3, r3, #4
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d020      	beq.n	8003ef8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f003 0304 	and.w	r3, r3, #4
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d01b      	beq.n	8003ef8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f06f 0204 	mvn.w	r2, #4
 8003ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2202      	movs	r2, #2
 8003ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 fa9b 	bl	800441a <HAL_TIM_IC_CaptureCallback>
 8003ee4:	e005      	b.n	8003ef2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 fa8d 	bl	8004406 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 fa9e 	bl	800442e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	f003 0308 	and.w	r3, r3, #8
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d020      	beq.n	8003f44 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f003 0308 	and.w	r3, r3, #8
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d01b      	beq.n	8003f44 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f06f 0208 	mvn.w	r2, #8
 8003f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2204      	movs	r2, #4
 8003f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	f003 0303 	and.w	r3, r3, #3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d003      	beq.n	8003f32 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 fa75 	bl	800441a <HAL_TIM_IC_CaptureCallback>
 8003f30:	e005      	b.n	8003f3e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 fa67 	bl	8004406 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 fa78 	bl	800442e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	f003 0310 	and.w	r3, r3, #16
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d020      	beq.n	8003f90 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f003 0310 	and.w	r3, r3, #16
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d01b      	beq.n	8003f90 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f06f 0210 	mvn.w	r2, #16
 8003f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2208      	movs	r2, #8
 8003f66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	69db      	ldr	r3, [r3, #28]
 8003f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 fa4f 	bl	800441a <HAL_TIM_IC_CaptureCallback>
 8003f7c:	e005      	b.n	8003f8a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 fa41 	bl	8004406 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 fa52 	bl	800442e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00c      	beq.n	8003fb4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d007      	beq.n	8003fb4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f06f 0201 	mvn.w	r2, #1
 8003fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7fc ff7e 	bl	8000eb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00c      	beq.n	8003fd8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d007      	beq.n	8003fd8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 ff02 	bl	8004ddc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00c      	beq.n	8003ffc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d007      	beq.n	8003ffc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 fefa 	bl	8004df0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00c      	beq.n	8004020 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800400c:	2b00      	cmp	r3, #0
 800400e:	d007      	beq.n	8004020 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 fa11 	bl	8004442 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	f003 0320 	and.w	r3, r3, #32
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00c      	beq.n	8004044 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f003 0320 	and.w	r3, r3, #32
 8004030:	2b00      	cmp	r3, #0
 8004032:	d007      	beq.n	8004044 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f06f 0220 	mvn.w	r2, #32
 800403c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 fec2 	bl	8004dc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004044:	bf00      	nop
 8004046:	3710      	adds	r7, #16
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004058:	2300      	movs	r3, #0
 800405a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004062:	2b01      	cmp	r3, #1
 8004064:	d101      	bne.n	800406a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004066:	2302      	movs	r3, #2
 8004068:	e0ff      	b.n	800426a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2b14      	cmp	r3, #20
 8004076:	f200 80f0 	bhi.w	800425a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800407a:	a201      	add	r2, pc, #4	; (adr r2, 8004080 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800407c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004080:	080040d5 	.word	0x080040d5
 8004084:	0800425b 	.word	0x0800425b
 8004088:	0800425b 	.word	0x0800425b
 800408c:	0800425b 	.word	0x0800425b
 8004090:	08004115 	.word	0x08004115
 8004094:	0800425b 	.word	0x0800425b
 8004098:	0800425b 	.word	0x0800425b
 800409c:	0800425b 	.word	0x0800425b
 80040a0:	08004157 	.word	0x08004157
 80040a4:	0800425b 	.word	0x0800425b
 80040a8:	0800425b 	.word	0x0800425b
 80040ac:	0800425b 	.word	0x0800425b
 80040b0:	08004197 	.word	0x08004197
 80040b4:	0800425b 	.word	0x0800425b
 80040b8:	0800425b 	.word	0x0800425b
 80040bc:	0800425b 	.word	0x0800425b
 80040c0:	080041d9 	.word	0x080041d9
 80040c4:	0800425b 	.word	0x0800425b
 80040c8:	0800425b 	.word	0x0800425b
 80040cc:	0800425b 	.word	0x0800425b
 80040d0:	08004219 	.word	0x08004219
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68b9      	ldr	r1, [r7, #8]
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 fa56 	bl	800458c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	699a      	ldr	r2, [r3, #24]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f042 0208 	orr.w	r2, r2, #8
 80040ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	699a      	ldr	r2, [r3, #24]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 0204 	bic.w	r2, r2, #4
 80040fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6999      	ldr	r1, [r3, #24]
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	691a      	ldr	r2, [r3, #16]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	619a      	str	r2, [r3, #24]
      break;
 8004112:	e0a5      	b.n	8004260 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68b9      	ldr	r1, [r7, #8]
 800411a:	4618      	mov	r0, r3
 800411c:	f000 fac6 	bl	80046ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	699a      	ldr	r2, [r3, #24]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800412e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	699a      	ldr	r2, [r3, #24]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800413e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6999      	ldr	r1, [r3, #24]
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	021a      	lsls	r2, r3, #8
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	430a      	orrs	r2, r1
 8004152:	619a      	str	r2, [r3, #24]
      break;
 8004154:	e084      	b.n	8004260 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68b9      	ldr	r1, [r7, #8]
 800415c:	4618      	mov	r0, r3
 800415e:	f000 fb2f 	bl	80047c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	69da      	ldr	r2, [r3, #28]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f042 0208 	orr.w	r2, r2, #8
 8004170:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	69da      	ldr	r2, [r3, #28]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 0204 	bic.w	r2, r2, #4
 8004180:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	69d9      	ldr	r1, [r3, #28]
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	691a      	ldr	r2, [r3, #16]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	61da      	str	r2, [r3, #28]
      break;
 8004194:	e064      	b.n	8004260 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68b9      	ldr	r1, [r7, #8]
 800419c:	4618      	mov	r0, r3
 800419e:	f000 fb97 	bl	80048d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	69da      	ldr	r2, [r3, #28]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	69da      	ldr	r2, [r3, #28]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	69d9      	ldr	r1, [r3, #28]
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	021a      	lsls	r2, r3, #8
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	430a      	orrs	r2, r1
 80041d4:	61da      	str	r2, [r3, #28]
      break;
 80041d6:	e043      	b.n	8004260 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68b9      	ldr	r1, [r7, #8]
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 fbe0 	bl	80049a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f042 0208 	orr.w	r2, r2, #8
 80041f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f022 0204 	bic.w	r2, r2, #4
 8004202:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	691a      	ldr	r2, [r3, #16]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	430a      	orrs	r2, r1
 8004214:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004216:	e023      	b.n	8004260 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68b9      	ldr	r1, [r7, #8]
 800421e:	4618      	mov	r0, r3
 8004220:	f000 fc24 	bl	8004a6c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004232:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004242:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	021a      	lsls	r2, r3, #8
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	430a      	orrs	r2, r1
 8004256:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004258:	e002      	b.n	8004260 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	75fb      	strb	r3, [r7, #23]
      break;
 800425e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004268:	7dfb      	ldrb	r3, [r7, #23]
}
 800426a:	4618      	mov	r0, r3
 800426c:	3718      	adds	r7, #24
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop

08004274 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800427e:	2300      	movs	r3, #0
 8004280:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004288:	2b01      	cmp	r3, #1
 800428a:	d101      	bne.n	8004290 <HAL_TIM_ConfigClockSource+0x1c>
 800428c:	2302      	movs	r3, #2
 800428e:	e0b6      	b.n	80043fe <HAL_TIM_ConfigClockSource+0x18a>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2202      	movs	r2, #2
 800429c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042cc:	d03e      	beq.n	800434c <HAL_TIM_ConfigClockSource+0xd8>
 80042ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042d2:	f200 8087 	bhi.w	80043e4 <HAL_TIM_ConfigClockSource+0x170>
 80042d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042da:	f000 8086 	beq.w	80043ea <HAL_TIM_ConfigClockSource+0x176>
 80042de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042e2:	d87f      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x170>
 80042e4:	2b70      	cmp	r3, #112	; 0x70
 80042e6:	d01a      	beq.n	800431e <HAL_TIM_ConfigClockSource+0xaa>
 80042e8:	2b70      	cmp	r3, #112	; 0x70
 80042ea:	d87b      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x170>
 80042ec:	2b60      	cmp	r3, #96	; 0x60
 80042ee:	d050      	beq.n	8004392 <HAL_TIM_ConfigClockSource+0x11e>
 80042f0:	2b60      	cmp	r3, #96	; 0x60
 80042f2:	d877      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x170>
 80042f4:	2b50      	cmp	r3, #80	; 0x50
 80042f6:	d03c      	beq.n	8004372 <HAL_TIM_ConfigClockSource+0xfe>
 80042f8:	2b50      	cmp	r3, #80	; 0x50
 80042fa:	d873      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x170>
 80042fc:	2b40      	cmp	r3, #64	; 0x40
 80042fe:	d058      	beq.n	80043b2 <HAL_TIM_ConfigClockSource+0x13e>
 8004300:	2b40      	cmp	r3, #64	; 0x40
 8004302:	d86f      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x170>
 8004304:	2b30      	cmp	r3, #48	; 0x30
 8004306:	d064      	beq.n	80043d2 <HAL_TIM_ConfigClockSource+0x15e>
 8004308:	2b30      	cmp	r3, #48	; 0x30
 800430a:	d86b      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x170>
 800430c:	2b20      	cmp	r3, #32
 800430e:	d060      	beq.n	80043d2 <HAL_TIM_ConfigClockSource+0x15e>
 8004310:	2b20      	cmp	r3, #32
 8004312:	d867      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x170>
 8004314:	2b00      	cmp	r3, #0
 8004316:	d05c      	beq.n	80043d2 <HAL_TIM_ConfigClockSource+0x15e>
 8004318:	2b10      	cmp	r3, #16
 800431a:	d05a      	beq.n	80043d2 <HAL_TIM_ConfigClockSource+0x15e>
 800431c:	e062      	b.n	80043e4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800432e:	f000 fc7d 	bl	8004c2c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004340:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68ba      	ldr	r2, [r7, #8]
 8004348:	609a      	str	r2, [r3, #8]
      break;
 800434a:	e04f      	b.n	80043ec <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800435c:	f000 fc66 	bl	8004c2c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689a      	ldr	r2, [r3, #8]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800436e:	609a      	str	r2, [r3, #8]
      break;
 8004370:	e03c      	b.n	80043ec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800437e:	461a      	mov	r2, r3
 8004380:	f000 fbda 	bl	8004b38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2150      	movs	r1, #80	; 0x50
 800438a:	4618      	mov	r0, r3
 800438c:	f000 fc33 	bl	8004bf6 <TIM_ITRx_SetConfig>
      break;
 8004390:	e02c      	b.n	80043ec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800439e:	461a      	mov	r2, r3
 80043a0:	f000 fbf9 	bl	8004b96 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2160      	movs	r1, #96	; 0x60
 80043aa:	4618      	mov	r0, r3
 80043ac:	f000 fc23 	bl	8004bf6 <TIM_ITRx_SetConfig>
      break;
 80043b0:	e01c      	b.n	80043ec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043be:	461a      	mov	r2, r3
 80043c0:	f000 fbba 	bl	8004b38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2140      	movs	r1, #64	; 0x40
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 fc13 	bl	8004bf6 <TIM_ITRx_SetConfig>
      break;
 80043d0:	e00c      	b.n	80043ec <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4619      	mov	r1, r3
 80043dc:	4610      	mov	r0, r2
 80043de:	f000 fc0a 	bl	8004bf6 <TIM_ITRx_SetConfig>
      break;
 80043e2:	e003      	b.n	80043ec <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	73fb      	strb	r3, [r7, #15]
      break;
 80043e8:	e000      	b.n	80043ec <HAL_TIM_ConfigClockSource+0x178>
      break;
 80043ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004406:	b480      	push	{r7}
 8004408:	b083      	sub	sp, #12
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800440e:	bf00      	nop
 8004410:	370c      	adds	r7, #12
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr

0800441a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800441a:	b480      	push	{r7}
 800441c:	b083      	sub	sp, #12
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004422:	bf00      	nop
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr

0800442e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800442e:	b480      	push	{r7}
 8004430:	b083      	sub	sp, #12
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004436:	bf00      	nop
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr

08004442 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004442:	b480      	push	{r7}
 8004444:	b083      	sub	sp, #12
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800444a:	bf00      	nop
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
	...

08004458 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a40      	ldr	r2, [pc, #256]	; (800456c <TIM_Base_SetConfig+0x114>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d013      	beq.n	8004498 <TIM_Base_SetConfig+0x40>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004476:	d00f      	beq.n	8004498 <TIM_Base_SetConfig+0x40>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a3d      	ldr	r2, [pc, #244]	; (8004570 <TIM_Base_SetConfig+0x118>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d00b      	beq.n	8004498 <TIM_Base_SetConfig+0x40>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a3c      	ldr	r2, [pc, #240]	; (8004574 <TIM_Base_SetConfig+0x11c>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d007      	beq.n	8004498 <TIM_Base_SetConfig+0x40>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a3b      	ldr	r2, [pc, #236]	; (8004578 <TIM_Base_SetConfig+0x120>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d003      	beq.n	8004498 <TIM_Base_SetConfig+0x40>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a3a      	ldr	r2, [pc, #232]	; (800457c <TIM_Base_SetConfig+0x124>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d108      	bne.n	80044aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800449e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a2f      	ldr	r2, [pc, #188]	; (800456c <TIM_Base_SetConfig+0x114>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d01f      	beq.n	80044f2 <TIM_Base_SetConfig+0x9a>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044b8:	d01b      	beq.n	80044f2 <TIM_Base_SetConfig+0x9a>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a2c      	ldr	r2, [pc, #176]	; (8004570 <TIM_Base_SetConfig+0x118>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d017      	beq.n	80044f2 <TIM_Base_SetConfig+0x9a>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a2b      	ldr	r2, [pc, #172]	; (8004574 <TIM_Base_SetConfig+0x11c>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d013      	beq.n	80044f2 <TIM_Base_SetConfig+0x9a>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a2a      	ldr	r2, [pc, #168]	; (8004578 <TIM_Base_SetConfig+0x120>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d00f      	beq.n	80044f2 <TIM_Base_SetConfig+0x9a>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a29      	ldr	r2, [pc, #164]	; (800457c <TIM_Base_SetConfig+0x124>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d00b      	beq.n	80044f2 <TIM_Base_SetConfig+0x9a>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a28      	ldr	r2, [pc, #160]	; (8004580 <TIM_Base_SetConfig+0x128>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d007      	beq.n	80044f2 <TIM_Base_SetConfig+0x9a>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a27      	ldr	r2, [pc, #156]	; (8004584 <TIM_Base_SetConfig+0x12c>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d003      	beq.n	80044f2 <TIM_Base_SetConfig+0x9a>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a26      	ldr	r2, [pc, #152]	; (8004588 <TIM_Base_SetConfig+0x130>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d108      	bne.n	8004504 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	4313      	orrs	r3, r2
 8004502:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	4313      	orrs	r3, r2
 8004510:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	689a      	ldr	r2, [r3, #8]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a10      	ldr	r2, [pc, #64]	; (800456c <TIM_Base_SetConfig+0x114>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d00f      	beq.n	8004550 <TIM_Base_SetConfig+0xf8>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a12      	ldr	r2, [pc, #72]	; (800457c <TIM_Base_SetConfig+0x124>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d00b      	beq.n	8004550 <TIM_Base_SetConfig+0xf8>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a11      	ldr	r2, [pc, #68]	; (8004580 <TIM_Base_SetConfig+0x128>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d007      	beq.n	8004550 <TIM_Base_SetConfig+0xf8>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a10      	ldr	r2, [pc, #64]	; (8004584 <TIM_Base_SetConfig+0x12c>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d003      	beq.n	8004550 <TIM_Base_SetConfig+0xf8>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a0f      	ldr	r2, [pc, #60]	; (8004588 <TIM_Base_SetConfig+0x130>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d103      	bne.n	8004558 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	691a      	ldr	r2, [r3, #16]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	615a      	str	r2, [r3, #20]
}
 800455e:	bf00      	nop
 8004560:	3714      	adds	r7, #20
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	40012c00 	.word	0x40012c00
 8004570:	40000400 	.word	0x40000400
 8004574:	40000800 	.word	0x40000800
 8004578:	40000c00 	.word	0x40000c00
 800457c:	40013400 	.word	0x40013400
 8004580:	40014000 	.word	0x40014000
 8004584:	40014400 	.word	0x40014400
 8004588:	40014800 	.word	0x40014800

0800458c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800458c:	b480      	push	{r7}
 800458e:	b087      	sub	sp, #28
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	f023 0201 	bic.w	r2, r3, #1
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f023 0303 	bic.w	r3, r3, #3
 80045c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	f023 0302 	bic.w	r3, r3, #2
 80045d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a2c      	ldr	r2, [pc, #176]	; (8004698 <TIM_OC1_SetConfig+0x10c>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d00f      	beq.n	800460c <TIM_OC1_SetConfig+0x80>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a2b      	ldr	r2, [pc, #172]	; (800469c <TIM_OC1_SetConfig+0x110>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d00b      	beq.n	800460c <TIM_OC1_SetConfig+0x80>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a2a      	ldr	r2, [pc, #168]	; (80046a0 <TIM_OC1_SetConfig+0x114>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d007      	beq.n	800460c <TIM_OC1_SetConfig+0x80>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a29      	ldr	r2, [pc, #164]	; (80046a4 <TIM_OC1_SetConfig+0x118>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d003      	beq.n	800460c <TIM_OC1_SetConfig+0x80>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a28      	ldr	r2, [pc, #160]	; (80046a8 <TIM_OC1_SetConfig+0x11c>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d10c      	bne.n	8004626 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	f023 0308 	bic.w	r3, r3, #8
 8004612:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	697a      	ldr	r2, [r7, #20]
 800461a:	4313      	orrs	r3, r2
 800461c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	f023 0304 	bic.w	r3, r3, #4
 8004624:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a1b      	ldr	r2, [pc, #108]	; (8004698 <TIM_OC1_SetConfig+0x10c>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d00f      	beq.n	800464e <TIM_OC1_SetConfig+0xc2>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a1a      	ldr	r2, [pc, #104]	; (800469c <TIM_OC1_SetConfig+0x110>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d00b      	beq.n	800464e <TIM_OC1_SetConfig+0xc2>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a19      	ldr	r2, [pc, #100]	; (80046a0 <TIM_OC1_SetConfig+0x114>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d007      	beq.n	800464e <TIM_OC1_SetConfig+0xc2>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a18      	ldr	r2, [pc, #96]	; (80046a4 <TIM_OC1_SetConfig+0x118>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d003      	beq.n	800464e <TIM_OC1_SetConfig+0xc2>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a17      	ldr	r2, [pc, #92]	; (80046a8 <TIM_OC1_SetConfig+0x11c>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d111      	bne.n	8004672 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004654:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800465c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	4313      	orrs	r3, r2
 8004666:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	4313      	orrs	r3, r2
 8004670:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	685a      	ldr	r2, [r3, #4]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	697a      	ldr	r2, [r7, #20]
 800468a:	621a      	str	r2, [r3, #32]
}
 800468c:	bf00      	nop
 800468e:	371c      	adds	r7, #28
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr
 8004698:	40012c00 	.word	0x40012c00
 800469c:	40013400 	.word	0x40013400
 80046a0:	40014000 	.word	0x40014000
 80046a4:	40014400 	.word	0x40014400
 80046a8:	40014800 	.word	0x40014800

080046ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b087      	sub	sp, #28
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a1b      	ldr	r3, [r3, #32]
 80046c0:	f023 0210 	bic.w	r2, r3, #16
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	021b      	lsls	r3, r3, #8
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	f023 0320 	bic.w	r3, r3, #32
 80046fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	011b      	lsls	r3, r3, #4
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	4313      	orrs	r3, r2
 8004706:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a28      	ldr	r2, [pc, #160]	; (80047ac <TIM_OC2_SetConfig+0x100>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d003      	beq.n	8004718 <TIM_OC2_SetConfig+0x6c>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a27      	ldr	r2, [pc, #156]	; (80047b0 <TIM_OC2_SetConfig+0x104>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d10d      	bne.n	8004734 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800471e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	011b      	lsls	r3, r3, #4
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	4313      	orrs	r3, r2
 800472a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004732:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a1d      	ldr	r2, [pc, #116]	; (80047ac <TIM_OC2_SetConfig+0x100>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d00f      	beq.n	800475c <TIM_OC2_SetConfig+0xb0>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a1c      	ldr	r2, [pc, #112]	; (80047b0 <TIM_OC2_SetConfig+0x104>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d00b      	beq.n	800475c <TIM_OC2_SetConfig+0xb0>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a1b      	ldr	r2, [pc, #108]	; (80047b4 <TIM_OC2_SetConfig+0x108>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d007      	beq.n	800475c <TIM_OC2_SetConfig+0xb0>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a1a      	ldr	r2, [pc, #104]	; (80047b8 <TIM_OC2_SetConfig+0x10c>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d003      	beq.n	800475c <TIM_OC2_SetConfig+0xb0>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a19      	ldr	r2, [pc, #100]	; (80047bc <TIM_OC2_SetConfig+0x110>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d113      	bne.n	8004784 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004762:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800476a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	695b      	ldr	r3, [r3, #20]
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	4313      	orrs	r3, r2
 8004776:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	4313      	orrs	r3, r2
 8004782:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	621a      	str	r2, [r3, #32]
}
 800479e:	bf00      	nop
 80047a0:	371c      	adds	r7, #28
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	40012c00 	.word	0x40012c00
 80047b0:	40013400 	.word	0x40013400
 80047b4:	40014000 	.word	0x40014000
 80047b8:	40014400 	.word	0x40014400
 80047bc:	40014800 	.word	0x40014800

080047c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b087      	sub	sp, #28
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	69db      	ldr	r3, [r3, #28]
 80047e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f023 0303 	bic.w	r3, r3, #3
 80047fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	4313      	orrs	r3, r2
 8004804:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800480c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	021b      	lsls	r3, r3, #8
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	4313      	orrs	r3, r2
 8004818:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a27      	ldr	r2, [pc, #156]	; (80048bc <TIM_OC3_SetConfig+0xfc>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d003      	beq.n	800482a <TIM_OC3_SetConfig+0x6a>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a26      	ldr	r2, [pc, #152]	; (80048c0 <TIM_OC3_SetConfig+0x100>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d10d      	bne.n	8004846 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004830:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	021b      	lsls	r3, r3, #8
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	4313      	orrs	r3, r2
 800483c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004844:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a1c      	ldr	r2, [pc, #112]	; (80048bc <TIM_OC3_SetConfig+0xfc>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d00f      	beq.n	800486e <TIM_OC3_SetConfig+0xae>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a1b      	ldr	r2, [pc, #108]	; (80048c0 <TIM_OC3_SetConfig+0x100>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d00b      	beq.n	800486e <TIM_OC3_SetConfig+0xae>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a1a      	ldr	r2, [pc, #104]	; (80048c4 <TIM_OC3_SetConfig+0x104>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d007      	beq.n	800486e <TIM_OC3_SetConfig+0xae>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a19      	ldr	r2, [pc, #100]	; (80048c8 <TIM_OC3_SetConfig+0x108>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d003      	beq.n	800486e <TIM_OC3_SetConfig+0xae>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a18      	ldr	r2, [pc, #96]	; (80048cc <TIM_OC3_SetConfig+0x10c>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d113      	bne.n	8004896 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004874:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800487c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	011b      	lsls	r3, r3, #4
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	4313      	orrs	r3, r2
 8004888:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	011b      	lsls	r3, r3, #4
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	4313      	orrs	r3, r2
 8004894:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	621a      	str	r2, [r3, #32]
}
 80048b0:	bf00      	nop
 80048b2:	371c      	adds	r7, #28
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr
 80048bc:	40012c00 	.word	0x40012c00
 80048c0:	40013400 	.word	0x40013400
 80048c4:	40014000 	.word	0x40014000
 80048c8:	40014400 	.word	0x40014400
 80048cc:	40014800 	.word	0x40014800

080048d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b087      	sub	sp, #28
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a1b      	ldr	r3, [r3, #32]
 80048e4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	69db      	ldr	r3, [r3, #28]
 80048f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004902:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800490a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	021b      	lsls	r3, r3, #8
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	4313      	orrs	r3, r2
 8004916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800491e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	031b      	lsls	r3, r3, #12
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	4313      	orrs	r3, r2
 800492a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a18      	ldr	r2, [pc, #96]	; (8004990 <TIM_OC4_SetConfig+0xc0>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d00f      	beq.n	8004954 <TIM_OC4_SetConfig+0x84>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a17      	ldr	r2, [pc, #92]	; (8004994 <TIM_OC4_SetConfig+0xc4>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d00b      	beq.n	8004954 <TIM_OC4_SetConfig+0x84>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a16      	ldr	r2, [pc, #88]	; (8004998 <TIM_OC4_SetConfig+0xc8>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d007      	beq.n	8004954 <TIM_OC4_SetConfig+0x84>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a15      	ldr	r2, [pc, #84]	; (800499c <TIM_OC4_SetConfig+0xcc>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d003      	beq.n	8004954 <TIM_OC4_SetConfig+0x84>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a14      	ldr	r2, [pc, #80]	; (80049a0 <TIM_OC4_SetConfig+0xd0>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d109      	bne.n	8004968 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800495a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	019b      	lsls	r3, r3, #6
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	4313      	orrs	r3, r2
 8004966:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	621a      	str	r2, [r3, #32]
}
 8004982:	bf00      	nop
 8004984:	371c      	adds	r7, #28
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	40012c00 	.word	0x40012c00
 8004994:	40013400 	.word	0x40013400
 8004998:	40014000 	.word	0x40014000
 800499c:	40014400 	.word	0x40014400
 80049a0:	40014800 	.word	0x40014800

080049a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b087      	sub	sp, #28
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a1b      	ldr	r3, [r3, #32]
 80049b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	4313      	orrs	r3, r2
 80049e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80049e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	041b      	lsls	r3, r3, #16
 80049f0:	693a      	ldr	r2, [r7, #16]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a17      	ldr	r2, [pc, #92]	; (8004a58 <TIM_OC5_SetConfig+0xb4>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d00f      	beq.n	8004a1e <TIM_OC5_SetConfig+0x7a>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a16      	ldr	r2, [pc, #88]	; (8004a5c <TIM_OC5_SetConfig+0xb8>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d00b      	beq.n	8004a1e <TIM_OC5_SetConfig+0x7a>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a15      	ldr	r2, [pc, #84]	; (8004a60 <TIM_OC5_SetConfig+0xbc>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d007      	beq.n	8004a1e <TIM_OC5_SetConfig+0x7a>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a14      	ldr	r2, [pc, #80]	; (8004a64 <TIM_OC5_SetConfig+0xc0>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d003      	beq.n	8004a1e <TIM_OC5_SetConfig+0x7a>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a13      	ldr	r2, [pc, #76]	; (8004a68 <TIM_OC5_SetConfig+0xc4>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d109      	bne.n	8004a32 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a24:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	695b      	ldr	r3, [r3, #20]
 8004a2a:	021b      	lsls	r3, r3, #8
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	685a      	ldr	r2, [r3, #4]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	621a      	str	r2, [r3, #32]
}
 8004a4c:	bf00      	nop
 8004a4e:	371c      	adds	r7, #28
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr
 8004a58:	40012c00 	.word	0x40012c00
 8004a5c:	40013400 	.word	0x40013400
 8004a60:	40014000 	.word	0x40014000
 8004a64:	40014400 	.word	0x40014400
 8004a68:	40014800 	.word	0x40014800

08004a6c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b087      	sub	sp, #28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a1b      	ldr	r3, [r3, #32]
 8004a80:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	021b      	lsls	r3, r3, #8
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ab2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	051b      	lsls	r3, r3, #20
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a18      	ldr	r2, [pc, #96]	; (8004b24 <TIM_OC6_SetConfig+0xb8>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d00f      	beq.n	8004ae8 <TIM_OC6_SetConfig+0x7c>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a17      	ldr	r2, [pc, #92]	; (8004b28 <TIM_OC6_SetConfig+0xbc>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d00b      	beq.n	8004ae8 <TIM_OC6_SetConfig+0x7c>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a16      	ldr	r2, [pc, #88]	; (8004b2c <TIM_OC6_SetConfig+0xc0>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d007      	beq.n	8004ae8 <TIM_OC6_SetConfig+0x7c>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a15      	ldr	r2, [pc, #84]	; (8004b30 <TIM_OC6_SetConfig+0xc4>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d003      	beq.n	8004ae8 <TIM_OC6_SetConfig+0x7c>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a14      	ldr	r2, [pc, #80]	; (8004b34 <TIM_OC6_SetConfig+0xc8>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d109      	bne.n	8004afc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	029b      	lsls	r3, r3, #10
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	685a      	ldr	r2, [r3, #4]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	621a      	str	r2, [r3, #32]
}
 8004b16:	bf00      	nop
 8004b18:	371c      	adds	r7, #28
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	40012c00 	.word	0x40012c00
 8004b28:	40013400 	.word	0x40013400
 8004b2c:	40014000 	.word	0x40014000
 8004b30:	40014400 	.word	0x40014400
 8004b34:	40014800 	.word	0x40014800

08004b38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b087      	sub	sp, #28
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6a1b      	ldr	r3, [r3, #32]
 8004b48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	f023 0201 	bic.w	r2, r3, #1
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	011b      	lsls	r3, r3, #4
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	f023 030a 	bic.w	r3, r3, #10
 8004b74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	621a      	str	r2, [r3, #32]
}
 8004b8a:	bf00      	nop
 8004b8c:	371c      	adds	r7, #28
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b087      	sub	sp, #28
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	60f8      	str	r0, [r7, #12]
 8004b9e:	60b9      	str	r1, [r7, #8]
 8004ba0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6a1b      	ldr	r3, [r3, #32]
 8004bac:	f023 0210 	bic.w	r2, r3, #16
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	031b      	lsls	r3, r3, #12
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004bd2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	011b      	lsls	r3, r3, #4
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	621a      	str	r2, [r3, #32]
}
 8004bea:	bf00      	nop
 8004bec:	371c      	adds	r7, #28
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr

08004bf6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	b085      	sub	sp, #20
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
 8004bfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c0e:	683a      	ldr	r2, [r7, #0]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	f043 0307 	orr.w	r3, r3, #7
 8004c18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	609a      	str	r2, [r3, #8]
}
 8004c20:	bf00      	nop
 8004c22:	3714      	adds	r7, #20
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b087      	sub	sp, #28
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]
 8004c38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	021a      	lsls	r2, r3, #8
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	697a      	ldr	r2, [r7, #20]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	609a      	str	r2, [r3, #8]
}
 8004c60:	bf00      	nop
 8004c62:	371c      	adds	r7, #28
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b087      	sub	sp, #28
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	f003 031f 	and.w	r3, r3, #31
 8004c7e:	2201      	movs	r2, #1
 8004c80:	fa02 f303 	lsl.w	r3, r2, r3
 8004c84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6a1a      	ldr	r2, [r3, #32]
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	43db      	mvns	r3, r3
 8004c8e:	401a      	ands	r2, r3
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6a1a      	ldr	r2, [r3, #32]
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	f003 031f 	and.w	r3, r3, #31
 8004c9e:	6879      	ldr	r1, [r7, #4]
 8004ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ca4:	431a      	orrs	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	621a      	str	r2, [r3, #32]
}
 8004caa:	bf00      	nop
 8004cac:	371c      	adds	r7, #28
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
	...

08004cb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d101      	bne.n	8004cd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ccc:	2302      	movs	r3, #2
 8004cce:	e068      	b.n	8004da2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2202      	movs	r2, #2
 8004cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a2e      	ldr	r2, [pc, #184]	; (8004db0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d004      	beq.n	8004d04 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a2d      	ldr	r2, [pc, #180]	; (8004db4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d108      	bne.n	8004d16 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004d0a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d1c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a1e      	ldr	r2, [pc, #120]	; (8004db0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d01d      	beq.n	8004d76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d42:	d018      	beq.n	8004d76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a1b      	ldr	r2, [pc, #108]	; (8004db8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d013      	beq.n	8004d76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a1a      	ldr	r2, [pc, #104]	; (8004dbc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d00e      	beq.n	8004d76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a18      	ldr	r2, [pc, #96]	; (8004dc0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d009      	beq.n	8004d76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a13      	ldr	r2, [pc, #76]	; (8004db4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d004      	beq.n	8004d76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a14      	ldr	r2, [pc, #80]	; (8004dc4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d10c      	bne.n	8004d90 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3714      	adds	r7, #20
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	40012c00 	.word	0x40012c00
 8004db4:	40013400 	.word	0x40013400
 8004db8:	40000400 	.word	0x40000400
 8004dbc:	40000800 	.word	0x40000800
 8004dc0:	40000c00 	.word	0x40000c00
 8004dc4:	40014000 	.word	0x40014000

08004dc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d101      	bne.n	8004e16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e040      	b.n	8004e98 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d106      	bne.n	8004e2c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f7fc fe52 	bl	8001ad0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2224      	movs	r2, #36	; 0x24
 8004e30:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f022 0201 	bic.w	r2, r2, #1
 8004e40:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d002      	beq.n	8004e50 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 fb6a 	bl	8005524 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f000 f8af 	bl	8004fb4 <UART_SetConfig>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d101      	bne.n	8004e60 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e01b      	b.n	8004e98 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	685a      	ldr	r2, [r3, #4]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689a      	ldr	r2, [r3, #8]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f042 0201 	orr.w	r2, r2, #1
 8004e8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 fbe9 	bl	8005668 <UART_CheckIdleState>
 8004e96:	4603      	mov	r3, r0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3708      	adds	r7, #8
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b08a      	sub	sp, #40	; 0x28
 8004ea4:	af02      	add	r7, sp, #8
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	603b      	str	r3, [r7, #0]
 8004eac:	4613      	mov	r3, r2
 8004eae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004eb4:	2b20      	cmp	r3, #32
 8004eb6:	d178      	bne.n	8004faa <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d002      	beq.n	8004ec4 <HAL_UART_Transmit+0x24>
 8004ebe:	88fb      	ldrh	r3, [r7, #6]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d101      	bne.n	8004ec8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e071      	b.n	8004fac <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2221      	movs	r2, #33	; 0x21
 8004ed4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ed6:	f7fc ff87 	bl	8001de8 <HAL_GetTick>
 8004eda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	88fa      	ldrh	r2, [r7, #6]
 8004ee0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	88fa      	ldrh	r2, [r7, #6]
 8004ee8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ef4:	d108      	bne.n	8004f08 <HAL_UART_Transmit+0x68>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d104      	bne.n	8004f08 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004efe:	2300      	movs	r3, #0
 8004f00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	61bb      	str	r3, [r7, #24]
 8004f06:	e003      	b.n	8004f10 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f10:	e030      	b.n	8004f74 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	9300      	str	r3, [sp, #0]
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	2180      	movs	r1, #128	; 0x80
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	f000 fc4b 	bl	80057b8 <UART_WaitOnFlagUntilTimeout>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d004      	beq.n	8004f32 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e03c      	b.n	8004fac <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d10b      	bne.n	8004f50 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	881a      	ldrh	r2, [r3, #0]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f44:	b292      	uxth	r2, r2
 8004f46:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	3302      	adds	r3, #2
 8004f4c:	61bb      	str	r3, [r7, #24]
 8004f4e:	e008      	b.n	8004f62 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	781a      	ldrb	r2, [r3, #0]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	b292      	uxth	r2, r2
 8004f5a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	3301      	adds	r3, #1
 8004f60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	b29a      	uxth	r2, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d1c8      	bne.n	8004f12 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	9300      	str	r3, [sp, #0]
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	2200      	movs	r2, #0
 8004f88:	2140      	movs	r1, #64	; 0x40
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f000 fc14 	bl	80057b8 <UART_WaitOnFlagUntilTimeout>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d004      	beq.n	8004fa0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2220      	movs	r2, #32
 8004f9a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e005      	b.n	8004fac <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	e000      	b.n	8004fac <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004faa:	2302      	movs	r3, #2
  }
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3720      	adds	r7, #32
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fb8:	b08a      	sub	sp, #40	; 0x28
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	689a      	ldr	r2, [r3, #8]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	431a      	orrs	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	431a      	orrs	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	69db      	ldr	r3, [r3, #28]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	4ba4      	ldr	r3, [pc, #656]	; (8005274 <UART_SetConfig+0x2c0>)
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	6812      	ldr	r2, [r2, #0]
 8004fea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004fec:	430b      	orrs	r3, r1
 8004fee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	68da      	ldr	r2, [r3, #12]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	430a      	orrs	r2, r1
 8005004:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a99      	ldr	r2, [pc, #612]	; (8005278 <UART_SetConfig+0x2c4>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d004      	beq.n	8005020 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800501c:	4313      	orrs	r3, r2
 800501e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005030:	430a      	orrs	r2, r1
 8005032:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a90      	ldr	r2, [pc, #576]	; (800527c <UART_SetConfig+0x2c8>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d126      	bne.n	800508c <UART_SetConfig+0xd8>
 800503e:	4b90      	ldr	r3, [pc, #576]	; (8005280 <UART_SetConfig+0x2cc>)
 8005040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005044:	f003 0303 	and.w	r3, r3, #3
 8005048:	2b03      	cmp	r3, #3
 800504a:	d81b      	bhi.n	8005084 <UART_SetConfig+0xd0>
 800504c:	a201      	add	r2, pc, #4	; (adr r2, 8005054 <UART_SetConfig+0xa0>)
 800504e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005052:	bf00      	nop
 8005054:	08005065 	.word	0x08005065
 8005058:	08005075 	.word	0x08005075
 800505c:	0800506d 	.word	0x0800506d
 8005060:	0800507d 	.word	0x0800507d
 8005064:	2301      	movs	r3, #1
 8005066:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800506a:	e116      	b.n	800529a <UART_SetConfig+0x2e6>
 800506c:	2302      	movs	r3, #2
 800506e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005072:	e112      	b.n	800529a <UART_SetConfig+0x2e6>
 8005074:	2304      	movs	r3, #4
 8005076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800507a:	e10e      	b.n	800529a <UART_SetConfig+0x2e6>
 800507c:	2308      	movs	r3, #8
 800507e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005082:	e10a      	b.n	800529a <UART_SetConfig+0x2e6>
 8005084:	2310      	movs	r3, #16
 8005086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800508a:	e106      	b.n	800529a <UART_SetConfig+0x2e6>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a7c      	ldr	r2, [pc, #496]	; (8005284 <UART_SetConfig+0x2d0>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d138      	bne.n	8005108 <UART_SetConfig+0x154>
 8005096:	4b7a      	ldr	r3, [pc, #488]	; (8005280 <UART_SetConfig+0x2cc>)
 8005098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800509c:	f003 030c 	and.w	r3, r3, #12
 80050a0:	2b0c      	cmp	r3, #12
 80050a2:	d82d      	bhi.n	8005100 <UART_SetConfig+0x14c>
 80050a4:	a201      	add	r2, pc, #4	; (adr r2, 80050ac <UART_SetConfig+0xf8>)
 80050a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050aa:	bf00      	nop
 80050ac:	080050e1 	.word	0x080050e1
 80050b0:	08005101 	.word	0x08005101
 80050b4:	08005101 	.word	0x08005101
 80050b8:	08005101 	.word	0x08005101
 80050bc:	080050f1 	.word	0x080050f1
 80050c0:	08005101 	.word	0x08005101
 80050c4:	08005101 	.word	0x08005101
 80050c8:	08005101 	.word	0x08005101
 80050cc:	080050e9 	.word	0x080050e9
 80050d0:	08005101 	.word	0x08005101
 80050d4:	08005101 	.word	0x08005101
 80050d8:	08005101 	.word	0x08005101
 80050dc:	080050f9 	.word	0x080050f9
 80050e0:	2300      	movs	r3, #0
 80050e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050e6:	e0d8      	b.n	800529a <UART_SetConfig+0x2e6>
 80050e8:	2302      	movs	r3, #2
 80050ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ee:	e0d4      	b.n	800529a <UART_SetConfig+0x2e6>
 80050f0:	2304      	movs	r3, #4
 80050f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050f6:	e0d0      	b.n	800529a <UART_SetConfig+0x2e6>
 80050f8:	2308      	movs	r3, #8
 80050fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050fe:	e0cc      	b.n	800529a <UART_SetConfig+0x2e6>
 8005100:	2310      	movs	r3, #16
 8005102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005106:	e0c8      	b.n	800529a <UART_SetConfig+0x2e6>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a5e      	ldr	r2, [pc, #376]	; (8005288 <UART_SetConfig+0x2d4>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d125      	bne.n	800515e <UART_SetConfig+0x1aa>
 8005112:	4b5b      	ldr	r3, [pc, #364]	; (8005280 <UART_SetConfig+0x2cc>)
 8005114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005118:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800511c:	2b30      	cmp	r3, #48	; 0x30
 800511e:	d016      	beq.n	800514e <UART_SetConfig+0x19a>
 8005120:	2b30      	cmp	r3, #48	; 0x30
 8005122:	d818      	bhi.n	8005156 <UART_SetConfig+0x1a2>
 8005124:	2b20      	cmp	r3, #32
 8005126:	d00a      	beq.n	800513e <UART_SetConfig+0x18a>
 8005128:	2b20      	cmp	r3, #32
 800512a:	d814      	bhi.n	8005156 <UART_SetConfig+0x1a2>
 800512c:	2b00      	cmp	r3, #0
 800512e:	d002      	beq.n	8005136 <UART_SetConfig+0x182>
 8005130:	2b10      	cmp	r3, #16
 8005132:	d008      	beq.n	8005146 <UART_SetConfig+0x192>
 8005134:	e00f      	b.n	8005156 <UART_SetConfig+0x1a2>
 8005136:	2300      	movs	r3, #0
 8005138:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800513c:	e0ad      	b.n	800529a <UART_SetConfig+0x2e6>
 800513e:	2302      	movs	r3, #2
 8005140:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005144:	e0a9      	b.n	800529a <UART_SetConfig+0x2e6>
 8005146:	2304      	movs	r3, #4
 8005148:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800514c:	e0a5      	b.n	800529a <UART_SetConfig+0x2e6>
 800514e:	2308      	movs	r3, #8
 8005150:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005154:	e0a1      	b.n	800529a <UART_SetConfig+0x2e6>
 8005156:	2310      	movs	r3, #16
 8005158:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800515c:	e09d      	b.n	800529a <UART_SetConfig+0x2e6>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a4a      	ldr	r2, [pc, #296]	; (800528c <UART_SetConfig+0x2d8>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d125      	bne.n	80051b4 <UART_SetConfig+0x200>
 8005168:	4b45      	ldr	r3, [pc, #276]	; (8005280 <UART_SetConfig+0x2cc>)
 800516a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800516e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005172:	2bc0      	cmp	r3, #192	; 0xc0
 8005174:	d016      	beq.n	80051a4 <UART_SetConfig+0x1f0>
 8005176:	2bc0      	cmp	r3, #192	; 0xc0
 8005178:	d818      	bhi.n	80051ac <UART_SetConfig+0x1f8>
 800517a:	2b80      	cmp	r3, #128	; 0x80
 800517c:	d00a      	beq.n	8005194 <UART_SetConfig+0x1e0>
 800517e:	2b80      	cmp	r3, #128	; 0x80
 8005180:	d814      	bhi.n	80051ac <UART_SetConfig+0x1f8>
 8005182:	2b00      	cmp	r3, #0
 8005184:	d002      	beq.n	800518c <UART_SetConfig+0x1d8>
 8005186:	2b40      	cmp	r3, #64	; 0x40
 8005188:	d008      	beq.n	800519c <UART_SetConfig+0x1e8>
 800518a:	e00f      	b.n	80051ac <UART_SetConfig+0x1f8>
 800518c:	2300      	movs	r3, #0
 800518e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005192:	e082      	b.n	800529a <UART_SetConfig+0x2e6>
 8005194:	2302      	movs	r3, #2
 8005196:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800519a:	e07e      	b.n	800529a <UART_SetConfig+0x2e6>
 800519c:	2304      	movs	r3, #4
 800519e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051a2:	e07a      	b.n	800529a <UART_SetConfig+0x2e6>
 80051a4:	2308      	movs	r3, #8
 80051a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051aa:	e076      	b.n	800529a <UART_SetConfig+0x2e6>
 80051ac:	2310      	movs	r3, #16
 80051ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051b2:	e072      	b.n	800529a <UART_SetConfig+0x2e6>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a35      	ldr	r2, [pc, #212]	; (8005290 <UART_SetConfig+0x2dc>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d12a      	bne.n	8005214 <UART_SetConfig+0x260>
 80051be:	4b30      	ldr	r3, [pc, #192]	; (8005280 <UART_SetConfig+0x2cc>)
 80051c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051cc:	d01a      	beq.n	8005204 <UART_SetConfig+0x250>
 80051ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051d2:	d81b      	bhi.n	800520c <UART_SetConfig+0x258>
 80051d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051d8:	d00c      	beq.n	80051f4 <UART_SetConfig+0x240>
 80051da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051de:	d815      	bhi.n	800520c <UART_SetConfig+0x258>
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d003      	beq.n	80051ec <UART_SetConfig+0x238>
 80051e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051e8:	d008      	beq.n	80051fc <UART_SetConfig+0x248>
 80051ea:	e00f      	b.n	800520c <UART_SetConfig+0x258>
 80051ec:	2300      	movs	r3, #0
 80051ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051f2:	e052      	b.n	800529a <UART_SetConfig+0x2e6>
 80051f4:	2302      	movs	r3, #2
 80051f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051fa:	e04e      	b.n	800529a <UART_SetConfig+0x2e6>
 80051fc:	2304      	movs	r3, #4
 80051fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005202:	e04a      	b.n	800529a <UART_SetConfig+0x2e6>
 8005204:	2308      	movs	r3, #8
 8005206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800520a:	e046      	b.n	800529a <UART_SetConfig+0x2e6>
 800520c:	2310      	movs	r3, #16
 800520e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005212:	e042      	b.n	800529a <UART_SetConfig+0x2e6>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a17      	ldr	r2, [pc, #92]	; (8005278 <UART_SetConfig+0x2c4>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d13a      	bne.n	8005294 <UART_SetConfig+0x2e0>
 800521e:	4b18      	ldr	r3, [pc, #96]	; (8005280 <UART_SetConfig+0x2cc>)
 8005220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005224:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005228:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800522c:	d01a      	beq.n	8005264 <UART_SetConfig+0x2b0>
 800522e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005232:	d81b      	bhi.n	800526c <UART_SetConfig+0x2b8>
 8005234:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005238:	d00c      	beq.n	8005254 <UART_SetConfig+0x2a0>
 800523a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800523e:	d815      	bhi.n	800526c <UART_SetConfig+0x2b8>
 8005240:	2b00      	cmp	r3, #0
 8005242:	d003      	beq.n	800524c <UART_SetConfig+0x298>
 8005244:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005248:	d008      	beq.n	800525c <UART_SetConfig+0x2a8>
 800524a:	e00f      	b.n	800526c <UART_SetConfig+0x2b8>
 800524c:	2300      	movs	r3, #0
 800524e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005252:	e022      	b.n	800529a <UART_SetConfig+0x2e6>
 8005254:	2302      	movs	r3, #2
 8005256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800525a:	e01e      	b.n	800529a <UART_SetConfig+0x2e6>
 800525c:	2304      	movs	r3, #4
 800525e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005262:	e01a      	b.n	800529a <UART_SetConfig+0x2e6>
 8005264:	2308      	movs	r3, #8
 8005266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800526a:	e016      	b.n	800529a <UART_SetConfig+0x2e6>
 800526c:	2310      	movs	r3, #16
 800526e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005272:	e012      	b.n	800529a <UART_SetConfig+0x2e6>
 8005274:	efff69f3 	.word	0xefff69f3
 8005278:	40008000 	.word	0x40008000
 800527c:	40013800 	.word	0x40013800
 8005280:	40021000 	.word	0x40021000
 8005284:	40004400 	.word	0x40004400
 8005288:	40004800 	.word	0x40004800
 800528c:	40004c00 	.word	0x40004c00
 8005290:	40005000 	.word	0x40005000
 8005294:	2310      	movs	r3, #16
 8005296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a9f      	ldr	r2, [pc, #636]	; (800551c <UART_SetConfig+0x568>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d17a      	bne.n	800539a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80052a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052a8:	2b08      	cmp	r3, #8
 80052aa:	d824      	bhi.n	80052f6 <UART_SetConfig+0x342>
 80052ac:	a201      	add	r2, pc, #4	; (adr r2, 80052b4 <UART_SetConfig+0x300>)
 80052ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b2:	bf00      	nop
 80052b4:	080052d9 	.word	0x080052d9
 80052b8:	080052f7 	.word	0x080052f7
 80052bc:	080052e1 	.word	0x080052e1
 80052c0:	080052f7 	.word	0x080052f7
 80052c4:	080052e7 	.word	0x080052e7
 80052c8:	080052f7 	.word	0x080052f7
 80052cc:	080052f7 	.word	0x080052f7
 80052d0:	080052f7 	.word	0x080052f7
 80052d4:	080052ef 	.word	0x080052ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052d8:	f7fd fe3e 	bl	8002f58 <HAL_RCC_GetPCLK1Freq>
 80052dc:	61f8      	str	r0, [r7, #28]
        break;
 80052de:	e010      	b.n	8005302 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052e0:	4b8f      	ldr	r3, [pc, #572]	; (8005520 <UART_SetConfig+0x56c>)
 80052e2:	61fb      	str	r3, [r7, #28]
        break;
 80052e4:	e00d      	b.n	8005302 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052e6:	f7fd fd9f 	bl	8002e28 <HAL_RCC_GetSysClockFreq>
 80052ea:	61f8      	str	r0, [r7, #28]
        break;
 80052ec:	e009      	b.n	8005302 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052f2:	61fb      	str	r3, [r7, #28]
        break;
 80052f4:	e005      	b.n	8005302 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80052f6:	2300      	movs	r3, #0
 80052f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005300:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	2b00      	cmp	r3, #0
 8005306:	f000 80fb 	beq.w	8005500 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	685a      	ldr	r2, [r3, #4]
 800530e:	4613      	mov	r3, r2
 8005310:	005b      	lsls	r3, r3, #1
 8005312:	4413      	add	r3, r2
 8005314:	69fa      	ldr	r2, [r7, #28]
 8005316:	429a      	cmp	r2, r3
 8005318:	d305      	bcc.n	8005326 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005320:	69fa      	ldr	r2, [r7, #28]
 8005322:	429a      	cmp	r2, r3
 8005324:	d903      	bls.n	800532e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800532c:	e0e8      	b.n	8005500 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	2200      	movs	r2, #0
 8005332:	461c      	mov	r4, r3
 8005334:	4615      	mov	r5, r2
 8005336:	f04f 0200 	mov.w	r2, #0
 800533a:	f04f 0300 	mov.w	r3, #0
 800533e:	022b      	lsls	r3, r5, #8
 8005340:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005344:	0222      	lsls	r2, r4, #8
 8005346:	68f9      	ldr	r1, [r7, #12]
 8005348:	6849      	ldr	r1, [r1, #4]
 800534a:	0849      	lsrs	r1, r1, #1
 800534c:	2000      	movs	r0, #0
 800534e:	4688      	mov	r8, r1
 8005350:	4681      	mov	r9, r0
 8005352:	eb12 0a08 	adds.w	sl, r2, r8
 8005356:	eb43 0b09 	adc.w	fp, r3, r9
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	603b      	str	r3, [r7, #0]
 8005362:	607a      	str	r2, [r7, #4]
 8005364:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005368:	4650      	mov	r0, sl
 800536a:	4659      	mov	r1, fp
 800536c:	f7fa ff88 	bl	8000280 <__aeabi_uldivmod>
 8005370:	4602      	mov	r2, r0
 8005372:	460b      	mov	r3, r1
 8005374:	4613      	mov	r3, r2
 8005376:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800537e:	d308      	bcc.n	8005392 <UART_SetConfig+0x3de>
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005386:	d204      	bcs.n	8005392 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	69ba      	ldr	r2, [r7, #24]
 800538e:	60da      	str	r2, [r3, #12]
 8005390:	e0b6      	b.n	8005500 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005398:	e0b2      	b.n	8005500 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053a2:	d15e      	bne.n	8005462 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80053a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80053a8:	2b08      	cmp	r3, #8
 80053aa:	d828      	bhi.n	80053fe <UART_SetConfig+0x44a>
 80053ac:	a201      	add	r2, pc, #4	; (adr r2, 80053b4 <UART_SetConfig+0x400>)
 80053ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b2:	bf00      	nop
 80053b4:	080053d9 	.word	0x080053d9
 80053b8:	080053e1 	.word	0x080053e1
 80053bc:	080053e9 	.word	0x080053e9
 80053c0:	080053ff 	.word	0x080053ff
 80053c4:	080053ef 	.word	0x080053ef
 80053c8:	080053ff 	.word	0x080053ff
 80053cc:	080053ff 	.word	0x080053ff
 80053d0:	080053ff 	.word	0x080053ff
 80053d4:	080053f7 	.word	0x080053f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053d8:	f7fd fdbe 	bl	8002f58 <HAL_RCC_GetPCLK1Freq>
 80053dc:	61f8      	str	r0, [r7, #28]
        break;
 80053de:	e014      	b.n	800540a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053e0:	f7fd fdd0 	bl	8002f84 <HAL_RCC_GetPCLK2Freq>
 80053e4:	61f8      	str	r0, [r7, #28]
        break;
 80053e6:	e010      	b.n	800540a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053e8:	4b4d      	ldr	r3, [pc, #308]	; (8005520 <UART_SetConfig+0x56c>)
 80053ea:	61fb      	str	r3, [r7, #28]
        break;
 80053ec:	e00d      	b.n	800540a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053ee:	f7fd fd1b 	bl	8002e28 <HAL_RCC_GetSysClockFreq>
 80053f2:	61f8      	str	r0, [r7, #28]
        break;
 80053f4:	e009      	b.n	800540a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053fa:	61fb      	str	r3, [r7, #28]
        break;
 80053fc:	e005      	b.n	800540a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80053fe:	2300      	movs	r3, #0
 8005400:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005408:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d077      	beq.n	8005500 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	005a      	lsls	r2, r3, #1
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	085b      	lsrs	r3, r3, #1
 800541a:	441a      	add	r2, r3
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	fbb2 f3f3 	udiv	r3, r2, r3
 8005424:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	2b0f      	cmp	r3, #15
 800542a:	d916      	bls.n	800545a <UART_SetConfig+0x4a6>
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005432:	d212      	bcs.n	800545a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	b29b      	uxth	r3, r3
 8005438:	f023 030f 	bic.w	r3, r3, #15
 800543c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	085b      	lsrs	r3, r3, #1
 8005442:	b29b      	uxth	r3, r3
 8005444:	f003 0307 	and.w	r3, r3, #7
 8005448:	b29a      	uxth	r2, r3
 800544a:	8afb      	ldrh	r3, [r7, #22]
 800544c:	4313      	orrs	r3, r2
 800544e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	8afa      	ldrh	r2, [r7, #22]
 8005456:	60da      	str	r2, [r3, #12]
 8005458:	e052      	b.n	8005500 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005460:	e04e      	b.n	8005500 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005462:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005466:	2b08      	cmp	r3, #8
 8005468:	d827      	bhi.n	80054ba <UART_SetConfig+0x506>
 800546a:	a201      	add	r2, pc, #4	; (adr r2, 8005470 <UART_SetConfig+0x4bc>)
 800546c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005470:	08005495 	.word	0x08005495
 8005474:	0800549d 	.word	0x0800549d
 8005478:	080054a5 	.word	0x080054a5
 800547c:	080054bb 	.word	0x080054bb
 8005480:	080054ab 	.word	0x080054ab
 8005484:	080054bb 	.word	0x080054bb
 8005488:	080054bb 	.word	0x080054bb
 800548c:	080054bb 	.word	0x080054bb
 8005490:	080054b3 	.word	0x080054b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005494:	f7fd fd60 	bl	8002f58 <HAL_RCC_GetPCLK1Freq>
 8005498:	61f8      	str	r0, [r7, #28]
        break;
 800549a:	e014      	b.n	80054c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800549c:	f7fd fd72 	bl	8002f84 <HAL_RCC_GetPCLK2Freq>
 80054a0:	61f8      	str	r0, [r7, #28]
        break;
 80054a2:	e010      	b.n	80054c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054a4:	4b1e      	ldr	r3, [pc, #120]	; (8005520 <UART_SetConfig+0x56c>)
 80054a6:	61fb      	str	r3, [r7, #28]
        break;
 80054a8:	e00d      	b.n	80054c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054aa:	f7fd fcbd 	bl	8002e28 <HAL_RCC_GetSysClockFreq>
 80054ae:	61f8      	str	r0, [r7, #28]
        break;
 80054b0:	e009      	b.n	80054c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054b6:	61fb      	str	r3, [r7, #28]
        break;
 80054b8:	e005      	b.n	80054c6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80054ba:	2300      	movs	r3, #0
 80054bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80054c4:	bf00      	nop
    }

    if (pclk != 0U)
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d019      	beq.n	8005500 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	085a      	lsrs	r2, r3, #1
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	441a      	add	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	fbb2 f3f3 	udiv	r3, r2, r3
 80054de:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	2b0f      	cmp	r3, #15
 80054e4:	d909      	bls.n	80054fa <UART_SetConfig+0x546>
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054ec:	d205      	bcs.n	80054fa <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	60da      	str	r2, [r3, #12]
 80054f8:	e002      	b.n	8005500 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2200      	movs	r2, #0
 8005504:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2200      	movs	r2, #0
 800550a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800550c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005510:	4618      	mov	r0, r3
 8005512:	3728      	adds	r7, #40	; 0x28
 8005514:	46bd      	mov	sp, r7
 8005516:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800551a:	bf00      	nop
 800551c:	40008000 	.word	0x40008000
 8005520:	00f42400 	.word	0x00f42400

08005524 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005530:	f003 0308 	and.w	r3, r3, #8
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00a      	beq.n	800554e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	430a      	orrs	r2, r1
 800554c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00a      	beq.n	8005570 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	430a      	orrs	r2, r1
 800556e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005574:	f003 0302 	and.w	r3, r3, #2
 8005578:	2b00      	cmp	r3, #0
 800557a:	d00a      	beq.n	8005592 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	430a      	orrs	r2, r1
 8005590:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005596:	f003 0304 	and.w	r3, r3, #4
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00a      	beq.n	80055b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	430a      	orrs	r2, r1
 80055b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b8:	f003 0310 	and.w	r3, r3, #16
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00a      	beq.n	80055d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	430a      	orrs	r2, r1
 80055d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055da:	f003 0320 	and.w	r3, r3, #32
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00a      	beq.n	80055f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	430a      	orrs	r2, r1
 80055f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005600:	2b00      	cmp	r3, #0
 8005602:	d01a      	beq.n	800563a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	430a      	orrs	r2, r1
 8005618:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005622:	d10a      	bne.n	800563a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	430a      	orrs	r2, r1
 8005638:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00a      	beq.n	800565c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	430a      	orrs	r2, r1
 800565a:	605a      	str	r2, [r3, #4]
  }
}
 800565c:	bf00      	nop
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b098      	sub	sp, #96	; 0x60
 800566c:	af02      	add	r7, sp, #8
 800566e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005678:	f7fc fbb6 	bl	8001de8 <HAL_GetTick>
 800567c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0308 	and.w	r3, r3, #8
 8005688:	2b08      	cmp	r3, #8
 800568a:	d12e      	bne.n	80056ea <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800568c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005690:	9300      	str	r3, [sp, #0]
 8005692:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005694:	2200      	movs	r2, #0
 8005696:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 f88c 	bl	80057b8 <UART_WaitOnFlagUntilTimeout>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d021      	beq.n	80056ea <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ae:	e853 3f00 	ldrex	r3, [r3]
 80056b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80056b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056ba:	653b      	str	r3, [r7, #80]	; 0x50
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	461a      	mov	r2, r3
 80056c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056c4:	647b      	str	r3, [r7, #68]	; 0x44
 80056c6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80056ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056cc:	e841 2300 	strex	r3, r2, [r1]
 80056d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80056d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d1e6      	bne.n	80056a6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2220      	movs	r2, #32
 80056dc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e062      	b.n	80057b0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0304 	and.w	r3, r3, #4
 80056f4:	2b04      	cmp	r3, #4
 80056f6:	d149      	bne.n	800578c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056fc:	9300      	str	r3, [sp, #0]
 80056fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005700:	2200      	movs	r2, #0
 8005702:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 f856 	bl	80057b8 <UART_WaitOnFlagUntilTimeout>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d03c      	beq.n	800578c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571a:	e853 3f00 	ldrex	r3, [r3]
 800571e:	623b      	str	r3, [r7, #32]
   return(result);
 8005720:	6a3b      	ldr	r3, [r7, #32]
 8005722:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005726:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	461a      	mov	r2, r3
 800572e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005730:	633b      	str	r3, [r7, #48]	; 0x30
 8005732:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005734:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005736:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005738:	e841 2300 	strex	r3, r2, [r1]
 800573c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800573e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1e6      	bne.n	8005712 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	3308      	adds	r3, #8
 800574a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	e853 3f00 	ldrex	r3, [r3]
 8005752:	60fb      	str	r3, [r7, #12]
   return(result);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f023 0301 	bic.w	r3, r3, #1
 800575a:	64bb      	str	r3, [r7, #72]	; 0x48
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	3308      	adds	r3, #8
 8005762:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005764:	61fa      	str	r2, [r7, #28]
 8005766:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005768:	69b9      	ldr	r1, [r7, #24]
 800576a:	69fa      	ldr	r2, [r7, #28]
 800576c:	e841 2300 	strex	r3, r2, [r1]
 8005770:	617b      	str	r3, [r7, #20]
   return(result);
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1e5      	bne.n	8005744 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2220      	movs	r2, #32
 800577c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e011      	b.n	80057b0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2220      	movs	r2, #32
 8005790:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2220      	movs	r2, #32
 8005796:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3758      	adds	r7, #88	; 0x58
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	603b      	str	r3, [r7, #0]
 80057c4:	4613      	mov	r3, r2
 80057c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057c8:	e049      	b.n	800585e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d0:	d045      	beq.n	800585e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057d2:	f7fc fb09 	bl	8001de8 <HAL_GetTick>
 80057d6:	4602      	mov	r2, r0
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	69ba      	ldr	r2, [r7, #24]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d302      	bcc.n	80057e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d101      	bne.n	80057ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e048      	b.n	800587e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0304 	and.w	r3, r3, #4
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d031      	beq.n	800585e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	69db      	ldr	r3, [r3, #28]
 8005800:	f003 0308 	and.w	r3, r3, #8
 8005804:	2b08      	cmp	r3, #8
 8005806:	d110      	bne.n	800582a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2208      	movs	r2, #8
 800580e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f000 f838 	bl	8005886 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2208      	movs	r2, #8
 800581a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e029      	b.n	800587e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	69db      	ldr	r3, [r3, #28]
 8005830:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005834:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005838:	d111      	bne.n	800585e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005842:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f000 f81e 	bl	8005886 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2220      	movs	r2, #32
 800584e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e00f      	b.n	800587e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	69da      	ldr	r2, [r3, #28]
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	4013      	ands	r3, r2
 8005868:	68ba      	ldr	r2, [r7, #8]
 800586a:	429a      	cmp	r2, r3
 800586c:	bf0c      	ite	eq
 800586e:	2301      	moveq	r3, #1
 8005870:	2300      	movne	r3, #0
 8005872:	b2db      	uxtb	r3, r3
 8005874:	461a      	mov	r2, r3
 8005876:	79fb      	ldrb	r3, [r7, #7]
 8005878:	429a      	cmp	r2, r3
 800587a:	d0a6      	beq.n	80057ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3710      	adds	r7, #16
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}

08005886 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005886:	b480      	push	{r7}
 8005888:	b095      	sub	sp, #84	; 0x54
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005896:	e853 3f00 	ldrex	r3, [r3]
 800589a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800589c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	461a      	mov	r2, r3
 80058aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058ac:	643b      	str	r3, [r7, #64]	; 0x40
 80058ae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80058b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058b4:	e841 2300 	strex	r3, r2, [r1]
 80058b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1e6      	bne.n	800588e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	3308      	adds	r3, #8
 80058c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c8:	6a3b      	ldr	r3, [r7, #32]
 80058ca:	e853 3f00 	ldrex	r3, [r3]
 80058ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	f023 0301 	bic.w	r3, r3, #1
 80058d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	3308      	adds	r3, #8
 80058de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058e8:	e841 2300 	strex	r3, r2, [r1]
 80058ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d1e5      	bne.n	80058c0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d118      	bne.n	800592e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	e853 3f00 	ldrex	r3, [r3]
 8005908:	60bb      	str	r3, [r7, #8]
   return(result);
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	f023 0310 	bic.w	r3, r3, #16
 8005910:	647b      	str	r3, [r7, #68]	; 0x44
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	461a      	mov	r2, r3
 8005918:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800591a:	61bb      	str	r3, [r7, #24]
 800591c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591e:	6979      	ldr	r1, [r7, #20]
 8005920:	69ba      	ldr	r2, [r7, #24]
 8005922:	e841 2300 	strex	r3, r2, [r1]
 8005926:	613b      	str	r3, [r7, #16]
   return(result);
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1e6      	bne.n	80058fc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2220      	movs	r2, #32
 8005932:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005942:	bf00      	nop
 8005944:	3754      	adds	r7, #84	; 0x54
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
	...

08005950 <exit>:
 8005950:	b508      	push	{r3, lr}
 8005952:	4b06      	ldr	r3, [pc, #24]	; (800596c <exit+0x1c>)
 8005954:	4604      	mov	r4, r0
 8005956:	b113      	cbz	r3, 800595e <exit+0xe>
 8005958:	2100      	movs	r1, #0
 800595a:	f3af 8000 	nop.w
 800595e:	4b04      	ldr	r3, [pc, #16]	; (8005970 <exit+0x20>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	b103      	cbz	r3, 8005966 <exit+0x16>
 8005964:	4798      	blx	r3
 8005966:	4620      	mov	r0, r4
 8005968:	f7fc f952 	bl	8001c10 <_exit>
 800596c:	00000000 	.word	0x00000000
 8005970:	200004b4 	.word	0x200004b4

08005974 <malloc>:
 8005974:	4b02      	ldr	r3, [pc, #8]	; (8005980 <malloc+0xc>)
 8005976:	4601      	mov	r1, r0
 8005978:	6818      	ldr	r0, [r3, #0]
 800597a:	f000 b823 	b.w	80059c4 <_malloc_r>
 800597e:	bf00      	nop
 8005980:	200000c0 	.word	0x200000c0

08005984 <sbrk_aligned>:
 8005984:	b570      	push	{r4, r5, r6, lr}
 8005986:	4e0e      	ldr	r6, [pc, #56]	; (80059c0 <sbrk_aligned+0x3c>)
 8005988:	460c      	mov	r4, r1
 800598a:	6831      	ldr	r1, [r6, #0]
 800598c:	4605      	mov	r5, r0
 800598e:	b911      	cbnz	r1, 8005996 <sbrk_aligned+0x12>
 8005990:	f000 f8cc 	bl	8005b2c <_sbrk_r>
 8005994:	6030      	str	r0, [r6, #0]
 8005996:	4621      	mov	r1, r4
 8005998:	4628      	mov	r0, r5
 800599a:	f000 f8c7 	bl	8005b2c <_sbrk_r>
 800599e:	1c43      	adds	r3, r0, #1
 80059a0:	d00a      	beq.n	80059b8 <sbrk_aligned+0x34>
 80059a2:	1cc4      	adds	r4, r0, #3
 80059a4:	f024 0403 	bic.w	r4, r4, #3
 80059a8:	42a0      	cmp	r0, r4
 80059aa:	d007      	beq.n	80059bc <sbrk_aligned+0x38>
 80059ac:	1a21      	subs	r1, r4, r0
 80059ae:	4628      	mov	r0, r5
 80059b0:	f000 f8bc 	bl	8005b2c <_sbrk_r>
 80059b4:	3001      	adds	r0, #1
 80059b6:	d101      	bne.n	80059bc <sbrk_aligned+0x38>
 80059b8:	f04f 34ff 	mov.w	r4, #4294967295
 80059bc:	4620      	mov	r0, r4
 80059be:	bd70      	pop	{r4, r5, r6, pc}
 80059c0:	20000378 	.word	0x20000378

080059c4 <_malloc_r>:
 80059c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059c8:	1ccd      	adds	r5, r1, #3
 80059ca:	f025 0503 	bic.w	r5, r5, #3
 80059ce:	3508      	adds	r5, #8
 80059d0:	2d0c      	cmp	r5, #12
 80059d2:	bf38      	it	cc
 80059d4:	250c      	movcc	r5, #12
 80059d6:	2d00      	cmp	r5, #0
 80059d8:	4607      	mov	r7, r0
 80059da:	db01      	blt.n	80059e0 <_malloc_r+0x1c>
 80059dc:	42a9      	cmp	r1, r5
 80059de:	d905      	bls.n	80059ec <_malloc_r+0x28>
 80059e0:	230c      	movs	r3, #12
 80059e2:	603b      	str	r3, [r7, #0]
 80059e4:	2600      	movs	r6, #0
 80059e6:	4630      	mov	r0, r6
 80059e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005ac0 <_malloc_r+0xfc>
 80059f0:	f000 f868 	bl	8005ac4 <__malloc_lock>
 80059f4:	f8d8 3000 	ldr.w	r3, [r8]
 80059f8:	461c      	mov	r4, r3
 80059fa:	bb5c      	cbnz	r4, 8005a54 <_malloc_r+0x90>
 80059fc:	4629      	mov	r1, r5
 80059fe:	4638      	mov	r0, r7
 8005a00:	f7ff ffc0 	bl	8005984 <sbrk_aligned>
 8005a04:	1c43      	adds	r3, r0, #1
 8005a06:	4604      	mov	r4, r0
 8005a08:	d155      	bne.n	8005ab6 <_malloc_r+0xf2>
 8005a0a:	f8d8 4000 	ldr.w	r4, [r8]
 8005a0e:	4626      	mov	r6, r4
 8005a10:	2e00      	cmp	r6, #0
 8005a12:	d145      	bne.n	8005aa0 <_malloc_r+0xdc>
 8005a14:	2c00      	cmp	r4, #0
 8005a16:	d048      	beq.n	8005aaa <_malloc_r+0xe6>
 8005a18:	6823      	ldr	r3, [r4, #0]
 8005a1a:	4631      	mov	r1, r6
 8005a1c:	4638      	mov	r0, r7
 8005a1e:	eb04 0903 	add.w	r9, r4, r3
 8005a22:	f000 f883 	bl	8005b2c <_sbrk_r>
 8005a26:	4581      	cmp	r9, r0
 8005a28:	d13f      	bne.n	8005aaa <_malloc_r+0xe6>
 8005a2a:	6821      	ldr	r1, [r4, #0]
 8005a2c:	1a6d      	subs	r5, r5, r1
 8005a2e:	4629      	mov	r1, r5
 8005a30:	4638      	mov	r0, r7
 8005a32:	f7ff ffa7 	bl	8005984 <sbrk_aligned>
 8005a36:	3001      	adds	r0, #1
 8005a38:	d037      	beq.n	8005aaa <_malloc_r+0xe6>
 8005a3a:	6823      	ldr	r3, [r4, #0]
 8005a3c:	442b      	add	r3, r5
 8005a3e:	6023      	str	r3, [r4, #0]
 8005a40:	f8d8 3000 	ldr.w	r3, [r8]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d038      	beq.n	8005aba <_malloc_r+0xf6>
 8005a48:	685a      	ldr	r2, [r3, #4]
 8005a4a:	42a2      	cmp	r2, r4
 8005a4c:	d12b      	bne.n	8005aa6 <_malloc_r+0xe2>
 8005a4e:	2200      	movs	r2, #0
 8005a50:	605a      	str	r2, [r3, #4]
 8005a52:	e00f      	b.n	8005a74 <_malloc_r+0xb0>
 8005a54:	6822      	ldr	r2, [r4, #0]
 8005a56:	1b52      	subs	r2, r2, r5
 8005a58:	d41f      	bmi.n	8005a9a <_malloc_r+0xd6>
 8005a5a:	2a0b      	cmp	r2, #11
 8005a5c:	d917      	bls.n	8005a8e <_malloc_r+0xca>
 8005a5e:	1961      	adds	r1, r4, r5
 8005a60:	42a3      	cmp	r3, r4
 8005a62:	6025      	str	r5, [r4, #0]
 8005a64:	bf18      	it	ne
 8005a66:	6059      	strne	r1, [r3, #4]
 8005a68:	6863      	ldr	r3, [r4, #4]
 8005a6a:	bf08      	it	eq
 8005a6c:	f8c8 1000 	streq.w	r1, [r8]
 8005a70:	5162      	str	r2, [r4, r5]
 8005a72:	604b      	str	r3, [r1, #4]
 8005a74:	4638      	mov	r0, r7
 8005a76:	f104 060b 	add.w	r6, r4, #11
 8005a7a:	f000 f829 	bl	8005ad0 <__malloc_unlock>
 8005a7e:	f026 0607 	bic.w	r6, r6, #7
 8005a82:	1d23      	adds	r3, r4, #4
 8005a84:	1af2      	subs	r2, r6, r3
 8005a86:	d0ae      	beq.n	80059e6 <_malloc_r+0x22>
 8005a88:	1b9b      	subs	r3, r3, r6
 8005a8a:	50a3      	str	r3, [r4, r2]
 8005a8c:	e7ab      	b.n	80059e6 <_malloc_r+0x22>
 8005a8e:	42a3      	cmp	r3, r4
 8005a90:	6862      	ldr	r2, [r4, #4]
 8005a92:	d1dd      	bne.n	8005a50 <_malloc_r+0x8c>
 8005a94:	f8c8 2000 	str.w	r2, [r8]
 8005a98:	e7ec      	b.n	8005a74 <_malloc_r+0xb0>
 8005a9a:	4623      	mov	r3, r4
 8005a9c:	6864      	ldr	r4, [r4, #4]
 8005a9e:	e7ac      	b.n	80059fa <_malloc_r+0x36>
 8005aa0:	4634      	mov	r4, r6
 8005aa2:	6876      	ldr	r6, [r6, #4]
 8005aa4:	e7b4      	b.n	8005a10 <_malloc_r+0x4c>
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	e7cc      	b.n	8005a44 <_malloc_r+0x80>
 8005aaa:	230c      	movs	r3, #12
 8005aac:	603b      	str	r3, [r7, #0]
 8005aae:	4638      	mov	r0, r7
 8005ab0:	f000 f80e 	bl	8005ad0 <__malloc_unlock>
 8005ab4:	e797      	b.n	80059e6 <_malloc_r+0x22>
 8005ab6:	6025      	str	r5, [r4, #0]
 8005ab8:	e7dc      	b.n	8005a74 <_malloc_r+0xb0>
 8005aba:	605b      	str	r3, [r3, #4]
 8005abc:	deff      	udf	#255	; 0xff
 8005abe:	bf00      	nop
 8005ac0:	20000374 	.word	0x20000374

08005ac4 <__malloc_lock>:
 8005ac4:	4801      	ldr	r0, [pc, #4]	; (8005acc <__malloc_lock+0x8>)
 8005ac6:	f000 b86b 	b.w	8005ba0 <__retarget_lock_acquire_recursive>
 8005aca:	bf00      	nop
 8005acc:	200004bc 	.word	0x200004bc

08005ad0 <__malloc_unlock>:
 8005ad0:	4801      	ldr	r0, [pc, #4]	; (8005ad8 <__malloc_unlock+0x8>)
 8005ad2:	f000 b866 	b.w	8005ba2 <__retarget_lock_release_recursive>
 8005ad6:	bf00      	nop
 8005ad8:	200004bc 	.word	0x200004bc

08005adc <siprintf>:
 8005adc:	b40e      	push	{r1, r2, r3}
 8005ade:	b500      	push	{lr}
 8005ae0:	b09c      	sub	sp, #112	; 0x70
 8005ae2:	ab1d      	add	r3, sp, #116	; 0x74
 8005ae4:	9002      	str	r0, [sp, #8]
 8005ae6:	9006      	str	r0, [sp, #24]
 8005ae8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005aec:	4809      	ldr	r0, [pc, #36]	; (8005b14 <siprintf+0x38>)
 8005aee:	9107      	str	r1, [sp, #28]
 8005af0:	9104      	str	r1, [sp, #16]
 8005af2:	4909      	ldr	r1, [pc, #36]	; (8005b18 <siprintf+0x3c>)
 8005af4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005af8:	9105      	str	r1, [sp, #20]
 8005afa:	6800      	ldr	r0, [r0, #0]
 8005afc:	9301      	str	r3, [sp, #4]
 8005afe:	a902      	add	r1, sp, #8
 8005b00:	f000 f904 	bl	8005d0c <_svfiprintf_r>
 8005b04:	9b02      	ldr	r3, [sp, #8]
 8005b06:	2200      	movs	r2, #0
 8005b08:	701a      	strb	r2, [r3, #0]
 8005b0a:	b01c      	add	sp, #112	; 0x70
 8005b0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b10:	b003      	add	sp, #12
 8005b12:	4770      	bx	lr
 8005b14:	200000c0 	.word	0x200000c0
 8005b18:	ffff0208 	.word	0xffff0208

08005b1c <memset>:
 8005b1c:	4402      	add	r2, r0
 8005b1e:	4603      	mov	r3, r0
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d100      	bne.n	8005b26 <memset+0xa>
 8005b24:	4770      	bx	lr
 8005b26:	f803 1b01 	strb.w	r1, [r3], #1
 8005b2a:	e7f9      	b.n	8005b20 <memset+0x4>

08005b2c <_sbrk_r>:
 8005b2c:	b538      	push	{r3, r4, r5, lr}
 8005b2e:	4d06      	ldr	r5, [pc, #24]	; (8005b48 <_sbrk_r+0x1c>)
 8005b30:	2300      	movs	r3, #0
 8005b32:	4604      	mov	r4, r0
 8005b34:	4608      	mov	r0, r1
 8005b36:	602b      	str	r3, [r5, #0]
 8005b38:	f7fc f874 	bl	8001c24 <_sbrk>
 8005b3c:	1c43      	adds	r3, r0, #1
 8005b3e:	d102      	bne.n	8005b46 <_sbrk_r+0x1a>
 8005b40:	682b      	ldr	r3, [r5, #0]
 8005b42:	b103      	cbz	r3, 8005b46 <_sbrk_r+0x1a>
 8005b44:	6023      	str	r3, [r4, #0]
 8005b46:	bd38      	pop	{r3, r4, r5, pc}
 8005b48:	200004b8 	.word	0x200004b8

08005b4c <__errno>:
 8005b4c:	4b01      	ldr	r3, [pc, #4]	; (8005b54 <__errno+0x8>)
 8005b4e:	6818      	ldr	r0, [r3, #0]
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	200000c0 	.word	0x200000c0

08005b58 <__libc_init_array>:
 8005b58:	b570      	push	{r4, r5, r6, lr}
 8005b5a:	4d0d      	ldr	r5, [pc, #52]	; (8005b90 <__libc_init_array+0x38>)
 8005b5c:	4c0d      	ldr	r4, [pc, #52]	; (8005b94 <__libc_init_array+0x3c>)
 8005b5e:	1b64      	subs	r4, r4, r5
 8005b60:	10a4      	asrs	r4, r4, #2
 8005b62:	2600      	movs	r6, #0
 8005b64:	42a6      	cmp	r6, r4
 8005b66:	d109      	bne.n	8005b7c <__libc_init_array+0x24>
 8005b68:	4d0b      	ldr	r5, [pc, #44]	; (8005b98 <__libc_init_array+0x40>)
 8005b6a:	4c0c      	ldr	r4, [pc, #48]	; (8005b9c <__libc_init_array+0x44>)
 8005b6c:	f000 fbae 	bl	80062cc <_init>
 8005b70:	1b64      	subs	r4, r4, r5
 8005b72:	10a4      	asrs	r4, r4, #2
 8005b74:	2600      	movs	r6, #0
 8005b76:	42a6      	cmp	r6, r4
 8005b78:	d105      	bne.n	8005b86 <__libc_init_array+0x2e>
 8005b7a:	bd70      	pop	{r4, r5, r6, pc}
 8005b7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b80:	4798      	blx	r3
 8005b82:	3601      	adds	r6, #1
 8005b84:	e7ee      	b.n	8005b64 <__libc_init_array+0xc>
 8005b86:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b8a:	4798      	blx	r3
 8005b8c:	3601      	adds	r6, #1
 8005b8e:	e7f2      	b.n	8005b76 <__libc_init_array+0x1e>
 8005b90:	08006390 	.word	0x08006390
 8005b94:	08006390 	.word	0x08006390
 8005b98:	08006390 	.word	0x08006390
 8005b9c:	08006394 	.word	0x08006394

08005ba0 <__retarget_lock_acquire_recursive>:
 8005ba0:	4770      	bx	lr

08005ba2 <__retarget_lock_release_recursive>:
 8005ba2:	4770      	bx	lr

08005ba4 <memcpy>:
 8005ba4:	440a      	add	r2, r1
 8005ba6:	4291      	cmp	r1, r2
 8005ba8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005bac:	d100      	bne.n	8005bb0 <memcpy+0xc>
 8005bae:	4770      	bx	lr
 8005bb0:	b510      	push	{r4, lr}
 8005bb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bba:	4291      	cmp	r1, r2
 8005bbc:	d1f9      	bne.n	8005bb2 <memcpy+0xe>
 8005bbe:	bd10      	pop	{r4, pc}

08005bc0 <_free_r>:
 8005bc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005bc2:	2900      	cmp	r1, #0
 8005bc4:	d044      	beq.n	8005c50 <_free_r+0x90>
 8005bc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bca:	9001      	str	r0, [sp, #4]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f1a1 0404 	sub.w	r4, r1, #4
 8005bd2:	bfb8      	it	lt
 8005bd4:	18e4      	addlt	r4, r4, r3
 8005bd6:	f7ff ff75 	bl	8005ac4 <__malloc_lock>
 8005bda:	4a1e      	ldr	r2, [pc, #120]	; (8005c54 <_free_r+0x94>)
 8005bdc:	9801      	ldr	r0, [sp, #4]
 8005bde:	6813      	ldr	r3, [r2, #0]
 8005be0:	b933      	cbnz	r3, 8005bf0 <_free_r+0x30>
 8005be2:	6063      	str	r3, [r4, #4]
 8005be4:	6014      	str	r4, [r2, #0]
 8005be6:	b003      	add	sp, #12
 8005be8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005bec:	f7ff bf70 	b.w	8005ad0 <__malloc_unlock>
 8005bf0:	42a3      	cmp	r3, r4
 8005bf2:	d908      	bls.n	8005c06 <_free_r+0x46>
 8005bf4:	6825      	ldr	r5, [r4, #0]
 8005bf6:	1961      	adds	r1, r4, r5
 8005bf8:	428b      	cmp	r3, r1
 8005bfa:	bf01      	itttt	eq
 8005bfc:	6819      	ldreq	r1, [r3, #0]
 8005bfe:	685b      	ldreq	r3, [r3, #4]
 8005c00:	1949      	addeq	r1, r1, r5
 8005c02:	6021      	streq	r1, [r4, #0]
 8005c04:	e7ed      	b.n	8005be2 <_free_r+0x22>
 8005c06:	461a      	mov	r2, r3
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	b10b      	cbz	r3, 8005c10 <_free_r+0x50>
 8005c0c:	42a3      	cmp	r3, r4
 8005c0e:	d9fa      	bls.n	8005c06 <_free_r+0x46>
 8005c10:	6811      	ldr	r1, [r2, #0]
 8005c12:	1855      	adds	r5, r2, r1
 8005c14:	42a5      	cmp	r5, r4
 8005c16:	d10b      	bne.n	8005c30 <_free_r+0x70>
 8005c18:	6824      	ldr	r4, [r4, #0]
 8005c1a:	4421      	add	r1, r4
 8005c1c:	1854      	adds	r4, r2, r1
 8005c1e:	42a3      	cmp	r3, r4
 8005c20:	6011      	str	r1, [r2, #0]
 8005c22:	d1e0      	bne.n	8005be6 <_free_r+0x26>
 8005c24:	681c      	ldr	r4, [r3, #0]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	6053      	str	r3, [r2, #4]
 8005c2a:	440c      	add	r4, r1
 8005c2c:	6014      	str	r4, [r2, #0]
 8005c2e:	e7da      	b.n	8005be6 <_free_r+0x26>
 8005c30:	d902      	bls.n	8005c38 <_free_r+0x78>
 8005c32:	230c      	movs	r3, #12
 8005c34:	6003      	str	r3, [r0, #0]
 8005c36:	e7d6      	b.n	8005be6 <_free_r+0x26>
 8005c38:	6825      	ldr	r5, [r4, #0]
 8005c3a:	1961      	adds	r1, r4, r5
 8005c3c:	428b      	cmp	r3, r1
 8005c3e:	bf04      	itt	eq
 8005c40:	6819      	ldreq	r1, [r3, #0]
 8005c42:	685b      	ldreq	r3, [r3, #4]
 8005c44:	6063      	str	r3, [r4, #4]
 8005c46:	bf04      	itt	eq
 8005c48:	1949      	addeq	r1, r1, r5
 8005c4a:	6021      	streq	r1, [r4, #0]
 8005c4c:	6054      	str	r4, [r2, #4]
 8005c4e:	e7ca      	b.n	8005be6 <_free_r+0x26>
 8005c50:	b003      	add	sp, #12
 8005c52:	bd30      	pop	{r4, r5, pc}
 8005c54:	20000374 	.word	0x20000374

08005c58 <__ssputs_r>:
 8005c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c5c:	688e      	ldr	r6, [r1, #8]
 8005c5e:	461f      	mov	r7, r3
 8005c60:	42be      	cmp	r6, r7
 8005c62:	680b      	ldr	r3, [r1, #0]
 8005c64:	4682      	mov	sl, r0
 8005c66:	460c      	mov	r4, r1
 8005c68:	4690      	mov	r8, r2
 8005c6a:	d82c      	bhi.n	8005cc6 <__ssputs_r+0x6e>
 8005c6c:	898a      	ldrh	r2, [r1, #12]
 8005c6e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005c72:	d026      	beq.n	8005cc2 <__ssputs_r+0x6a>
 8005c74:	6965      	ldr	r5, [r4, #20]
 8005c76:	6909      	ldr	r1, [r1, #16]
 8005c78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c7c:	eba3 0901 	sub.w	r9, r3, r1
 8005c80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005c84:	1c7b      	adds	r3, r7, #1
 8005c86:	444b      	add	r3, r9
 8005c88:	106d      	asrs	r5, r5, #1
 8005c8a:	429d      	cmp	r5, r3
 8005c8c:	bf38      	it	cc
 8005c8e:	461d      	movcc	r5, r3
 8005c90:	0553      	lsls	r3, r2, #21
 8005c92:	d527      	bpl.n	8005ce4 <__ssputs_r+0x8c>
 8005c94:	4629      	mov	r1, r5
 8005c96:	f7ff fe95 	bl	80059c4 <_malloc_r>
 8005c9a:	4606      	mov	r6, r0
 8005c9c:	b360      	cbz	r0, 8005cf8 <__ssputs_r+0xa0>
 8005c9e:	6921      	ldr	r1, [r4, #16]
 8005ca0:	464a      	mov	r2, r9
 8005ca2:	f7ff ff7f 	bl	8005ba4 <memcpy>
 8005ca6:	89a3      	ldrh	r3, [r4, #12]
 8005ca8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cb0:	81a3      	strh	r3, [r4, #12]
 8005cb2:	6126      	str	r6, [r4, #16]
 8005cb4:	6165      	str	r5, [r4, #20]
 8005cb6:	444e      	add	r6, r9
 8005cb8:	eba5 0509 	sub.w	r5, r5, r9
 8005cbc:	6026      	str	r6, [r4, #0]
 8005cbe:	60a5      	str	r5, [r4, #8]
 8005cc0:	463e      	mov	r6, r7
 8005cc2:	42be      	cmp	r6, r7
 8005cc4:	d900      	bls.n	8005cc8 <__ssputs_r+0x70>
 8005cc6:	463e      	mov	r6, r7
 8005cc8:	6820      	ldr	r0, [r4, #0]
 8005cca:	4632      	mov	r2, r6
 8005ccc:	4641      	mov	r1, r8
 8005cce:	f000 faab 	bl	8006228 <memmove>
 8005cd2:	68a3      	ldr	r3, [r4, #8]
 8005cd4:	1b9b      	subs	r3, r3, r6
 8005cd6:	60a3      	str	r3, [r4, #8]
 8005cd8:	6823      	ldr	r3, [r4, #0]
 8005cda:	4433      	add	r3, r6
 8005cdc:	6023      	str	r3, [r4, #0]
 8005cde:	2000      	movs	r0, #0
 8005ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ce4:	462a      	mov	r2, r5
 8005ce6:	f000 fab9 	bl	800625c <_realloc_r>
 8005cea:	4606      	mov	r6, r0
 8005cec:	2800      	cmp	r0, #0
 8005cee:	d1e0      	bne.n	8005cb2 <__ssputs_r+0x5a>
 8005cf0:	6921      	ldr	r1, [r4, #16]
 8005cf2:	4650      	mov	r0, sl
 8005cf4:	f7ff ff64 	bl	8005bc0 <_free_r>
 8005cf8:	230c      	movs	r3, #12
 8005cfa:	f8ca 3000 	str.w	r3, [sl]
 8005cfe:	89a3      	ldrh	r3, [r4, #12]
 8005d00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d04:	81a3      	strh	r3, [r4, #12]
 8005d06:	f04f 30ff 	mov.w	r0, #4294967295
 8005d0a:	e7e9      	b.n	8005ce0 <__ssputs_r+0x88>

08005d0c <_svfiprintf_r>:
 8005d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d10:	4698      	mov	r8, r3
 8005d12:	898b      	ldrh	r3, [r1, #12]
 8005d14:	061b      	lsls	r3, r3, #24
 8005d16:	b09d      	sub	sp, #116	; 0x74
 8005d18:	4607      	mov	r7, r0
 8005d1a:	460d      	mov	r5, r1
 8005d1c:	4614      	mov	r4, r2
 8005d1e:	d50e      	bpl.n	8005d3e <_svfiprintf_r+0x32>
 8005d20:	690b      	ldr	r3, [r1, #16]
 8005d22:	b963      	cbnz	r3, 8005d3e <_svfiprintf_r+0x32>
 8005d24:	2140      	movs	r1, #64	; 0x40
 8005d26:	f7ff fe4d 	bl	80059c4 <_malloc_r>
 8005d2a:	6028      	str	r0, [r5, #0]
 8005d2c:	6128      	str	r0, [r5, #16]
 8005d2e:	b920      	cbnz	r0, 8005d3a <_svfiprintf_r+0x2e>
 8005d30:	230c      	movs	r3, #12
 8005d32:	603b      	str	r3, [r7, #0]
 8005d34:	f04f 30ff 	mov.w	r0, #4294967295
 8005d38:	e0d0      	b.n	8005edc <_svfiprintf_r+0x1d0>
 8005d3a:	2340      	movs	r3, #64	; 0x40
 8005d3c:	616b      	str	r3, [r5, #20]
 8005d3e:	2300      	movs	r3, #0
 8005d40:	9309      	str	r3, [sp, #36]	; 0x24
 8005d42:	2320      	movs	r3, #32
 8005d44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d48:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d4c:	2330      	movs	r3, #48	; 0x30
 8005d4e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005ef4 <_svfiprintf_r+0x1e8>
 8005d52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d56:	f04f 0901 	mov.w	r9, #1
 8005d5a:	4623      	mov	r3, r4
 8005d5c:	469a      	mov	sl, r3
 8005d5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d62:	b10a      	cbz	r2, 8005d68 <_svfiprintf_r+0x5c>
 8005d64:	2a25      	cmp	r2, #37	; 0x25
 8005d66:	d1f9      	bne.n	8005d5c <_svfiprintf_r+0x50>
 8005d68:	ebba 0b04 	subs.w	fp, sl, r4
 8005d6c:	d00b      	beq.n	8005d86 <_svfiprintf_r+0x7a>
 8005d6e:	465b      	mov	r3, fp
 8005d70:	4622      	mov	r2, r4
 8005d72:	4629      	mov	r1, r5
 8005d74:	4638      	mov	r0, r7
 8005d76:	f7ff ff6f 	bl	8005c58 <__ssputs_r>
 8005d7a:	3001      	adds	r0, #1
 8005d7c:	f000 80a9 	beq.w	8005ed2 <_svfiprintf_r+0x1c6>
 8005d80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d82:	445a      	add	r2, fp
 8005d84:	9209      	str	r2, [sp, #36]	; 0x24
 8005d86:	f89a 3000 	ldrb.w	r3, [sl]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f000 80a1 	beq.w	8005ed2 <_svfiprintf_r+0x1c6>
 8005d90:	2300      	movs	r3, #0
 8005d92:	f04f 32ff 	mov.w	r2, #4294967295
 8005d96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d9a:	f10a 0a01 	add.w	sl, sl, #1
 8005d9e:	9304      	str	r3, [sp, #16]
 8005da0:	9307      	str	r3, [sp, #28]
 8005da2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005da6:	931a      	str	r3, [sp, #104]	; 0x68
 8005da8:	4654      	mov	r4, sl
 8005daa:	2205      	movs	r2, #5
 8005dac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005db0:	4850      	ldr	r0, [pc, #320]	; (8005ef4 <_svfiprintf_r+0x1e8>)
 8005db2:	f7fa fa15 	bl	80001e0 <memchr>
 8005db6:	9a04      	ldr	r2, [sp, #16]
 8005db8:	b9d8      	cbnz	r0, 8005df2 <_svfiprintf_r+0xe6>
 8005dba:	06d0      	lsls	r0, r2, #27
 8005dbc:	bf44      	itt	mi
 8005dbe:	2320      	movmi	r3, #32
 8005dc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005dc4:	0711      	lsls	r1, r2, #28
 8005dc6:	bf44      	itt	mi
 8005dc8:	232b      	movmi	r3, #43	; 0x2b
 8005dca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005dce:	f89a 3000 	ldrb.w	r3, [sl]
 8005dd2:	2b2a      	cmp	r3, #42	; 0x2a
 8005dd4:	d015      	beq.n	8005e02 <_svfiprintf_r+0xf6>
 8005dd6:	9a07      	ldr	r2, [sp, #28]
 8005dd8:	4654      	mov	r4, sl
 8005dda:	2000      	movs	r0, #0
 8005ddc:	f04f 0c0a 	mov.w	ip, #10
 8005de0:	4621      	mov	r1, r4
 8005de2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005de6:	3b30      	subs	r3, #48	; 0x30
 8005de8:	2b09      	cmp	r3, #9
 8005dea:	d94d      	bls.n	8005e88 <_svfiprintf_r+0x17c>
 8005dec:	b1b0      	cbz	r0, 8005e1c <_svfiprintf_r+0x110>
 8005dee:	9207      	str	r2, [sp, #28]
 8005df0:	e014      	b.n	8005e1c <_svfiprintf_r+0x110>
 8005df2:	eba0 0308 	sub.w	r3, r0, r8
 8005df6:	fa09 f303 	lsl.w	r3, r9, r3
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	9304      	str	r3, [sp, #16]
 8005dfe:	46a2      	mov	sl, r4
 8005e00:	e7d2      	b.n	8005da8 <_svfiprintf_r+0x9c>
 8005e02:	9b03      	ldr	r3, [sp, #12]
 8005e04:	1d19      	adds	r1, r3, #4
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	9103      	str	r1, [sp, #12]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	bfbb      	ittet	lt
 8005e0e:	425b      	neglt	r3, r3
 8005e10:	f042 0202 	orrlt.w	r2, r2, #2
 8005e14:	9307      	strge	r3, [sp, #28]
 8005e16:	9307      	strlt	r3, [sp, #28]
 8005e18:	bfb8      	it	lt
 8005e1a:	9204      	strlt	r2, [sp, #16]
 8005e1c:	7823      	ldrb	r3, [r4, #0]
 8005e1e:	2b2e      	cmp	r3, #46	; 0x2e
 8005e20:	d10c      	bne.n	8005e3c <_svfiprintf_r+0x130>
 8005e22:	7863      	ldrb	r3, [r4, #1]
 8005e24:	2b2a      	cmp	r3, #42	; 0x2a
 8005e26:	d134      	bne.n	8005e92 <_svfiprintf_r+0x186>
 8005e28:	9b03      	ldr	r3, [sp, #12]
 8005e2a:	1d1a      	adds	r2, r3, #4
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	9203      	str	r2, [sp, #12]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	bfb8      	it	lt
 8005e34:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e38:	3402      	adds	r4, #2
 8005e3a:	9305      	str	r3, [sp, #20]
 8005e3c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005f04 <_svfiprintf_r+0x1f8>
 8005e40:	7821      	ldrb	r1, [r4, #0]
 8005e42:	2203      	movs	r2, #3
 8005e44:	4650      	mov	r0, sl
 8005e46:	f7fa f9cb 	bl	80001e0 <memchr>
 8005e4a:	b138      	cbz	r0, 8005e5c <_svfiprintf_r+0x150>
 8005e4c:	9b04      	ldr	r3, [sp, #16]
 8005e4e:	eba0 000a 	sub.w	r0, r0, sl
 8005e52:	2240      	movs	r2, #64	; 0x40
 8005e54:	4082      	lsls	r2, r0
 8005e56:	4313      	orrs	r3, r2
 8005e58:	3401      	adds	r4, #1
 8005e5a:	9304      	str	r3, [sp, #16]
 8005e5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e60:	4825      	ldr	r0, [pc, #148]	; (8005ef8 <_svfiprintf_r+0x1ec>)
 8005e62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e66:	2206      	movs	r2, #6
 8005e68:	f7fa f9ba 	bl	80001e0 <memchr>
 8005e6c:	2800      	cmp	r0, #0
 8005e6e:	d038      	beq.n	8005ee2 <_svfiprintf_r+0x1d6>
 8005e70:	4b22      	ldr	r3, [pc, #136]	; (8005efc <_svfiprintf_r+0x1f0>)
 8005e72:	bb1b      	cbnz	r3, 8005ebc <_svfiprintf_r+0x1b0>
 8005e74:	9b03      	ldr	r3, [sp, #12]
 8005e76:	3307      	adds	r3, #7
 8005e78:	f023 0307 	bic.w	r3, r3, #7
 8005e7c:	3308      	adds	r3, #8
 8005e7e:	9303      	str	r3, [sp, #12]
 8005e80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e82:	4433      	add	r3, r6
 8005e84:	9309      	str	r3, [sp, #36]	; 0x24
 8005e86:	e768      	b.n	8005d5a <_svfiprintf_r+0x4e>
 8005e88:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e8c:	460c      	mov	r4, r1
 8005e8e:	2001      	movs	r0, #1
 8005e90:	e7a6      	b.n	8005de0 <_svfiprintf_r+0xd4>
 8005e92:	2300      	movs	r3, #0
 8005e94:	3401      	adds	r4, #1
 8005e96:	9305      	str	r3, [sp, #20]
 8005e98:	4619      	mov	r1, r3
 8005e9a:	f04f 0c0a 	mov.w	ip, #10
 8005e9e:	4620      	mov	r0, r4
 8005ea0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ea4:	3a30      	subs	r2, #48	; 0x30
 8005ea6:	2a09      	cmp	r2, #9
 8005ea8:	d903      	bls.n	8005eb2 <_svfiprintf_r+0x1a6>
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d0c6      	beq.n	8005e3c <_svfiprintf_r+0x130>
 8005eae:	9105      	str	r1, [sp, #20]
 8005eb0:	e7c4      	b.n	8005e3c <_svfiprintf_r+0x130>
 8005eb2:	fb0c 2101 	mla	r1, ip, r1, r2
 8005eb6:	4604      	mov	r4, r0
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e7f0      	b.n	8005e9e <_svfiprintf_r+0x192>
 8005ebc:	ab03      	add	r3, sp, #12
 8005ebe:	9300      	str	r3, [sp, #0]
 8005ec0:	462a      	mov	r2, r5
 8005ec2:	4b0f      	ldr	r3, [pc, #60]	; (8005f00 <_svfiprintf_r+0x1f4>)
 8005ec4:	a904      	add	r1, sp, #16
 8005ec6:	4638      	mov	r0, r7
 8005ec8:	f3af 8000 	nop.w
 8005ecc:	1c42      	adds	r2, r0, #1
 8005ece:	4606      	mov	r6, r0
 8005ed0:	d1d6      	bne.n	8005e80 <_svfiprintf_r+0x174>
 8005ed2:	89ab      	ldrh	r3, [r5, #12]
 8005ed4:	065b      	lsls	r3, r3, #25
 8005ed6:	f53f af2d 	bmi.w	8005d34 <_svfiprintf_r+0x28>
 8005eda:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005edc:	b01d      	add	sp, #116	; 0x74
 8005ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ee2:	ab03      	add	r3, sp, #12
 8005ee4:	9300      	str	r3, [sp, #0]
 8005ee6:	462a      	mov	r2, r5
 8005ee8:	4b05      	ldr	r3, [pc, #20]	; (8005f00 <_svfiprintf_r+0x1f4>)
 8005eea:	a904      	add	r1, sp, #16
 8005eec:	4638      	mov	r0, r7
 8005eee:	f000 f879 	bl	8005fe4 <_printf_i>
 8005ef2:	e7eb      	b.n	8005ecc <_svfiprintf_r+0x1c0>
 8005ef4:	08006354 	.word	0x08006354
 8005ef8:	0800635e 	.word	0x0800635e
 8005efc:	00000000 	.word	0x00000000
 8005f00:	08005c59 	.word	0x08005c59
 8005f04:	0800635a 	.word	0x0800635a

08005f08 <_printf_common>:
 8005f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f0c:	4616      	mov	r6, r2
 8005f0e:	4699      	mov	r9, r3
 8005f10:	688a      	ldr	r2, [r1, #8]
 8005f12:	690b      	ldr	r3, [r1, #16]
 8005f14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	bfb8      	it	lt
 8005f1c:	4613      	movlt	r3, r2
 8005f1e:	6033      	str	r3, [r6, #0]
 8005f20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f24:	4607      	mov	r7, r0
 8005f26:	460c      	mov	r4, r1
 8005f28:	b10a      	cbz	r2, 8005f2e <_printf_common+0x26>
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	6033      	str	r3, [r6, #0]
 8005f2e:	6823      	ldr	r3, [r4, #0]
 8005f30:	0699      	lsls	r1, r3, #26
 8005f32:	bf42      	ittt	mi
 8005f34:	6833      	ldrmi	r3, [r6, #0]
 8005f36:	3302      	addmi	r3, #2
 8005f38:	6033      	strmi	r3, [r6, #0]
 8005f3a:	6825      	ldr	r5, [r4, #0]
 8005f3c:	f015 0506 	ands.w	r5, r5, #6
 8005f40:	d106      	bne.n	8005f50 <_printf_common+0x48>
 8005f42:	f104 0a19 	add.w	sl, r4, #25
 8005f46:	68e3      	ldr	r3, [r4, #12]
 8005f48:	6832      	ldr	r2, [r6, #0]
 8005f4a:	1a9b      	subs	r3, r3, r2
 8005f4c:	42ab      	cmp	r3, r5
 8005f4e:	dc26      	bgt.n	8005f9e <_printf_common+0x96>
 8005f50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f54:	1e13      	subs	r3, r2, #0
 8005f56:	6822      	ldr	r2, [r4, #0]
 8005f58:	bf18      	it	ne
 8005f5a:	2301      	movne	r3, #1
 8005f5c:	0692      	lsls	r2, r2, #26
 8005f5e:	d42b      	bmi.n	8005fb8 <_printf_common+0xb0>
 8005f60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f64:	4649      	mov	r1, r9
 8005f66:	4638      	mov	r0, r7
 8005f68:	47c0      	blx	r8
 8005f6a:	3001      	adds	r0, #1
 8005f6c:	d01e      	beq.n	8005fac <_printf_common+0xa4>
 8005f6e:	6823      	ldr	r3, [r4, #0]
 8005f70:	6922      	ldr	r2, [r4, #16]
 8005f72:	f003 0306 	and.w	r3, r3, #6
 8005f76:	2b04      	cmp	r3, #4
 8005f78:	bf02      	ittt	eq
 8005f7a:	68e5      	ldreq	r5, [r4, #12]
 8005f7c:	6833      	ldreq	r3, [r6, #0]
 8005f7e:	1aed      	subeq	r5, r5, r3
 8005f80:	68a3      	ldr	r3, [r4, #8]
 8005f82:	bf0c      	ite	eq
 8005f84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f88:	2500      	movne	r5, #0
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	bfc4      	itt	gt
 8005f8e:	1a9b      	subgt	r3, r3, r2
 8005f90:	18ed      	addgt	r5, r5, r3
 8005f92:	2600      	movs	r6, #0
 8005f94:	341a      	adds	r4, #26
 8005f96:	42b5      	cmp	r5, r6
 8005f98:	d11a      	bne.n	8005fd0 <_printf_common+0xc8>
 8005f9a:	2000      	movs	r0, #0
 8005f9c:	e008      	b.n	8005fb0 <_printf_common+0xa8>
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	4652      	mov	r2, sl
 8005fa2:	4649      	mov	r1, r9
 8005fa4:	4638      	mov	r0, r7
 8005fa6:	47c0      	blx	r8
 8005fa8:	3001      	adds	r0, #1
 8005faa:	d103      	bne.n	8005fb4 <_printf_common+0xac>
 8005fac:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fb4:	3501      	adds	r5, #1
 8005fb6:	e7c6      	b.n	8005f46 <_printf_common+0x3e>
 8005fb8:	18e1      	adds	r1, r4, r3
 8005fba:	1c5a      	adds	r2, r3, #1
 8005fbc:	2030      	movs	r0, #48	; 0x30
 8005fbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005fc2:	4422      	add	r2, r4
 8005fc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005fc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005fcc:	3302      	adds	r3, #2
 8005fce:	e7c7      	b.n	8005f60 <_printf_common+0x58>
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	4622      	mov	r2, r4
 8005fd4:	4649      	mov	r1, r9
 8005fd6:	4638      	mov	r0, r7
 8005fd8:	47c0      	blx	r8
 8005fda:	3001      	adds	r0, #1
 8005fdc:	d0e6      	beq.n	8005fac <_printf_common+0xa4>
 8005fde:	3601      	adds	r6, #1
 8005fe0:	e7d9      	b.n	8005f96 <_printf_common+0x8e>
	...

08005fe4 <_printf_i>:
 8005fe4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fe8:	7e0f      	ldrb	r7, [r1, #24]
 8005fea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005fec:	2f78      	cmp	r7, #120	; 0x78
 8005fee:	4691      	mov	r9, r2
 8005ff0:	4680      	mov	r8, r0
 8005ff2:	460c      	mov	r4, r1
 8005ff4:	469a      	mov	sl, r3
 8005ff6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ffa:	d807      	bhi.n	800600c <_printf_i+0x28>
 8005ffc:	2f62      	cmp	r7, #98	; 0x62
 8005ffe:	d80a      	bhi.n	8006016 <_printf_i+0x32>
 8006000:	2f00      	cmp	r7, #0
 8006002:	f000 80d4 	beq.w	80061ae <_printf_i+0x1ca>
 8006006:	2f58      	cmp	r7, #88	; 0x58
 8006008:	f000 80c0 	beq.w	800618c <_printf_i+0x1a8>
 800600c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006010:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006014:	e03a      	b.n	800608c <_printf_i+0xa8>
 8006016:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800601a:	2b15      	cmp	r3, #21
 800601c:	d8f6      	bhi.n	800600c <_printf_i+0x28>
 800601e:	a101      	add	r1, pc, #4	; (adr r1, 8006024 <_printf_i+0x40>)
 8006020:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006024:	0800607d 	.word	0x0800607d
 8006028:	08006091 	.word	0x08006091
 800602c:	0800600d 	.word	0x0800600d
 8006030:	0800600d 	.word	0x0800600d
 8006034:	0800600d 	.word	0x0800600d
 8006038:	0800600d 	.word	0x0800600d
 800603c:	08006091 	.word	0x08006091
 8006040:	0800600d 	.word	0x0800600d
 8006044:	0800600d 	.word	0x0800600d
 8006048:	0800600d 	.word	0x0800600d
 800604c:	0800600d 	.word	0x0800600d
 8006050:	08006195 	.word	0x08006195
 8006054:	080060bd 	.word	0x080060bd
 8006058:	0800614f 	.word	0x0800614f
 800605c:	0800600d 	.word	0x0800600d
 8006060:	0800600d 	.word	0x0800600d
 8006064:	080061b7 	.word	0x080061b7
 8006068:	0800600d 	.word	0x0800600d
 800606c:	080060bd 	.word	0x080060bd
 8006070:	0800600d 	.word	0x0800600d
 8006074:	0800600d 	.word	0x0800600d
 8006078:	08006157 	.word	0x08006157
 800607c:	682b      	ldr	r3, [r5, #0]
 800607e:	1d1a      	adds	r2, r3, #4
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	602a      	str	r2, [r5, #0]
 8006084:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006088:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800608c:	2301      	movs	r3, #1
 800608e:	e09f      	b.n	80061d0 <_printf_i+0x1ec>
 8006090:	6820      	ldr	r0, [r4, #0]
 8006092:	682b      	ldr	r3, [r5, #0]
 8006094:	0607      	lsls	r7, r0, #24
 8006096:	f103 0104 	add.w	r1, r3, #4
 800609a:	6029      	str	r1, [r5, #0]
 800609c:	d501      	bpl.n	80060a2 <_printf_i+0xbe>
 800609e:	681e      	ldr	r6, [r3, #0]
 80060a0:	e003      	b.n	80060aa <_printf_i+0xc6>
 80060a2:	0646      	lsls	r6, r0, #25
 80060a4:	d5fb      	bpl.n	800609e <_printf_i+0xba>
 80060a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80060aa:	2e00      	cmp	r6, #0
 80060ac:	da03      	bge.n	80060b6 <_printf_i+0xd2>
 80060ae:	232d      	movs	r3, #45	; 0x2d
 80060b0:	4276      	negs	r6, r6
 80060b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060b6:	485a      	ldr	r0, [pc, #360]	; (8006220 <_printf_i+0x23c>)
 80060b8:	230a      	movs	r3, #10
 80060ba:	e012      	b.n	80060e2 <_printf_i+0xfe>
 80060bc:	682b      	ldr	r3, [r5, #0]
 80060be:	6820      	ldr	r0, [r4, #0]
 80060c0:	1d19      	adds	r1, r3, #4
 80060c2:	6029      	str	r1, [r5, #0]
 80060c4:	0605      	lsls	r5, r0, #24
 80060c6:	d501      	bpl.n	80060cc <_printf_i+0xe8>
 80060c8:	681e      	ldr	r6, [r3, #0]
 80060ca:	e002      	b.n	80060d2 <_printf_i+0xee>
 80060cc:	0641      	lsls	r1, r0, #25
 80060ce:	d5fb      	bpl.n	80060c8 <_printf_i+0xe4>
 80060d0:	881e      	ldrh	r6, [r3, #0]
 80060d2:	4853      	ldr	r0, [pc, #332]	; (8006220 <_printf_i+0x23c>)
 80060d4:	2f6f      	cmp	r7, #111	; 0x6f
 80060d6:	bf0c      	ite	eq
 80060d8:	2308      	moveq	r3, #8
 80060da:	230a      	movne	r3, #10
 80060dc:	2100      	movs	r1, #0
 80060de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80060e2:	6865      	ldr	r5, [r4, #4]
 80060e4:	60a5      	str	r5, [r4, #8]
 80060e6:	2d00      	cmp	r5, #0
 80060e8:	bfa2      	ittt	ge
 80060ea:	6821      	ldrge	r1, [r4, #0]
 80060ec:	f021 0104 	bicge.w	r1, r1, #4
 80060f0:	6021      	strge	r1, [r4, #0]
 80060f2:	b90e      	cbnz	r6, 80060f8 <_printf_i+0x114>
 80060f4:	2d00      	cmp	r5, #0
 80060f6:	d04b      	beq.n	8006190 <_printf_i+0x1ac>
 80060f8:	4615      	mov	r5, r2
 80060fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80060fe:	fb03 6711 	mls	r7, r3, r1, r6
 8006102:	5dc7      	ldrb	r7, [r0, r7]
 8006104:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006108:	4637      	mov	r7, r6
 800610a:	42bb      	cmp	r3, r7
 800610c:	460e      	mov	r6, r1
 800610e:	d9f4      	bls.n	80060fa <_printf_i+0x116>
 8006110:	2b08      	cmp	r3, #8
 8006112:	d10b      	bne.n	800612c <_printf_i+0x148>
 8006114:	6823      	ldr	r3, [r4, #0]
 8006116:	07de      	lsls	r6, r3, #31
 8006118:	d508      	bpl.n	800612c <_printf_i+0x148>
 800611a:	6923      	ldr	r3, [r4, #16]
 800611c:	6861      	ldr	r1, [r4, #4]
 800611e:	4299      	cmp	r1, r3
 8006120:	bfde      	ittt	le
 8006122:	2330      	movle	r3, #48	; 0x30
 8006124:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006128:	f105 35ff 	addle.w	r5, r5, #4294967295
 800612c:	1b52      	subs	r2, r2, r5
 800612e:	6122      	str	r2, [r4, #16]
 8006130:	f8cd a000 	str.w	sl, [sp]
 8006134:	464b      	mov	r3, r9
 8006136:	aa03      	add	r2, sp, #12
 8006138:	4621      	mov	r1, r4
 800613a:	4640      	mov	r0, r8
 800613c:	f7ff fee4 	bl	8005f08 <_printf_common>
 8006140:	3001      	adds	r0, #1
 8006142:	d14a      	bne.n	80061da <_printf_i+0x1f6>
 8006144:	f04f 30ff 	mov.w	r0, #4294967295
 8006148:	b004      	add	sp, #16
 800614a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800614e:	6823      	ldr	r3, [r4, #0]
 8006150:	f043 0320 	orr.w	r3, r3, #32
 8006154:	6023      	str	r3, [r4, #0]
 8006156:	4833      	ldr	r0, [pc, #204]	; (8006224 <_printf_i+0x240>)
 8006158:	2778      	movs	r7, #120	; 0x78
 800615a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800615e:	6823      	ldr	r3, [r4, #0]
 8006160:	6829      	ldr	r1, [r5, #0]
 8006162:	061f      	lsls	r7, r3, #24
 8006164:	f851 6b04 	ldr.w	r6, [r1], #4
 8006168:	d402      	bmi.n	8006170 <_printf_i+0x18c>
 800616a:	065f      	lsls	r7, r3, #25
 800616c:	bf48      	it	mi
 800616e:	b2b6      	uxthmi	r6, r6
 8006170:	07df      	lsls	r7, r3, #31
 8006172:	bf48      	it	mi
 8006174:	f043 0320 	orrmi.w	r3, r3, #32
 8006178:	6029      	str	r1, [r5, #0]
 800617a:	bf48      	it	mi
 800617c:	6023      	strmi	r3, [r4, #0]
 800617e:	b91e      	cbnz	r6, 8006188 <_printf_i+0x1a4>
 8006180:	6823      	ldr	r3, [r4, #0]
 8006182:	f023 0320 	bic.w	r3, r3, #32
 8006186:	6023      	str	r3, [r4, #0]
 8006188:	2310      	movs	r3, #16
 800618a:	e7a7      	b.n	80060dc <_printf_i+0xf8>
 800618c:	4824      	ldr	r0, [pc, #144]	; (8006220 <_printf_i+0x23c>)
 800618e:	e7e4      	b.n	800615a <_printf_i+0x176>
 8006190:	4615      	mov	r5, r2
 8006192:	e7bd      	b.n	8006110 <_printf_i+0x12c>
 8006194:	682b      	ldr	r3, [r5, #0]
 8006196:	6826      	ldr	r6, [r4, #0]
 8006198:	6961      	ldr	r1, [r4, #20]
 800619a:	1d18      	adds	r0, r3, #4
 800619c:	6028      	str	r0, [r5, #0]
 800619e:	0635      	lsls	r5, r6, #24
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	d501      	bpl.n	80061a8 <_printf_i+0x1c4>
 80061a4:	6019      	str	r1, [r3, #0]
 80061a6:	e002      	b.n	80061ae <_printf_i+0x1ca>
 80061a8:	0670      	lsls	r0, r6, #25
 80061aa:	d5fb      	bpl.n	80061a4 <_printf_i+0x1c0>
 80061ac:	8019      	strh	r1, [r3, #0]
 80061ae:	2300      	movs	r3, #0
 80061b0:	6123      	str	r3, [r4, #16]
 80061b2:	4615      	mov	r5, r2
 80061b4:	e7bc      	b.n	8006130 <_printf_i+0x14c>
 80061b6:	682b      	ldr	r3, [r5, #0]
 80061b8:	1d1a      	adds	r2, r3, #4
 80061ba:	602a      	str	r2, [r5, #0]
 80061bc:	681d      	ldr	r5, [r3, #0]
 80061be:	6862      	ldr	r2, [r4, #4]
 80061c0:	2100      	movs	r1, #0
 80061c2:	4628      	mov	r0, r5
 80061c4:	f7fa f80c 	bl	80001e0 <memchr>
 80061c8:	b108      	cbz	r0, 80061ce <_printf_i+0x1ea>
 80061ca:	1b40      	subs	r0, r0, r5
 80061cc:	6060      	str	r0, [r4, #4]
 80061ce:	6863      	ldr	r3, [r4, #4]
 80061d0:	6123      	str	r3, [r4, #16]
 80061d2:	2300      	movs	r3, #0
 80061d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061d8:	e7aa      	b.n	8006130 <_printf_i+0x14c>
 80061da:	6923      	ldr	r3, [r4, #16]
 80061dc:	462a      	mov	r2, r5
 80061de:	4649      	mov	r1, r9
 80061e0:	4640      	mov	r0, r8
 80061e2:	47d0      	blx	sl
 80061e4:	3001      	adds	r0, #1
 80061e6:	d0ad      	beq.n	8006144 <_printf_i+0x160>
 80061e8:	6823      	ldr	r3, [r4, #0]
 80061ea:	079b      	lsls	r3, r3, #30
 80061ec:	d413      	bmi.n	8006216 <_printf_i+0x232>
 80061ee:	68e0      	ldr	r0, [r4, #12]
 80061f0:	9b03      	ldr	r3, [sp, #12]
 80061f2:	4298      	cmp	r0, r3
 80061f4:	bfb8      	it	lt
 80061f6:	4618      	movlt	r0, r3
 80061f8:	e7a6      	b.n	8006148 <_printf_i+0x164>
 80061fa:	2301      	movs	r3, #1
 80061fc:	4632      	mov	r2, r6
 80061fe:	4649      	mov	r1, r9
 8006200:	4640      	mov	r0, r8
 8006202:	47d0      	blx	sl
 8006204:	3001      	adds	r0, #1
 8006206:	d09d      	beq.n	8006144 <_printf_i+0x160>
 8006208:	3501      	adds	r5, #1
 800620a:	68e3      	ldr	r3, [r4, #12]
 800620c:	9903      	ldr	r1, [sp, #12]
 800620e:	1a5b      	subs	r3, r3, r1
 8006210:	42ab      	cmp	r3, r5
 8006212:	dcf2      	bgt.n	80061fa <_printf_i+0x216>
 8006214:	e7eb      	b.n	80061ee <_printf_i+0x20a>
 8006216:	2500      	movs	r5, #0
 8006218:	f104 0619 	add.w	r6, r4, #25
 800621c:	e7f5      	b.n	800620a <_printf_i+0x226>
 800621e:	bf00      	nop
 8006220:	08006365 	.word	0x08006365
 8006224:	08006376 	.word	0x08006376

08006228 <memmove>:
 8006228:	4288      	cmp	r0, r1
 800622a:	b510      	push	{r4, lr}
 800622c:	eb01 0402 	add.w	r4, r1, r2
 8006230:	d902      	bls.n	8006238 <memmove+0x10>
 8006232:	4284      	cmp	r4, r0
 8006234:	4623      	mov	r3, r4
 8006236:	d807      	bhi.n	8006248 <memmove+0x20>
 8006238:	1e43      	subs	r3, r0, #1
 800623a:	42a1      	cmp	r1, r4
 800623c:	d008      	beq.n	8006250 <memmove+0x28>
 800623e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006242:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006246:	e7f8      	b.n	800623a <memmove+0x12>
 8006248:	4402      	add	r2, r0
 800624a:	4601      	mov	r1, r0
 800624c:	428a      	cmp	r2, r1
 800624e:	d100      	bne.n	8006252 <memmove+0x2a>
 8006250:	bd10      	pop	{r4, pc}
 8006252:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006256:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800625a:	e7f7      	b.n	800624c <memmove+0x24>

0800625c <_realloc_r>:
 800625c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006260:	4680      	mov	r8, r0
 8006262:	4614      	mov	r4, r2
 8006264:	460e      	mov	r6, r1
 8006266:	b921      	cbnz	r1, 8006272 <_realloc_r+0x16>
 8006268:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800626c:	4611      	mov	r1, r2
 800626e:	f7ff bba9 	b.w	80059c4 <_malloc_r>
 8006272:	b92a      	cbnz	r2, 8006280 <_realloc_r+0x24>
 8006274:	f7ff fca4 	bl	8005bc0 <_free_r>
 8006278:	4625      	mov	r5, r4
 800627a:	4628      	mov	r0, r5
 800627c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006280:	f000 f81b 	bl	80062ba <_malloc_usable_size_r>
 8006284:	4284      	cmp	r4, r0
 8006286:	4607      	mov	r7, r0
 8006288:	d802      	bhi.n	8006290 <_realloc_r+0x34>
 800628a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800628e:	d812      	bhi.n	80062b6 <_realloc_r+0x5a>
 8006290:	4621      	mov	r1, r4
 8006292:	4640      	mov	r0, r8
 8006294:	f7ff fb96 	bl	80059c4 <_malloc_r>
 8006298:	4605      	mov	r5, r0
 800629a:	2800      	cmp	r0, #0
 800629c:	d0ed      	beq.n	800627a <_realloc_r+0x1e>
 800629e:	42bc      	cmp	r4, r7
 80062a0:	4622      	mov	r2, r4
 80062a2:	4631      	mov	r1, r6
 80062a4:	bf28      	it	cs
 80062a6:	463a      	movcs	r2, r7
 80062a8:	f7ff fc7c 	bl	8005ba4 <memcpy>
 80062ac:	4631      	mov	r1, r6
 80062ae:	4640      	mov	r0, r8
 80062b0:	f7ff fc86 	bl	8005bc0 <_free_r>
 80062b4:	e7e1      	b.n	800627a <_realloc_r+0x1e>
 80062b6:	4635      	mov	r5, r6
 80062b8:	e7df      	b.n	800627a <_realloc_r+0x1e>

080062ba <_malloc_usable_size_r>:
 80062ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062be:	1f18      	subs	r0, r3, #4
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	bfbc      	itt	lt
 80062c4:	580b      	ldrlt	r3, [r1, r0]
 80062c6:	18c0      	addlt	r0, r0, r3
 80062c8:	4770      	bx	lr
	...

080062cc <_init>:
 80062cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ce:	bf00      	nop
 80062d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062d2:	bc08      	pop	{r3}
 80062d4:	469e      	mov	lr, r3
 80062d6:	4770      	bx	lr

080062d8 <_fini>:
 80062d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062da:	bf00      	nop
 80062dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062de:	bc08      	pop	{r3}
 80062e0:	469e      	mov	lr, r3
 80062e2:	4770      	bx	lr
