
Project2_Servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042bc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004444  08004444  00014444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800448c  0800448c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800448c  0800448c  0001448c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004494  08004494  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004494  08004494  00014494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004498  08004498  00014498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800449c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  2000000c  080044a8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  080044a8  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ecc1  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ca9  00000000  00000000  0002ed40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e20  00000000  00000000  000309f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b18  00000000  00000000  00031810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025cf8  00000000  00000000  00032328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010542  00000000  00000000  00058020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee75c  00000000  00000000  00068562  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003bc4  00000000  00000000  00156cc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  0015a884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800442c 	.word	0x0800442c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800442c 	.word	0x0800442c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fbac 	bl	8000c24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f85a 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f9ca 	bl	8000868 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d4:	f000 f998 	bl	8000808 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80004d8:	f000 f8a6 	bl	8000628 <MX_TIM2_Init>
  MX_TIM3_Init();
 80004dc:	f000 f91c 	bl	8000718 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80004e0:	2100      	movs	r1, #0
 80004e2:	4825      	ldr	r0, [pc, #148]	; (8000578 <main+0xb4>)
 80004e4:	f002 fabe 	bl	8002a64 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80004e8:	2108      	movs	r1, #8
 80004ea:	4824      	ldr	r0, [pc, #144]	; (800057c <main+0xb8>)
 80004ec:	f002 faba 	bl	8002a64 <HAL_TIM_PWM_Start>
    /* USER CODE END WHILE */

	  //Move motor through the positions

	  //Pos 1
	  TIM3->CCR1 = 24;
 80004f0:	4b23      	ldr	r3, [pc, #140]	; (8000580 <main+0xbc>)
 80004f2:	2218      	movs	r2, #24
 80004f4:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM2->CCR3 = 24;
 80004f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004fa:	2218      	movs	r2, #24
 80004fc:	63da      	str	r2, [r3, #60]	; 0x3c
	  HAL_Delay(1000);
 80004fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000502:	f000 fc0b 	bl	8000d1c <HAL_Delay>
	  //Pos 2
	  TIM3->CCR1 = 35;
 8000506:	4b1e      	ldr	r3, [pc, #120]	; (8000580 <main+0xbc>)
 8000508:	2223      	movs	r2, #35	; 0x23
 800050a:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM2->CCR3 = 35;
 800050c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000510:	2223      	movs	r2, #35	; 0x23
 8000512:	63da      	str	r2, [r3, #60]	; 0x3c
	  HAL_Delay(1000);
 8000514:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000518:	f000 fc00 	bl	8000d1c <HAL_Delay>
	  //Pos 3
	  TIM3->CCR1 = 50;
 800051c:	4b18      	ldr	r3, [pc, #96]	; (8000580 <main+0xbc>)
 800051e:	2232      	movs	r2, #50	; 0x32
 8000520:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM2->CCR3 = 50;
 8000522:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000526:	2232      	movs	r2, #50	; 0x32
 8000528:	63da      	str	r2, [r3, #60]	; 0x3c
	  HAL_Delay(1000);
 800052a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800052e:	f000 fbf5 	bl	8000d1c <HAL_Delay>
	  //Pos 4
	  TIM3->CCR1 = 68;
 8000532:	4b13      	ldr	r3, [pc, #76]	; (8000580 <main+0xbc>)
 8000534:	2244      	movs	r2, #68	; 0x44
 8000536:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM2->CCR3 = 68;
 8000538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800053c:	2244      	movs	r2, #68	; 0x44
 800053e:	63da      	str	r2, [r3, #60]	; 0x3c
	  HAL_Delay(1000);
 8000540:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000544:	f000 fbea 	bl	8000d1c <HAL_Delay>
	  //Pos 5
	  TIM3->CCR1 = 85;
 8000548:	4b0d      	ldr	r3, [pc, #52]	; (8000580 <main+0xbc>)
 800054a:	2255      	movs	r2, #85	; 0x55
 800054c:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM2->CCR3 = 85;
 800054e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000552:	2255      	movs	r2, #85	; 0x55
 8000554:	63da      	str	r2, [r3, #60]	; 0x3c
	  HAL_Delay(1000);
 8000556:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800055a:	f000 fbdf 	bl	8000d1c <HAL_Delay>
	  //Pos 6
	  TIM3->CCR1 = 100;
 800055e:	4b08      	ldr	r3, [pc, #32]	; (8000580 <main+0xbc>)
 8000560:	2264      	movs	r2, #100	; 0x64
 8000562:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM2->CCR3 = 100;
 8000564:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000568:	2264      	movs	r2, #100	; 0x64
 800056a:	63da      	str	r2, [r3, #60]	; 0x3c
	  HAL_Delay(1000);
 800056c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000570:	f000 fbd4 	bl	8000d1c <HAL_Delay>
	  TIM3->CCR1 = 24;
 8000574:	e7bc      	b.n	80004f0 <main+0x2c>
 8000576:	bf00      	nop
 8000578:	20000074 	.word	0x20000074
 800057c:	20000028 	.word	0x20000028
 8000580:	40000400 	.word	0x40000400

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b096      	sub	sp, #88	; 0x58
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 0314 	add.w	r3, r7, #20
 800058e:	2244      	movs	r2, #68	; 0x44
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f003 ff1d 	bl	80043d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	463b      	mov	r3, r7
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
 80005a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005aa:	f000 fe91 	bl	80012d0 <HAL_PWREx_ControlVoltageScaling>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005b4:	f000 f9be 	bl	8000934 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b8:	2302      	movs	r3, #2
 80005ba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005c0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c2:	2310      	movs	r3, #16
 80005c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c6:	2302      	movs	r3, #2
 80005c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ca:	2302      	movs	r3, #2
 80005cc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005ce:	2301      	movs	r3, #1
 80005d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005d2:	230a      	movs	r3, #10
 80005d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005d6:	2307      	movs	r3, #7
 80005d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005da:	2302      	movs	r3, #2
 80005dc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005de:	2302      	movs	r3, #2
 80005e0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 fec8 	bl	800137c <HAL_RCC_OscConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005f2:	f000 f99f 	bl	8000934 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f6:	230f      	movs	r3, #15
 80005f8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fa:	2303      	movs	r3, #3
 80005fc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800060a:	463b      	mov	r3, r7
 800060c:	2104      	movs	r1, #4
 800060e:	4618      	mov	r0, r3
 8000610:	f001 fa90 	bl	8001b34 <HAL_RCC_ClockConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800061a:	f000 f98b 	bl	8000934 <Error_Handler>
  }
}
 800061e:	bf00      	nop
 8000620:	3758      	adds	r7, #88	; 0x58
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
	...

08000628 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b08e      	sub	sp, #56	; 0x38
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800062e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800063c:	f107 031c 	add.w	r3, r7, #28
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000648:	463b      	mov	r3, r7
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]
 8000654:	611a      	str	r2, [r3, #16]
 8000656:	615a      	str	r2, [r3, #20]
 8000658:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800065a:	4b2e      	ldr	r3, [pc, #184]	; (8000714 <MX_TIM2_Init+0xec>)
 800065c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000660:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1599;
 8000662:	4b2c      	ldr	r3, [pc, #176]	; (8000714 <MX_TIM2_Init+0xec>)
 8000664:	f240 623f 	movw	r2, #1599	; 0x63f
 8000668:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800066a:	4b2a      	ldr	r3, [pc, #168]	; (8000714 <MX_TIM2_Init+0xec>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000670:	4b28      	ldr	r3, [pc, #160]	; (8000714 <MX_TIM2_Init+0xec>)
 8000672:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000676:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000678:	4b26      	ldr	r3, [pc, #152]	; (8000714 <MX_TIM2_Init+0xec>)
 800067a:	2200      	movs	r2, #0
 800067c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800067e:	4b25      	ldr	r3, [pc, #148]	; (8000714 <MX_TIM2_Init+0xec>)
 8000680:	2280      	movs	r2, #128	; 0x80
 8000682:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000684:	4823      	ldr	r0, [pc, #140]	; (8000714 <MX_TIM2_Init+0xec>)
 8000686:	f002 f935 	bl	80028f4 <HAL_TIM_Base_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000690:	f000 f950 	bl	8000934 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000698:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800069a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800069e:	4619      	mov	r1, r3
 80006a0:	481c      	ldr	r0, [pc, #112]	; (8000714 <MX_TIM2_Init+0xec>)
 80006a2:	f002 fbf9 	bl	8002e98 <HAL_TIM_ConfigClockSource>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80006ac:	f000 f942 	bl	8000934 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80006b0:	4818      	ldr	r0, [pc, #96]	; (8000714 <MX_TIM2_Init+0xec>)
 80006b2:	f002 f976 	bl	80029a2 <HAL_TIM_PWM_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80006bc:	f000 f93a 	bl	8000934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006c4:	2300      	movs	r3, #0
 80006c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006c8:	f107 031c 	add.w	r3, r7, #28
 80006cc:	4619      	mov	r1, r3
 80006ce:	4811      	ldr	r0, [pc, #68]	; (8000714 <MX_TIM2_Init+0xec>)
 80006d0:	f003 f8dc 	bl	800388c <HAL_TIMEx_MasterConfigSynchronization>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80006da:	f000 f92b 	bl	8000934 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006de:	2360      	movs	r3, #96	; 0x60
 80006e0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006ee:	463b      	mov	r3, r7
 80006f0:	2208      	movs	r2, #8
 80006f2:	4619      	mov	r1, r3
 80006f4:	4807      	ldr	r0, [pc, #28]	; (8000714 <MX_TIM2_Init+0xec>)
 80006f6:	f002 fabb 	bl	8002c70 <HAL_TIM_PWM_ConfigChannel>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000700:	f000 f918 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000704:	4803      	ldr	r0, [pc, #12]	; (8000714 <MX_TIM2_Init+0xec>)
 8000706:	f000 f971 	bl	80009ec <HAL_TIM_MspPostInit>

}
 800070a:	bf00      	nop
 800070c:	3738      	adds	r7, #56	; 0x38
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000028 	.word	0x20000028

08000718 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08e      	sub	sp, #56	; 0x38
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800071e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800072c:	f107 031c 	add.w	r3, r7, #28
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000738:	463b      	mov	r3, r7
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]
 8000746:	615a      	str	r2, [r3, #20]
 8000748:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800074a:	4b2d      	ldr	r3, [pc, #180]	; (8000800 <MX_TIM3_Init+0xe8>)
 800074c:	4a2d      	ldr	r2, [pc, #180]	; (8000804 <MX_TIM3_Init+0xec>)
 800074e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1599;
 8000750:	4b2b      	ldr	r3, [pc, #172]	; (8000800 <MX_TIM3_Init+0xe8>)
 8000752:	f240 623f 	movw	r2, #1599	; 0x63f
 8000756:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000758:	4b29      	ldr	r3, [pc, #164]	; (8000800 <MX_TIM3_Init+0xe8>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 800075e:	4b28      	ldr	r3, [pc, #160]	; (8000800 <MX_TIM3_Init+0xe8>)
 8000760:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000764:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000766:	4b26      	ldr	r3, [pc, #152]	; (8000800 <MX_TIM3_Init+0xe8>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800076c:	4b24      	ldr	r3, [pc, #144]	; (8000800 <MX_TIM3_Init+0xe8>)
 800076e:	2280      	movs	r2, #128	; 0x80
 8000770:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000772:	4823      	ldr	r0, [pc, #140]	; (8000800 <MX_TIM3_Init+0xe8>)
 8000774:	f002 f8be 	bl	80028f4 <HAL_TIM_Base_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800077e:	f000 f8d9 	bl	8000934 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000782:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000786:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000788:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800078c:	4619      	mov	r1, r3
 800078e:	481c      	ldr	r0, [pc, #112]	; (8000800 <MX_TIM3_Init+0xe8>)
 8000790:	f002 fb82 	bl	8002e98 <HAL_TIM_ConfigClockSource>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800079a:	f000 f8cb 	bl	8000934 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800079e:	4818      	ldr	r0, [pc, #96]	; (8000800 <MX_TIM3_Init+0xe8>)
 80007a0:	f002 f8ff 	bl	80029a2 <HAL_TIM_PWM_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80007aa:	f000 f8c3 	bl	8000934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b2:	2300      	movs	r3, #0
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	4619      	mov	r1, r3
 80007bc:	4810      	ldr	r0, [pc, #64]	; (8000800 <MX_TIM3_Init+0xe8>)
 80007be:	f003 f865 	bl	800388c <HAL_TIMEx_MasterConfigSynchronization>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80007c8:	f000 f8b4 	bl	8000934 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007cc:	2360      	movs	r3, #96	; 0x60
 80007ce:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007d4:	2300      	movs	r3, #0
 80007d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007d8:	2300      	movs	r3, #0
 80007da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007dc:	463b      	mov	r3, r7
 80007de:	2200      	movs	r2, #0
 80007e0:	4619      	mov	r1, r3
 80007e2:	4807      	ldr	r0, [pc, #28]	; (8000800 <MX_TIM3_Init+0xe8>)
 80007e4:	f002 fa44 	bl	8002c70 <HAL_TIM_PWM_ConfigChannel>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80007ee:	f000 f8a1 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80007f2:	4803      	ldr	r0, [pc, #12]	; (8000800 <MX_TIM3_Init+0xe8>)
 80007f4:	f000 f8fa 	bl	80009ec <HAL_TIM_MspPostInit>

}
 80007f8:	bf00      	nop
 80007fa:	3738      	adds	r7, #56	; 0x38
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000074 	.word	0x20000074
 8000804:	40000400 	.word	0x40000400

08000808 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800080c:	4b14      	ldr	r3, [pc, #80]	; (8000860 <MX_USART2_UART_Init+0x58>)
 800080e:	4a15      	ldr	r2, [pc, #84]	; (8000864 <MX_USART2_UART_Init+0x5c>)
 8000810:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000812:	4b13      	ldr	r3, [pc, #76]	; (8000860 <MX_USART2_UART_Init+0x58>)
 8000814:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000818:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_USART2_UART_Init+0x58>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_USART2_UART_Init+0x58>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_USART2_UART_Init+0x58>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <MX_USART2_UART_Init+0x58>)
 800082e:	220c      	movs	r2, #12
 8000830:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <MX_USART2_UART_Init+0x58>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_USART2_UART_Init+0x58>)
 800083a:	2200      	movs	r2, #0
 800083c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <MX_USART2_UART_Init+0x58>)
 8000840:	2200      	movs	r2, #0
 8000842:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <MX_USART2_UART_Init+0x58>)
 8000846:	2200      	movs	r2, #0
 8000848:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <MX_USART2_UART_Init+0x58>)
 800084c:	f003 f8a6 	bl	800399c <HAL_UART_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000856:	f000 f86d 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	200000c0 	.word	0x200000c0
 8000864:	40004400 	.word	0x40004400

08000868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08a      	sub	sp, #40	; 0x28
 800086c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086e:	f107 0314 	add.w	r3, r7, #20
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087e:	4b2b      	ldr	r3, [pc, #172]	; (800092c <MX_GPIO_Init+0xc4>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	4a2a      	ldr	r2, [pc, #168]	; (800092c <MX_GPIO_Init+0xc4>)
 8000884:	f043 0304 	orr.w	r3, r3, #4
 8000888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088a:	4b28      	ldr	r3, [pc, #160]	; (800092c <MX_GPIO_Init+0xc4>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	f003 0304 	and.w	r3, r3, #4
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000896:	4b25      	ldr	r3, [pc, #148]	; (800092c <MX_GPIO_Init+0xc4>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089a:	4a24      	ldr	r2, [pc, #144]	; (800092c <MX_GPIO_Init+0xc4>)
 800089c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a2:	4b22      	ldr	r3, [pc, #136]	; (800092c <MX_GPIO_Init+0xc4>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	4b1f      	ldr	r3, [pc, #124]	; (800092c <MX_GPIO_Init+0xc4>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b2:	4a1e      	ldr	r2, [pc, #120]	; (800092c <MX_GPIO_Init+0xc4>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ba:	4b1c      	ldr	r3, [pc, #112]	; (800092c <MX_GPIO_Init+0xc4>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c6:	4b19      	ldr	r3, [pc, #100]	; (800092c <MX_GPIO_Init+0xc4>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ca:	4a18      	ldr	r2, [pc, #96]	; (800092c <MX_GPIO_Init+0xc4>)
 80008cc:	f043 0302 	orr.w	r3, r3, #2
 80008d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d2:	4b16      	ldr	r3, [pc, #88]	; (800092c <MX_GPIO_Init+0xc4>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d6:	f003 0302 	and.w	r3, r3, #2
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	2120      	movs	r1, #32
 80008e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e6:	f000 fccd 	bl	8001284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008f0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	4619      	mov	r1, r3
 8000900:	480b      	ldr	r0, [pc, #44]	; (8000930 <MX_GPIO_Init+0xc8>)
 8000902:	f000 fb15 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000906:	2320      	movs	r3, #32
 8000908:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090a:	2301      	movs	r3, #1
 800090c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 0314 	add.w	r3, r7, #20
 800091a:	4619      	mov	r1, r3
 800091c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000920:	f000 fb06 	bl	8000f30 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000924:	bf00      	nop
 8000926:	3728      	adds	r7, #40	; 0x28
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40021000 	.word	0x40021000
 8000930:	48000800 	.word	0x48000800

08000934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000938:	b672      	cpsid	i
}
 800093a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800093c:	e7fe      	b.n	800093c <Error_Handler+0x8>
	...

08000940 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <HAL_MspInit+0x44>)
 8000948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800094a:	4a0e      	ldr	r2, [pc, #56]	; (8000984 <HAL_MspInit+0x44>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6613      	str	r3, [r2, #96]	; 0x60
 8000952:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <HAL_MspInit+0x44>)
 8000954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <HAL_MspInit+0x44>)
 8000960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000962:	4a08      	ldr	r2, [pc, #32]	; (8000984 <HAL_MspInit+0x44>)
 8000964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000968:	6593      	str	r3, [r2, #88]	; 0x58
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <HAL_MspInit+0x44>)
 800096c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800096e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	40021000 	.word	0x40021000

08000988 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000988:	b480      	push	{r7}
 800098a:	b085      	sub	sp, #20
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000998:	d10c      	bne.n	80009b4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800099a:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <HAL_TIM_Base_MspInit+0x5c>)
 800099c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800099e:	4a11      	ldr	r2, [pc, #68]	; (80009e4 <HAL_TIM_Base_MspInit+0x5c>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	6593      	str	r3, [r2, #88]	; 0x58
 80009a6:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <HAL_TIM_Base_MspInit+0x5c>)
 80009a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80009b2:	e010      	b.n	80009d6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a0b      	ldr	r2, [pc, #44]	; (80009e8 <HAL_TIM_Base_MspInit+0x60>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d10b      	bne.n	80009d6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <HAL_TIM_Base_MspInit+0x5c>)
 80009c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c2:	4a08      	ldr	r2, [pc, #32]	; (80009e4 <HAL_TIM_Base_MspInit+0x5c>)
 80009c4:	f043 0302 	orr.w	r3, r3, #2
 80009c8:	6593      	str	r3, [r2, #88]	; 0x58
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <HAL_TIM_Base_MspInit+0x5c>)
 80009cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ce:	f003 0302 	and.w	r3, r3, #2
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	68bb      	ldr	r3, [r7, #8]
}
 80009d6:	bf00      	nop
 80009d8:	3714      	adds	r7, #20
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	40021000 	.word	0x40021000
 80009e8:	40000400 	.word	0x40000400

080009ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	; 0x28
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a0c:	d11d      	bne.n	8000a4a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0e:	4b21      	ldr	r3, [pc, #132]	; (8000a94 <HAL_TIM_MspPostInit+0xa8>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a12:	4a20      	ldr	r2, [pc, #128]	; (8000a94 <HAL_TIM_MspPostInit+0xa8>)
 8000a14:	f043 0302 	orr.w	r3, r3, #2
 8000a18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1a:	4b1e      	ldr	r3, [pc, #120]	; (8000a94 <HAL_TIM_MspPostInit+0xa8>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1e:	f003 0302 	and.w	r3, r3, #2
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a34:	2300      	movs	r3, #0
 8000a36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	4619      	mov	r1, r3
 8000a42:	4815      	ldr	r0, [pc, #84]	; (8000a98 <HAL_TIM_MspPostInit+0xac>)
 8000a44:	f000 fa74 	bl	8000f30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000a48:	e020      	b.n	8000a8c <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM3)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a13      	ldr	r2, [pc, #76]	; (8000a9c <HAL_TIM_MspPostInit+0xb0>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d11b      	bne.n	8000a8c <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a54:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <HAL_TIM_MspPostInit+0xa8>)
 8000a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a58:	4a0e      	ldr	r2, [pc, #56]	; (8000a94 <HAL_TIM_MspPostInit+0xa8>)
 8000a5a:	f043 0302 	orr.w	r3, r3, #2
 8000a5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <HAL_TIM_MspPostInit+0xa8>)
 8000a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a64:	f003 0302 	and.w	r3, r3, #2
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a6c:	2310      	movs	r3, #16
 8000a6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a70:	2302      	movs	r3, #2
 8000a72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	4619      	mov	r1, r3
 8000a86:	4804      	ldr	r0, [pc, #16]	; (8000a98 <HAL_TIM_MspPostInit+0xac>)
 8000a88:	f000 fa52 	bl	8000f30 <HAL_GPIO_Init>
}
 8000a8c:	bf00      	nop
 8000a8e:	3728      	adds	r7, #40	; 0x28
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40021000 	.word	0x40021000
 8000a98:	48000400 	.word	0x48000400
 8000a9c:	40000400 	.word	0x40000400

08000aa0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b0ac      	sub	sp, #176	; 0xb0
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	2288      	movs	r2, #136	; 0x88
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f003 fc86 	bl	80043d2 <memset>
  if(huart->Instance==USART2)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a21      	ldr	r2, [pc, #132]	; (8000b50 <HAL_UART_MspInit+0xb0>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d13b      	bne.n	8000b48 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	4618      	mov	r0, r3
 8000ade:	f001 fa4d 	bl	8001f7c <HAL_RCCEx_PeriphCLKConfig>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ae8:	f7ff ff24 	bl	8000934 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aec:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <HAL_UART_MspInit+0xb4>)
 8000aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af0:	4a18      	ldr	r2, [pc, #96]	; (8000b54 <HAL_UART_MspInit+0xb4>)
 8000af2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af6:	6593      	str	r3, [r2, #88]	; 0x58
 8000af8:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <HAL_UART_MspInit+0xb4>)
 8000afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b00:	613b      	str	r3, [r7, #16]
 8000b02:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b04:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <HAL_UART_MspInit+0xb4>)
 8000b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b08:	4a12      	ldr	r2, [pc, #72]	; (8000b54 <HAL_UART_MspInit+0xb4>)
 8000b0a:	f043 0301 	orr.w	r3, r3, #1
 8000b0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b10:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <HAL_UART_MspInit+0xb4>)
 8000b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b14:	f003 0301 	and.w	r3, r3, #1
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b1c:	230c      	movs	r3, #12
 8000b1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b22:	2302      	movs	r3, #2
 8000b24:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b34:	2307      	movs	r3, #7
 8000b36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b3e:	4619      	mov	r1, r3
 8000b40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b44:	f000 f9f4 	bl	8000f30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b48:	bf00      	nop
 8000b4a:	37b0      	adds	r7, #176	; 0xb0
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40004400 	.word	0x40004400
 8000b54:	40021000 	.word	0x40021000

08000b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b5c:	e7fe      	b.n	8000b5c <NMI_Handler+0x4>

08000b5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <HardFault_Handler+0x4>

08000b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <MemManage_Handler+0x4>

08000b6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <BusFault_Handler+0x4>

08000b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <UsageFault_Handler+0x4>

08000b76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba4:	f000 f89a 	bl	8000cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}

08000bac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <SystemInit+0x20>)
 8000bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bb6:	4a05      	ldr	r2, [pc, #20]	; (8000bcc <SystemInit+0x20>)
 8000bb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c08 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bd4:	f7ff ffea 	bl	8000bac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bd8:	480c      	ldr	r0, [pc, #48]	; (8000c0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000bda:	490d      	ldr	r1, [pc, #52]	; (8000c10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bdc:	4a0d      	ldr	r2, [pc, #52]	; (8000c14 <LoopForever+0xe>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be0:	e002      	b.n	8000be8 <LoopCopyDataInit>

08000be2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000be2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be6:	3304      	adds	r3, #4

08000be8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bec:	d3f9      	bcc.n	8000be2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bee:	4a0a      	ldr	r2, [pc, #40]	; (8000c18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bf0:	4c0a      	ldr	r4, [pc, #40]	; (8000c1c <LoopForever+0x16>)
  movs r3, #0
 8000bf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf4:	e001      	b.n	8000bfa <LoopFillZerobss>

08000bf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf8:	3204      	adds	r2, #4

08000bfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bfc:	d3fb      	bcc.n	8000bf6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bfe:	f003 fbf1 	bl	80043e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c02:	f7ff fc5f 	bl	80004c4 <main>

08000c06 <LoopForever>:

LoopForever:
    b LoopForever
 8000c06:	e7fe      	b.n	8000c06 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c08:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c10:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c14:	0800449c 	.word	0x0800449c
  ldr r2, =_sbss
 8000c18:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c1c:	2000014c 	.word	0x2000014c

08000c20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c20:	e7fe      	b.n	8000c20 <ADC1_2_IRQHandler>
	...

08000c24 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c2e:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <HAL_Init+0x3c>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a0b      	ldr	r2, [pc, #44]	; (8000c60 <HAL_Init+0x3c>)
 8000c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c38:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c3a:	2003      	movs	r0, #3
 8000c3c:	f000 f944 	bl	8000ec8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c40:	2000      	movs	r0, #0
 8000c42:	f000 f80f 	bl	8000c64 <HAL_InitTick>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d002      	beq.n	8000c52 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	71fb      	strb	r3, [r7, #7]
 8000c50:	e001      	b.n	8000c56 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c52:	f7ff fe75 	bl	8000940 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c56:	79fb      	ldrb	r3, [r7, #7]
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40022000 	.word	0x40022000

08000c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c70:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <HAL_InitTick+0x6c>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d023      	beq.n	8000cc0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c78:	4b16      	ldr	r3, [pc, #88]	; (8000cd4 <HAL_InitTick+0x70>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <HAL_InitTick+0x6c>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	4619      	mov	r1, r3
 8000c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 f941 	bl	8000f16 <HAL_SYSTICK_Config>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d10f      	bne.n	8000cba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2b0f      	cmp	r3, #15
 8000c9e:	d809      	bhi.n	8000cb4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	6879      	ldr	r1, [r7, #4]
 8000ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca8:	f000 f919 	bl	8000ede <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cac:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <HAL_InitTick+0x74>)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6013      	str	r3, [r2, #0]
 8000cb2:	e007      	b.n	8000cc4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	73fb      	strb	r3, [r7, #15]
 8000cb8:	e004      	b.n	8000cc4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	73fb      	strb	r3, [r7, #15]
 8000cbe:	e001      	b.n	8000cc4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000008 	.word	0x20000008
 8000cd4:	20000000 	.word	0x20000000
 8000cd8:	20000004 	.word	0x20000004

08000cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_IncTick+0x20>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_IncTick+0x24>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4413      	add	r3, r2
 8000cec:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <HAL_IncTick+0x24>)
 8000cee:	6013      	str	r3, [r2, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	20000008 	.word	0x20000008
 8000d00:	20000148 	.word	0x20000148

08000d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return uwTick;
 8000d08:	4b03      	ldr	r3, [pc, #12]	; (8000d18 <HAL_GetTick+0x14>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20000148 	.word	0x20000148

08000d1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d24:	f7ff ffee 	bl	8000d04 <HAL_GetTick>
 8000d28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d34:	d005      	beq.n	8000d42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d36:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <HAL_Delay+0x44>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	4413      	add	r3, r2
 8000d40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d42:	bf00      	nop
 8000d44:	f7ff ffde 	bl	8000d04 <HAL_GetTick>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d8f7      	bhi.n	8000d44 <HAL_Delay+0x28>
  {
  }
}
 8000d54:	bf00      	nop
 8000d56:	bf00      	nop
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000008 	.word	0x20000008

08000d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d7a:	68ba      	ldr	r2, [r7, #8]
 8000d7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d80:	4013      	ands	r3, r2
 8000d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d96:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	60d3      	str	r3, [r2, #12]
}
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db0:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	0a1b      	lsrs	r3, r3, #8
 8000db6:	f003 0307 	and.w	r3, r3, #7
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	6039      	str	r1, [r7, #0]
 8000dd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	db0a      	blt.n	8000df2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	490c      	ldr	r1, [pc, #48]	; (8000e14 <__NVIC_SetPriority+0x4c>)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	0112      	lsls	r2, r2, #4
 8000de8:	b2d2      	uxtb	r2, r2
 8000dea:	440b      	add	r3, r1
 8000dec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df0:	e00a      	b.n	8000e08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	b2da      	uxtb	r2, r3
 8000df6:	4908      	ldr	r1, [pc, #32]	; (8000e18 <__NVIC_SetPriority+0x50>)
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	f003 030f 	and.w	r3, r3, #15
 8000dfe:	3b04      	subs	r3, #4
 8000e00:	0112      	lsls	r2, r2, #4
 8000e02:	b2d2      	uxtb	r2, r2
 8000e04:	440b      	add	r3, r1
 8000e06:	761a      	strb	r2, [r3, #24]
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000e100 	.word	0xe000e100
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b089      	sub	sp, #36	; 0x24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	f1c3 0307 	rsb	r3, r3, #7
 8000e36:	2b04      	cmp	r3, #4
 8000e38:	bf28      	it	cs
 8000e3a:	2304      	movcs	r3, #4
 8000e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3304      	adds	r3, #4
 8000e42:	2b06      	cmp	r3, #6
 8000e44:	d902      	bls.n	8000e4c <NVIC_EncodePriority+0x30>
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	3b03      	subs	r3, #3
 8000e4a:	e000      	b.n	8000e4e <NVIC_EncodePriority+0x32>
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e50:	f04f 32ff 	mov.w	r2, #4294967295
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43da      	mvns	r2, r3
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	401a      	ands	r2, r3
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e64:	f04f 31ff 	mov.w	r1, #4294967295
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6e:	43d9      	mvns	r1, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e74:	4313      	orrs	r3, r2
         );
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3724      	adds	r7, #36	; 0x24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
	...

08000e84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e94:	d301      	bcc.n	8000e9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e96:	2301      	movs	r3, #1
 8000e98:	e00f      	b.n	8000eba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <SysTick_Config+0x40>)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ea2:	210f      	movs	r1, #15
 8000ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea8:	f7ff ff8e 	bl	8000dc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eac:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <SysTick_Config+0x40>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eb2:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <SysTick_Config+0x40>)
 8000eb4:	2207      	movs	r2, #7
 8000eb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	e000e010 	.word	0xe000e010

08000ec8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f7ff ff47 	bl	8000d64 <__NVIC_SetPriorityGrouping>
}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b086      	sub	sp, #24
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	60b9      	str	r1, [r7, #8]
 8000ee8:	607a      	str	r2, [r7, #4]
 8000eea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef0:	f7ff ff5c 	bl	8000dac <__NVIC_GetPriorityGrouping>
 8000ef4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	68b9      	ldr	r1, [r7, #8]
 8000efa:	6978      	ldr	r0, [r7, #20]
 8000efc:	f7ff ff8e 	bl	8000e1c <NVIC_EncodePriority>
 8000f00:	4602      	mov	r2, r0
 8000f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f06:	4611      	mov	r1, r2
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff ff5d 	bl	8000dc8 <__NVIC_SetPriority>
}
 8000f0e:	bf00      	nop
 8000f10:	3718      	adds	r7, #24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f7ff ffb0 	bl	8000e84 <SysTick_Config>
 8000f24:	4603      	mov	r3, r0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b087      	sub	sp, #28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f3e:	e17f      	b.n	8001240 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	2101      	movs	r1, #1
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	f000 8171 	beq.w	800123a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f003 0303 	and.w	r3, r3, #3
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d005      	beq.n	8000f70 <HAL_GPIO_Init+0x40>
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f003 0303 	and.w	r3, r3, #3
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d130      	bne.n	8000fd2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	4013      	ands	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	68da      	ldr	r2, [r3, #12]
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	091b      	lsrs	r3, r3, #4
 8000fbc:	f003 0201 	and.w	r2, r3, #1
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f003 0303 	and.w	r3, r3, #3
 8000fda:	2b03      	cmp	r3, #3
 8000fdc:	d118      	bne.n	8001010 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	08db      	lsrs	r3, r3, #3
 8000ffa:	f003 0201 	and.w	r2, r3, #1
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	4313      	orrs	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f003 0303 	and.w	r3, r3, #3
 8001018:	2b03      	cmp	r3, #3
 800101a:	d017      	beq.n	800104c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	2203      	movs	r2, #3
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	4013      	ands	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	689a      	ldr	r2, [r3, #8]
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	4313      	orrs	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 0303 	and.w	r3, r3, #3
 8001054:	2b02      	cmp	r3, #2
 8001056:	d123      	bne.n	80010a0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	08da      	lsrs	r2, r3, #3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3208      	adds	r2, #8
 8001060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001064:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	f003 0307 	and.w	r3, r3, #7
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	220f      	movs	r2, #15
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4013      	ands	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	691a      	ldr	r2, [r3, #16]
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	4313      	orrs	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	08da      	lsrs	r2, r3, #3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	3208      	adds	r2, #8
 800109a:	6939      	ldr	r1, [r7, #16]
 800109c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	2203      	movs	r2, #3
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	43db      	mvns	r3, r3
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4013      	ands	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 0203 	and.w	r2, r3, #3
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	f000 80ac 	beq.w	800123a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e2:	4b5f      	ldr	r3, [pc, #380]	; (8001260 <HAL_GPIO_Init+0x330>)
 80010e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010e6:	4a5e      	ldr	r2, [pc, #376]	; (8001260 <HAL_GPIO_Init+0x330>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6613      	str	r3, [r2, #96]	; 0x60
 80010ee:	4b5c      	ldr	r3, [pc, #368]	; (8001260 <HAL_GPIO_Init+0x330>)
 80010f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	60bb      	str	r3, [r7, #8]
 80010f8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010fa:	4a5a      	ldr	r2, [pc, #360]	; (8001264 <HAL_GPIO_Init+0x334>)
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	089b      	lsrs	r3, r3, #2
 8001100:	3302      	adds	r3, #2
 8001102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001106:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	f003 0303 	and.w	r3, r3, #3
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	220f      	movs	r2, #15
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43db      	mvns	r3, r3
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	4013      	ands	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001124:	d025      	beq.n	8001172 <HAL_GPIO_Init+0x242>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a4f      	ldr	r2, [pc, #316]	; (8001268 <HAL_GPIO_Init+0x338>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d01f      	beq.n	800116e <HAL_GPIO_Init+0x23e>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a4e      	ldr	r2, [pc, #312]	; (800126c <HAL_GPIO_Init+0x33c>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d019      	beq.n	800116a <HAL_GPIO_Init+0x23a>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a4d      	ldr	r2, [pc, #308]	; (8001270 <HAL_GPIO_Init+0x340>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d013      	beq.n	8001166 <HAL_GPIO_Init+0x236>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a4c      	ldr	r2, [pc, #304]	; (8001274 <HAL_GPIO_Init+0x344>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d00d      	beq.n	8001162 <HAL_GPIO_Init+0x232>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a4b      	ldr	r2, [pc, #300]	; (8001278 <HAL_GPIO_Init+0x348>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d007      	beq.n	800115e <HAL_GPIO_Init+0x22e>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a4a      	ldr	r2, [pc, #296]	; (800127c <HAL_GPIO_Init+0x34c>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d101      	bne.n	800115a <HAL_GPIO_Init+0x22a>
 8001156:	2306      	movs	r3, #6
 8001158:	e00c      	b.n	8001174 <HAL_GPIO_Init+0x244>
 800115a:	2307      	movs	r3, #7
 800115c:	e00a      	b.n	8001174 <HAL_GPIO_Init+0x244>
 800115e:	2305      	movs	r3, #5
 8001160:	e008      	b.n	8001174 <HAL_GPIO_Init+0x244>
 8001162:	2304      	movs	r3, #4
 8001164:	e006      	b.n	8001174 <HAL_GPIO_Init+0x244>
 8001166:	2303      	movs	r3, #3
 8001168:	e004      	b.n	8001174 <HAL_GPIO_Init+0x244>
 800116a:	2302      	movs	r3, #2
 800116c:	e002      	b.n	8001174 <HAL_GPIO_Init+0x244>
 800116e:	2301      	movs	r3, #1
 8001170:	e000      	b.n	8001174 <HAL_GPIO_Init+0x244>
 8001172:	2300      	movs	r3, #0
 8001174:	697a      	ldr	r2, [r7, #20]
 8001176:	f002 0203 	and.w	r2, r2, #3
 800117a:	0092      	lsls	r2, r2, #2
 800117c:	4093      	lsls	r3, r2
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	4313      	orrs	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001184:	4937      	ldr	r1, [pc, #220]	; (8001264 <HAL_GPIO_Init+0x334>)
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	089b      	lsrs	r3, r3, #2
 800118a:	3302      	adds	r3, #2
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001192:	4b3b      	ldr	r3, [pc, #236]	; (8001280 <HAL_GPIO_Init+0x350>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	43db      	mvns	r3, r3
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	4013      	ands	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011b6:	4a32      	ldr	r2, [pc, #200]	; (8001280 <HAL_GPIO_Init+0x350>)
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011bc:	4b30      	ldr	r3, [pc, #192]	; (8001280 <HAL_GPIO_Init+0x350>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	43db      	mvns	r3, r3
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4013      	ands	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d003      	beq.n	80011e0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	4313      	orrs	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011e0:	4a27      	ldr	r2, [pc, #156]	; (8001280 <HAL_GPIO_Init+0x350>)
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011e6:	4b26      	ldr	r3, [pc, #152]	; (8001280 <HAL_GPIO_Init+0x350>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	43db      	mvns	r3, r3
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	4013      	ands	r3, r2
 80011f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	4313      	orrs	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800120a:	4a1d      	ldr	r2, [pc, #116]	; (8001280 <HAL_GPIO_Init+0x350>)
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001210:	4b1b      	ldr	r3, [pc, #108]	; (8001280 <HAL_GPIO_Init+0x350>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	43db      	mvns	r3, r3
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	4013      	ands	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d003      	beq.n	8001234 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	4313      	orrs	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001234:	4a12      	ldr	r2, [pc, #72]	; (8001280 <HAL_GPIO_Init+0x350>)
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	3301      	adds	r3, #1
 800123e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	fa22 f303 	lsr.w	r3, r2, r3
 800124a:	2b00      	cmp	r3, #0
 800124c:	f47f ae78 	bne.w	8000f40 <HAL_GPIO_Init+0x10>
  }
}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	371c      	adds	r7, #28
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	40021000 	.word	0x40021000
 8001264:	40010000 	.word	0x40010000
 8001268:	48000400 	.word	0x48000400
 800126c:	48000800 	.word	0x48000800
 8001270:	48000c00 	.word	0x48000c00
 8001274:	48001000 	.word	0x48001000
 8001278:	48001400 	.word	0x48001400
 800127c:	48001800 	.word	0x48001800
 8001280:	40010400 	.word	0x40010400

08001284 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	807b      	strh	r3, [r7, #2]
 8001290:	4613      	mov	r3, r2
 8001292:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001294:	787b      	ldrb	r3, [r7, #1]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800129a:	887a      	ldrh	r2, [r7, #2]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012a0:	e002      	b.n	80012a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012a2:	887a      	ldrh	r2, [r7, #2]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80012b8:	4b04      	ldr	r3, [pc, #16]	; (80012cc <HAL_PWREx_GetVoltageRange+0x18>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	40007000 	.word	0x40007000

080012d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012de:	d130      	bne.n	8001342 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80012e0:	4b23      	ldr	r3, [pc, #140]	; (8001370 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012ec:	d038      	beq.n	8001360 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012ee:	4b20      	ldr	r3, [pc, #128]	; (8001370 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012f6:	4a1e      	ldr	r2, [pc, #120]	; (8001370 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012fe:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2232      	movs	r2, #50	; 0x32
 8001304:	fb02 f303 	mul.w	r3, r2, r3
 8001308:	4a1b      	ldr	r2, [pc, #108]	; (8001378 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800130a:	fba2 2303 	umull	r2, r3, r2, r3
 800130e:	0c9b      	lsrs	r3, r3, #18
 8001310:	3301      	adds	r3, #1
 8001312:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001314:	e002      	b.n	800131c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	3b01      	subs	r3, #1
 800131a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800131c:	4b14      	ldr	r3, [pc, #80]	; (8001370 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800131e:	695b      	ldr	r3, [r3, #20]
 8001320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001324:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001328:	d102      	bne.n	8001330 <HAL_PWREx_ControlVoltageScaling+0x60>
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d1f2      	bne.n	8001316 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001330:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001332:	695b      	ldr	r3, [r3, #20]
 8001334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800133c:	d110      	bne.n	8001360 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e00f      	b.n	8001362 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001342:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800134a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800134e:	d007      	beq.n	8001360 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001350:	4b07      	ldr	r3, [pc, #28]	; (8001370 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001358:	4a05      	ldr	r2, [pc, #20]	; (8001370 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800135a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800135e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	40007000 	.word	0x40007000
 8001374:	20000000 	.word	0x20000000
 8001378:	431bde83 	.word	0x431bde83

0800137c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b088      	sub	sp, #32
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e3ca      	b.n	8001b24 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800138e:	4b97      	ldr	r3, [pc, #604]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	f003 030c 	and.w	r3, r3, #12
 8001396:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001398:	4b94      	ldr	r3, [pc, #592]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	f003 0303 	and.w	r3, r3, #3
 80013a0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0310 	and.w	r3, r3, #16
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	f000 80e4 	beq.w	8001578 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d007      	beq.n	80013c6 <HAL_RCC_OscConfig+0x4a>
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	2b0c      	cmp	r3, #12
 80013ba:	f040 808b 	bne.w	80014d4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	f040 8087 	bne.w	80014d4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013c6:	4b89      	ldr	r3, [pc, #548]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d005      	beq.n	80013de <HAL_RCC_OscConfig+0x62>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d101      	bne.n	80013de <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e3a2      	b.n	8001b24 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a1a      	ldr	r2, [r3, #32]
 80013e2:	4b82      	ldr	r3, [pc, #520]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0308 	and.w	r3, r3, #8
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d004      	beq.n	80013f8 <HAL_RCC_OscConfig+0x7c>
 80013ee:	4b7f      	ldr	r3, [pc, #508]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013f6:	e005      	b.n	8001404 <HAL_RCC_OscConfig+0x88>
 80013f8:	4b7c      	ldr	r3, [pc, #496]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 80013fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013fe:	091b      	lsrs	r3, r3, #4
 8001400:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001404:	4293      	cmp	r3, r2
 8001406:	d223      	bcs.n	8001450 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a1b      	ldr	r3, [r3, #32]
 800140c:	4618      	mov	r0, r3
 800140e:	f000 fd55 	bl	8001ebc <RCC_SetFlashLatencyFromMSIRange>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e383      	b.n	8001b24 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800141c:	4b73      	ldr	r3, [pc, #460]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a72      	ldr	r2, [pc, #456]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 8001422:	f043 0308 	orr.w	r3, r3, #8
 8001426:	6013      	str	r3, [r2, #0]
 8001428:	4b70      	ldr	r3, [pc, #448]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a1b      	ldr	r3, [r3, #32]
 8001434:	496d      	ldr	r1, [pc, #436]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 8001436:	4313      	orrs	r3, r2
 8001438:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800143a:	4b6c      	ldr	r3, [pc, #432]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	021b      	lsls	r3, r3, #8
 8001448:	4968      	ldr	r1, [pc, #416]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 800144a:	4313      	orrs	r3, r2
 800144c:	604b      	str	r3, [r1, #4]
 800144e:	e025      	b.n	800149c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001450:	4b66      	ldr	r3, [pc, #408]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a65      	ldr	r2, [pc, #404]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 8001456:	f043 0308 	orr.w	r3, r3, #8
 800145a:	6013      	str	r3, [r2, #0]
 800145c:	4b63      	ldr	r3, [pc, #396]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a1b      	ldr	r3, [r3, #32]
 8001468:	4960      	ldr	r1, [pc, #384]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 800146a:	4313      	orrs	r3, r2
 800146c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800146e:	4b5f      	ldr	r3, [pc, #380]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69db      	ldr	r3, [r3, #28]
 800147a:	021b      	lsls	r3, r3, #8
 800147c:	495b      	ldr	r1, [pc, #364]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 800147e:	4313      	orrs	r3, r2
 8001480:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d109      	bne.n	800149c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a1b      	ldr	r3, [r3, #32]
 800148c:	4618      	mov	r0, r3
 800148e:	f000 fd15 	bl	8001ebc <RCC_SetFlashLatencyFromMSIRange>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e343      	b.n	8001b24 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800149c:	f000 fc4a 	bl	8001d34 <HAL_RCC_GetSysClockFreq>
 80014a0:	4602      	mov	r2, r0
 80014a2:	4b52      	ldr	r3, [pc, #328]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	091b      	lsrs	r3, r3, #4
 80014a8:	f003 030f 	and.w	r3, r3, #15
 80014ac:	4950      	ldr	r1, [pc, #320]	; (80015f0 <HAL_RCC_OscConfig+0x274>)
 80014ae:	5ccb      	ldrb	r3, [r1, r3]
 80014b0:	f003 031f 	and.w	r3, r3, #31
 80014b4:	fa22 f303 	lsr.w	r3, r2, r3
 80014b8:	4a4e      	ldr	r2, [pc, #312]	; (80015f4 <HAL_RCC_OscConfig+0x278>)
 80014ba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014bc:	4b4e      	ldr	r3, [pc, #312]	; (80015f8 <HAL_RCC_OscConfig+0x27c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fbcf 	bl	8000c64 <HAL_InitTick>
 80014c6:	4603      	mov	r3, r0
 80014c8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d052      	beq.n	8001576 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
 80014d2:	e327      	b.n	8001b24 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d032      	beq.n	8001542 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014dc:	4b43      	ldr	r3, [pc, #268]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a42      	ldr	r2, [pc, #264]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014e8:	f7ff fc0c 	bl	8000d04 <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014f0:	f7ff fc08 	bl	8000d04 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e310      	b.n	8001b24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001502:	4b3a      	ldr	r3, [pc, #232]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d0f0      	beq.n	80014f0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800150e:	4b37      	ldr	r3, [pc, #220]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a36      	ldr	r2, [pc, #216]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 8001514:	f043 0308 	orr.w	r3, r3, #8
 8001518:	6013      	str	r3, [r2, #0]
 800151a:	4b34      	ldr	r3, [pc, #208]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a1b      	ldr	r3, [r3, #32]
 8001526:	4931      	ldr	r1, [pc, #196]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 8001528:	4313      	orrs	r3, r2
 800152a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800152c:	4b2f      	ldr	r3, [pc, #188]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	69db      	ldr	r3, [r3, #28]
 8001538:	021b      	lsls	r3, r3, #8
 800153a:	492c      	ldr	r1, [pc, #176]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 800153c:	4313      	orrs	r3, r2
 800153e:	604b      	str	r3, [r1, #4]
 8001540:	e01a      	b.n	8001578 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001542:	4b2a      	ldr	r3, [pc, #168]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a29      	ldr	r2, [pc, #164]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 8001548:	f023 0301 	bic.w	r3, r3, #1
 800154c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800154e:	f7ff fbd9 	bl	8000d04 <HAL_GetTick>
 8001552:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001554:	e008      	b.n	8001568 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001556:	f7ff fbd5 	bl	8000d04 <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e2dd      	b.n	8001b24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001568:	4b20      	ldr	r3, [pc, #128]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1f0      	bne.n	8001556 <HAL_RCC_OscConfig+0x1da>
 8001574:	e000      	b.n	8001578 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001576:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0301 	and.w	r3, r3, #1
 8001580:	2b00      	cmp	r3, #0
 8001582:	d074      	beq.n	800166e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	2b08      	cmp	r3, #8
 8001588:	d005      	beq.n	8001596 <HAL_RCC_OscConfig+0x21a>
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	2b0c      	cmp	r3, #12
 800158e:	d10e      	bne.n	80015ae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	2b03      	cmp	r3, #3
 8001594:	d10b      	bne.n	80015ae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001596:	4b15      	ldr	r3, [pc, #84]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d064      	beq.n	800166c <HAL_RCC_OscConfig+0x2f0>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d160      	bne.n	800166c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e2ba      	b.n	8001b24 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015b6:	d106      	bne.n	80015c6 <HAL_RCC_OscConfig+0x24a>
 80015b8:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a0b      	ldr	r2, [pc, #44]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 80015be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015c2:	6013      	str	r3, [r2, #0]
 80015c4:	e026      	b.n	8001614 <HAL_RCC_OscConfig+0x298>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015ce:	d115      	bne.n	80015fc <HAL_RCC_OscConfig+0x280>
 80015d0:	4b06      	ldr	r3, [pc, #24]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a05      	ldr	r2, [pc, #20]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 80015d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015da:	6013      	str	r3, [r2, #0]
 80015dc:	4b03      	ldr	r3, [pc, #12]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a02      	ldr	r2, [pc, #8]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 80015e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e6:	6013      	str	r3, [r2, #0]
 80015e8:	e014      	b.n	8001614 <HAL_RCC_OscConfig+0x298>
 80015ea:	bf00      	nop
 80015ec:	40021000 	.word	0x40021000
 80015f0:	08004444 	.word	0x08004444
 80015f4:	20000000 	.word	0x20000000
 80015f8:	20000004 	.word	0x20000004
 80015fc:	4ba0      	ldr	r3, [pc, #640]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a9f      	ldr	r2, [pc, #636]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 8001602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001606:	6013      	str	r3, [r2, #0]
 8001608:	4b9d      	ldr	r3, [pc, #628]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a9c      	ldr	r2, [pc, #624]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 800160e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001612:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d013      	beq.n	8001644 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800161c:	f7ff fb72 	bl	8000d04 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001624:	f7ff fb6e 	bl	8000d04 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b64      	cmp	r3, #100	; 0x64
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e276      	b.n	8001b24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001636:	4b92      	ldr	r3, [pc, #584]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d0f0      	beq.n	8001624 <HAL_RCC_OscConfig+0x2a8>
 8001642:	e014      	b.n	800166e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001644:	f7ff fb5e 	bl	8000d04 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800164c:	f7ff fb5a 	bl	8000d04 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b64      	cmp	r3, #100	; 0x64
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e262      	b.n	8001b24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800165e:	4b88      	ldr	r3, [pc, #544]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1f0      	bne.n	800164c <HAL_RCC_OscConfig+0x2d0>
 800166a:	e000      	b.n	800166e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800166c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d060      	beq.n	800173c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	2b04      	cmp	r3, #4
 800167e:	d005      	beq.n	800168c <HAL_RCC_OscConfig+0x310>
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	2b0c      	cmp	r3, #12
 8001684:	d119      	bne.n	80016ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	2b02      	cmp	r3, #2
 800168a:	d116      	bne.n	80016ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800168c:	4b7c      	ldr	r3, [pc, #496]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001694:	2b00      	cmp	r3, #0
 8001696:	d005      	beq.n	80016a4 <HAL_RCC_OscConfig+0x328>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d101      	bne.n	80016a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e23f      	b.n	8001b24 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a4:	4b76      	ldr	r3, [pc, #472]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	061b      	lsls	r3, r3, #24
 80016b2:	4973      	ldr	r1, [pc, #460]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 80016b4:	4313      	orrs	r3, r2
 80016b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016b8:	e040      	b.n	800173c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d023      	beq.n	800170a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016c2:	4b6f      	ldr	r3, [pc, #444]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a6e      	ldr	r2, [pc, #440]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 80016c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ce:	f7ff fb19 	bl	8000d04 <HAL_GetTick>
 80016d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016d4:	e008      	b.n	80016e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016d6:	f7ff fb15 	bl	8000d04 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e21d      	b.n	8001b24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016e8:	4b65      	ldr	r3, [pc, #404]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0f0      	beq.n	80016d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f4:	4b62      	ldr	r3, [pc, #392]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	691b      	ldr	r3, [r3, #16]
 8001700:	061b      	lsls	r3, r3, #24
 8001702:	495f      	ldr	r1, [pc, #380]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 8001704:	4313      	orrs	r3, r2
 8001706:	604b      	str	r3, [r1, #4]
 8001708:	e018      	b.n	800173c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800170a:	4b5d      	ldr	r3, [pc, #372]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a5c      	ldr	r2, [pc, #368]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 8001710:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001714:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001716:	f7ff faf5 	bl	8000d04 <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800171c:	e008      	b.n	8001730 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800171e:	f7ff faf1 	bl	8000d04 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e1f9      	b.n	8001b24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001730:	4b53      	ldr	r3, [pc, #332]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1f0      	bne.n	800171e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0308 	and.w	r3, r3, #8
 8001744:	2b00      	cmp	r3, #0
 8001746:	d03c      	beq.n	80017c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	695b      	ldr	r3, [r3, #20]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d01c      	beq.n	800178a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001750:	4b4b      	ldr	r3, [pc, #300]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 8001752:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001756:	4a4a      	ldr	r2, [pc, #296]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001760:	f7ff fad0 	bl	8000d04 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001768:	f7ff facc 	bl	8000d04 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e1d4      	b.n	8001b24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800177a:	4b41      	ldr	r3, [pc, #260]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 800177c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0ef      	beq.n	8001768 <HAL_RCC_OscConfig+0x3ec>
 8001788:	e01b      	b.n	80017c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800178a:	4b3d      	ldr	r3, [pc, #244]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 800178c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001790:	4a3b      	ldr	r2, [pc, #236]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 8001792:	f023 0301 	bic.w	r3, r3, #1
 8001796:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800179a:	f7ff fab3 	bl	8000d04 <HAL_GetTick>
 800179e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017a0:	e008      	b.n	80017b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017a2:	f7ff faaf 	bl	8000d04 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e1b7      	b.n	8001b24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017b4:	4b32      	ldr	r3, [pc, #200]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 80017b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1ef      	bne.n	80017a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0304 	and.w	r3, r3, #4
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f000 80a6 	beq.w	800191c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017d0:	2300      	movs	r3, #0
 80017d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80017d4:	4b2a      	ldr	r3, [pc, #168]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 80017d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d10d      	bne.n	80017fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017e0:	4b27      	ldr	r3, [pc, #156]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 80017e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e4:	4a26      	ldr	r2, [pc, #152]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 80017e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ea:	6593      	str	r3, [r2, #88]	; 0x58
 80017ec:	4b24      	ldr	r3, [pc, #144]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 80017ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017f8:	2301      	movs	r3, #1
 80017fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017fc:	4b21      	ldr	r3, [pc, #132]	; (8001884 <HAL_RCC_OscConfig+0x508>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001804:	2b00      	cmp	r3, #0
 8001806:	d118      	bne.n	800183a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001808:	4b1e      	ldr	r3, [pc, #120]	; (8001884 <HAL_RCC_OscConfig+0x508>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a1d      	ldr	r2, [pc, #116]	; (8001884 <HAL_RCC_OscConfig+0x508>)
 800180e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001812:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001814:	f7ff fa76 	bl	8000d04 <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800181c:	f7ff fa72 	bl	8000d04 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e17a      	b.n	8001b24 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800182e:	4b15      	ldr	r3, [pc, #84]	; (8001884 <HAL_RCC_OscConfig+0x508>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001836:	2b00      	cmp	r3, #0
 8001838:	d0f0      	beq.n	800181c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d108      	bne.n	8001854 <HAL_RCC_OscConfig+0x4d8>
 8001842:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 8001844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001848:	4a0d      	ldr	r2, [pc, #52]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 800184a:	f043 0301 	orr.w	r3, r3, #1
 800184e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001852:	e029      	b.n	80018a8 <HAL_RCC_OscConfig+0x52c>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	2b05      	cmp	r3, #5
 800185a:	d115      	bne.n	8001888 <HAL_RCC_OscConfig+0x50c>
 800185c:	4b08      	ldr	r3, [pc, #32]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 800185e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001862:	4a07      	ldr	r2, [pc, #28]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 8001864:	f043 0304 	orr.w	r3, r3, #4
 8001868:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800186c:	4b04      	ldr	r3, [pc, #16]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 800186e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001872:	4a03      	ldr	r2, [pc, #12]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800187c:	e014      	b.n	80018a8 <HAL_RCC_OscConfig+0x52c>
 800187e:	bf00      	nop
 8001880:	40021000 	.word	0x40021000
 8001884:	40007000 	.word	0x40007000
 8001888:	4b9c      	ldr	r3, [pc, #624]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 800188a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800188e:	4a9b      	ldr	r2, [pc, #620]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 8001890:	f023 0301 	bic.w	r3, r3, #1
 8001894:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001898:	4b98      	ldr	r3, [pc, #608]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 800189a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800189e:	4a97      	ldr	r2, [pc, #604]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 80018a0:	f023 0304 	bic.w	r3, r3, #4
 80018a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d016      	beq.n	80018de <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b0:	f7ff fa28 	bl	8000d04 <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018b6:	e00a      	b.n	80018ce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018b8:	f7ff fa24 	bl	8000d04 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e12a      	b.n	8001b24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018ce:	4b8b      	ldr	r3, [pc, #556]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 80018d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d0ed      	beq.n	80018b8 <HAL_RCC_OscConfig+0x53c>
 80018dc:	e015      	b.n	800190a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018de:	f7ff fa11 	bl	8000d04 <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018e4:	e00a      	b.n	80018fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018e6:	f7ff fa0d 	bl	8000d04 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e113      	b.n	8001b24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018fc:	4b7f      	ldr	r3, [pc, #508]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 80018fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1ed      	bne.n	80018e6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800190a:	7ffb      	ldrb	r3, [r7, #31]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d105      	bne.n	800191c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001910:	4b7a      	ldr	r3, [pc, #488]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 8001912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001914:	4a79      	ldr	r2, [pc, #484]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 8001916:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800191a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001920:	2b00      	cmp	r3, #0
 8001922:	f000 80fe 	beq.w	8001b22 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192a:	2b02      	cmp	r3, #2
 800192c:	f040 80d0 	bne.w	8001ad0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001930:	4b72      	ldr	r3, [pc, #456]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	f003 0203 	and.w	r2, r3, #3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001940:	429a      	cmp	r2, r3
 8001942:	d130      	bne.n	80019a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	3b01      	subs	r3, #1
 8001950:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001952:	429a      	cmp	r2, r3
 8001954:	d127      	bne.n	80019a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001960:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001962:	429a      	cmp	r2, r3
 8001964:	d11f      	bne.n	80019a6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001970:	2a07      	cmp	r2, #7
 8001972:	bf14      	ite	ne
 8001974:	2201      	movne	r2, #1
 8001976:	2200      	moveq	r2, #0
 8001978:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800197a:	4293      	cmp	r3, r2
 800197c:	d113      	bne.n	80019a6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001988:	085b      	lsrs	r3, r3, #1
 800198a:	3b01      	subs	r3, #1
 800198c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800198e:	429a      	cmp	r2, r3
 8001990:	d109      	bne.n	80019a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199c:	085b      	lsrs	r3, r3, #1
 800199e:	3b01      	subs	r3, #1
 80019a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d06e      	beq.n	8001a84 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	2b0c      	cmp	r3, #12
 80019aa:	d069      	beq.n	8001a80 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80019ac:	4b53      	ldr	r3, [pc, #332]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d105      	bne.n	80019c4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80019b8:	4b50      	ldr	r3, [pc, #320]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e0ad      	b.n	8001b24 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80019c8:	4b4c      	ldr	r3, [pc, #304]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a4b      	ldr	r2, [pc, #300]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 80019ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019d2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019d4:	f7ff f996 	bl	8000d04 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019dc:	f7ff f992 	bl	8000d04 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e09a      	b.n	8001b24 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019ee:	4b43      	ldr	r3, [pc, #268]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1f0      	bne.n	80019dc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019fa:	4b40      	ldr	r3, [pc, #256]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 80019fc:	68da      	ldr	r2, [r3, #12]
 80019fe:	4b40      	ldr	r3, [pc, #256]	; (8001b00 <HAL_RCC_OscConfig+0x784>)
 8001a00:	4013      	ands	r3, r2
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a0a:	3a01      	subs	r2, #1
 8001a0c:	0112      	lsls	r2, r2, #4
 8001a0e:	4311      	orrs	r1, r2
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a14:	0212      	lsls	r2, r2, #8
 8001a16:	4311      	orrs	r1, r2
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a1c:	0852      	lsrs	r2, r2, #1
 8001a1e:	3a01      	subs	r2, #1
 8001a20:	0552      	lsls	r2, r2, #21
 8001a22:	4311      	orrs	r1, r2
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a28:	0852      	lsrs	r2, r2, #1
 8001a2a:	3a01      	subs	r2, #1
 8001a2c:	0652      	lsls	r2, r2, #25
 8001a2e:	4311      	orrs	r1, r2
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a34:	0912      	lsrs	r2, r2, #4
 8001a36:	0452      	lsls	r2, r2, #17
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	4930      	ldr	r1, [pc, #192]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a40:	4b2e      	ldr	r3, [pc, #184]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a2d      	ldr	r2, [pc, #180]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 8001a46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a4a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a4c:	4b2b      	ldr	r3, [pc, #172]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	4a2a      	ldr	r2, [pc, #168]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 8001a52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a56:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a58:	f7ff f954 	bl	8000d04 <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a60:	f7ff f950 	bl	8000d04 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e058      	b.n	8001b24 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a72:	4b22      	ldr	r3, [pc, #136]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d0f0      	beq.n	8001a60 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a7e:	e050      	b.n	8001b22 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e04f      	b.n	8001b24 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a84:	4b1d      	ldr	r3, [pc, #116]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d148      	bne.n	8001b22 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a90:	4b1a      	ldr	r3, [pc, #104]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a19      	ldr	r2, [pc, #100]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 8001a96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a9a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a9c:	4b17      	ldr	r3, [pc, #92]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	4a16      	ldr	r2, [pc, #88]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 8001aa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aa6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001aa8:	f7ff f92c 	bl	8000d04 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab0:	f7ff f928 	bl	8000d04 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e030      	b.n	8001b24 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d0f0      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x734>
 8001ace:	e028      	b.n	8001b22 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	2b0c      	cmp	r3, #12
 8001ad4:	d023      	beq.n	8001b1e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad6:	4b09      	ldr	r3, [pc, #36]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a08      	ldr	r2, [pc, #32]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 8001adc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ae0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae2:	f7ff f90f 	bl	8000d04 <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ae8:	e00c      	b.n	8001b04 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aea:	f7ff f90b 	bl	8000d04 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d905      	bls.n	8001b04 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e013      	b.n	8001b24 <HAL_RCC_OscConfig+0x7a8>
 8001afc:	40021000 	.word	0x40021000
 8001b00:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b04:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <HAL_RCC_OscConfig+0x7b0>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1ec      	bne.n	8001aea <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b10:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <HAL_RCC_OscConfig+0x7b0>)
 8001b12:	68da      	ldr	r2, [r3, #12]
 8001b14:	4905      	ldr	r1, [pc, #20]	; (8001b2c <HAL_RCC_OscConfig+0x7b0>)
 8001b16:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <HAL_RCC_OscConfig+0x7b4>)
 8001b18:	4013      	ands	r3, r2
 8001b1a:	60cb      	str	r3, [r1, #12]
 8001b1c:	e001      	b.n	8001b22 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e000      	b.n	8001b24 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3720      	adds	r7, #32
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	feeefffc 	.word	0xfeeefffc

08001b34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d101      	bne.n	8001b48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e0e7      	b.n	8001d18 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b48:	4b75      	ldr	r3, [pc, #468]	; (8001d20 <HAL_RCC_ClockConfig+0x1ec>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0307 	and.w	r3, r3, #7
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d910      	bls.n	8001b78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b56:	4b72      	ldr	r3, [pc, #456]	; (8001d20 <HAL_RCC_ClockConfig+0x1ec>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f023 0207 	bic.w	r2, r3, #7
 8001b5e:	4970      	ldr	r1, [pc, #448]	; (8001d20 <HAL_RCC_ClockConfig+0x1ec>)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b66:	4b6e      	ldr	r3, [pc, #440]	; (8001d20 <HAL_RCC_ClockConfig+0x1ec>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d001      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e0cf      	b.n	8001d18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d010      	beq.n	8001ba6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	4b66      	ldr	r3, [pc, #408]	; (8001d24 <HAL_RCC_ClockConfig+0x1f0>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d908      	bls.n	8001ba6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b94:	4b63      	ldr	r3, [pc, #396]	; (8001d24 <HAL_RCC_ClockConfig+0x1f0>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	4960      	ldr	r1, [pc, #384]	; (8001d24 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d04c      	beq.n	8001c4c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b03      	cmp	r3, #3
 8001bb8:	d107      	bne.n	8001bca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bba:	4b5a      	ldr	r3, [pc, #360]	; (8001d24 <HAL_RCC_ClockConfig+0x1f0>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d121      	bne.n	8001c0a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e0a6      	b.n	8001d18 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d107      	bne.n	8001be2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bd2:	4b54      	ldr	r3, [pc, #336]	; (8001d24 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d115      	bne.n	8001c0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e09a      	b.n	8001d18 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d107      	bne.n	8001bfa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bea:	4b4e      	ldr	r3, [pc, #312]	; (8001d24 <HAL_RCC_ClockConfig+0x1f0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d109      	bne.n	8001c0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e08e      	b.n	8001d18 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bfa:	4b4a      	ldr	r3, [pc, #296]	; (8001d24 <HAL_RCC_ClockConfig+0x1f0>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e086      	b.n	8001d18 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c0a:	4b46      	ldr	r3, [pc, #280]	; (8001d24 <HAL_RCC_ClockConfig+0x1f0>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f023 0203 	bic.w	r2, r3, #3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	4943      	ldr	r1, [pc, #268]	; (8001d24 <HAL_RCC_ClockConfig+0x1f0>)
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c1c:	f7ff f872 	bl	8000d04 <HAL_GetTick>
 8001c20:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c22:	e00a      	b.n	8001c3a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c24:	f7ff f86e 	bl	8000d04 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e06e      	b.n	8001d18 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c3a:	4b3a      	ldr	r3, [pc, #232]	; (8001d24 <HAL_RCC_ClockConfig+0x1f0>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 020c 	and.w	r2, r3, #12
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d1eb      	bne.n	8001c24 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d010      	beq.n	8001c7a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	4b31      	ldr	r3, [pc, #196]	; (8001d24 <HAL_RCC_ClockConfig+0x1f0>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d208      	bcs.n	8001c7a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c68:	4b2e      	ldr	r3, [pc, #184]	; (8001d24 <HAL_RCC_ClockConfig+0x1f0>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	492b      	ldr	r1, [pc, #172]	; (8001d24 <HAL_RCC_ClockConfig+0x1f0>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c7a:	4b29      	ldr	r3, [pc, #164]	; (8001d20 <HAL_RCC_ClockConfig+0x1ec>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d210      	bcs.n	8001caa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c88:	4b25      	ldr	r3, [pc, #148]	; (8001d20 <HAL_RCC_ClockConfig+0x1ec>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f023 0207 	bic.w	r2, r3, #7
 8001c90:	4923      	ldr	r1, [pc, #140]	; (8001d20 <HAL_RCC_ClockConfig+0x1ec>)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c98:	4b21      	ldr	r3, [pc, #132]	; (8001d20 <HAL_RCC_ClockConfig+0x1ec>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0307 	and.w	r3, r3, #7
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d001      	beq.n	8001caa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e036      	b.n	8001d18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0304 	and.w	r3, r3, #4
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d008      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cb6:	4b1b      	ldr	r3, [pc, #108]	; (8001d24 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	4918      	ldr	r1, [pc, #96]	; (8001d24 <HAL_RCC_ClockConfig+0x1f0>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0308 	and.w	r3, r3, #8
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d009      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cd4:	4b13      	ldr	r3, [pc, #76]	; (8001d24 <HAL_RCC_ClockConfig+0x1f0>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	4910      	ldr	r1, [pc, #64]	; (8001d24 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ce8:	f000 f824 	bl	8001d34 <HAL_RCC_GetSysClockFreq>
 8001cec:	4602      	mov	r2, r0
 8001cee:	4b0d      	ldr	r3, [pc, #52]	; (8001d24 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	091b      	lsrs	r3, r3, #4
 8001cf4:	f003 030f 	and.w	r3, r3, #15
 8001cf8:	490b      	ldr	r1, [pc, #44]	; (8001d28 <HAL_RCC_ClockConfig+0x1f4>)
 8001cfa:	5ccb      	ldrb	r3, [r1, r3]
 8001cfc:	f003 031f 	and.w	r3, r3, #31
 8001d00:	fa22 f303 	lsr.w	r3, r2, r3
 8001d04:	4a09      	ldr	r2, [pc, #36]	; (8001d2c <HAL_RCC_ClockConfig+0x1f8>)
 8001d06:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d08:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <HAL_RCC_ClockConfig+0x1fc>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7fe ffa9 	bl	8000c64 <HAL_InitTick>
 8001d12:	4603      	mov	r3, r0
 8001d14:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d16:	7afb      	ldrb	r3, [r7, #11]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40022000 	.word	0x40022000
 8001d24:	40021000 	.word	0x40021000
 8001d28:	08004444 	.word	0x08004444
 8001d2c:	20000000 	.word	0x20000000
 8001d30:	20000004 	.word	0x20000004

08001d34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b089      	sub	sp, #36	; 0x24
 8001d38:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61fb      	str	r3, [r7, #28]
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d42:	4b3e      	ldr	r3, [pc, #248]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f003 030c 	and.w	r3, r3, #12
 8001d4a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d4c:	4b3b      	ldr	r3, [pc, #236]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	f003 0303 	and.w	r3, r3, #3
 8001d54:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d005      	beq.n	8001d68 <HAL_RCC_GetSysClockFreq+0x34>
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	2b0c      	cmp	r3, #12
 8001d60:	d121      	bne.n	8001da6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d11e      	bne.n	8001da6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d68:	4b34      	ldr	r3, [pc, #208]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0308 	and.w	r3, r3, #8
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d107      	bne.n	8001d84 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d74:	4b31      	ldr	r3, [pc, #196]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d7a:	0a1b      	lsrs	r3, r3, #8
 8001d7c:	f003 030f 	and.w	r3, r3, #15
 8001d80:	61fb      	str	r3, [r7, #28]
 8001d82:	e005      	b.n	8001d90 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d84:	4b2d      	ldr	r3, [pc, #180]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	091b      	lsrs	r3, r3, #4
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d90:	4a2b      	ldr	r2, [pc, #172]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d98:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d10d      	bne.n	8001dbc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001da4:	e00a      	b.n	8001dbc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	2b04      	cmp	r3, #4
 8001daa:	d102      	bne.n	8001db2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001dac:	4b25      	ldr	r3, [pc, #148]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x110>)
 8001dae:	61bb      	str	r3, [r7, #24]
 8001db0:	e004      	b.n	8001dbc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	2b08      	cmp	r3, #8
 8001db6:	d101      	bne.n	8001dbc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001db8:	4b23      	ldr	r3, [pc, #140]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x114>)
 8001dba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	2b0c      	cmp	r3, #12
 8001dc0:	d134      	bne.n	8001e2c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dc2:	4b1e      	ldr	r3, [pc, #120]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
 8001dca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d003      	beq.n	8001dda <HAL_RCC_GetSysClockFreq+0xa6>
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	2b03      	cmp	r3, #3
 8001dd6:	d003      	beq.n	8001de0 <HAL_RCC_GetSysClockFreq+0xac>
 8001dd8:	e005      	b.n	8001de6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001dda:	4b1a      	ldr	r3, [pc, #104]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ddc:	617b      	str	r3, [r7, #20]
      break;
 8001dde:	e005      	b.n	8001dec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001de0:	4b19      	ldr	r3, [pc, #100]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x114>)
 8001de2:	617b      	str	r3, [r7, #20]
      break;
 8001de4:	e002      	b.n	8001dec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	617b      	str	r3, [r7, #20]
      break;
 8001dea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001dec:	4b13      	ldr	r3, [pc, #76]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	091b      	lsrs	r3, r3, #4
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	3301      	adds	r3, #1
 8001df8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001dfa:	4b10      	ldr	r3, [pc, #64]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	0a1b      	lsrs	r3, r3, #8
 8001e00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e04:	697a      	ldr	r2, [r7, #20]
 8001e06:	fb03 f202 	mul.w	r2, r3, r2
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e10:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e12:	4b0a      	ldr	r3, [pc, #40]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	0e5b      	lsrs	r3, r3, #25
 8001e18:	f003 0303 	and.w	r3, r3, #3
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e22:	697a      	ldr	r2, [r7, #20]
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e2c:	69bb      	ldr	r3, [r7, #24]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3724      	adds	r7, #36	; 0x24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	0800445c 	.word	0x0800445c
 8001e44:	00f42400 	.word	0x00f42400
 8001e48:	007a1200 	.word	0x007a1200

08001e4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e50:	4b03      	ldr	r3, [pc, #12]	; (8001e60 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e52:	681b      	ldr	r3, [r3, #0]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	20000000 	.word	0x20000000

08001e64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e68:	f7ff fff0 	bl	8001e4c <HAL_RCC_GetHCLKFreq>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	0a1b      	lsrs	r3, r3, #8
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	4904      	ldr	r1, [pc, #16]	; (8001e8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e7a:	5ccb      	ldrb	r3, [r1, r3]
 8001e7c:	f003 031f 	and.w	r3, r3, #31
 8001e80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	08004454 	.word	0x08004454

08001e90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e94:	f7ff ffda 	bl	8001e4c <HAL_RCC_GetHCLKFreq>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	0adb      	lsrs	r3, r3, #11
 8001ea0:	f003 0307 	and.w	r3, r3, #7
 8001ea4:	4904      	ldr	r1, [pc, #16]	; (8001eb8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ea6:	5ccb      	ldrb	r3, [r1, r3]
 8001ea8:	f003 031f 	and.w	r3, r3, #31
 8001eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	08004454 	.word	0x08004454

08001ebc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ec8:	4b2a      	ldr	r3, [pc, #168]	; (8001f74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ecc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ed4:	f7ff f9ee 	bl	80012b4 <HAL_PWREx_GetVoltageRange>
 8001ed8:	6178      	str	r0, [r7, #20]
 8001eda:	e014      	b.n	8001f06 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001edc:	4b25      	ldr	r3, [pc, #148]	; (8001f74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee0:	4a24      	ldr	r2, [pc, #144]	; (8001f74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ee8:	4b22      	ldr	r3, [pc, #136]	; (8001f74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ef4:	f7ff f9de 	bl	80012b4 <HAL_PWREx_GetVoltageRange>
 8001ef8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001efa:	4b1e      	ldr	r3, [pc, #120]	; (8001f74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efe:	4a1d      	ldr	r2, [pc, #116]	; (8001f74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f04:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f0c:	d10b      	bne.n	8001f26 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2b80      	cmp	r3, #128	; 0x80
 8001f12:	d919      	bls.n	8001f48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2ba0      	cmp	r3, #160	; 0xa0
 8001f18:	d902      	bls.n	8001f20 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	613b      	str	r3, [r7, #16]
 8001f1e:	e013      	b.n	8001f48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f20:	2301      	movs	r3, #1
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	e010      	b.n	8001f48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2b80      	cmp	r3, #128	; 0x80
 8001f2a:	d902      	bls.n	8001f32 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	613b      	str	r3, [r7, #16]
 8001f30:	e00a      	b.n	8001f48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b80      	cmp	r3, #128	; 0x80
 8001f36:	d102      	bne.n	8001f3e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f38:	2302      	movs	r3, #2
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	e004      	b.n	8001f48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b70      	cmp	r3, #112	; 0x70
 8001f42:	d101      	bne.n	8001f48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f44:	2301      	movs	r3, #1
 8001f46:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f48:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f023 0207 	bic.w	r2, r3, #7
 8001f50:	4909      	ldr	r1, [pc, #36]	; (8001f78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f58:	4b07      	ldr	r3, [pc, #28]	; (8001f78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d001      	beq.n	8001f6a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3718      	adds	r7, #24
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40021000 	.word	0x40021000
 8001f78:	40022000 	.word	0x40022000

08001f7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f84:	2300      	movs	r3, #0
 8001f86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f88:	2300      	movs	r3, #0
 8001f8a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d041      	beq.n	800201c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f9c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001fa0:	d02a      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001fa2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001fa6:	d824      	bhi.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001fa8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001fac:	d008      	beq.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001fae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001fb2:	d81e      	bhi.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d00a      	beq.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001fb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fbc:	d010      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001fbe:	e018      	b.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001fc0:	4b86      	ldr	r3, [pc, #536]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	4a85      	ldr	r2, [pc, #532]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fcc:	e015      	b.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f000 fabb 	bl	8002550 <RCCEx_PLLSAI1_Config>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fde:	e00c      	b.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3320      	adds	r3, #32
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f000 fba6 	bl	8002738 <RCCEx_PLLSAI2_Config>
 8001fec:	4603      	mov	r3, r0
 8001fee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ff0:	e003      	b.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	74fb      	strb	r3, [r7, #19]
      break;
 8001ff6:	e000      	b.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001ff8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ffa:	7cfb      	ldrb	r3, [r7, #19]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d10b      	bne.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002000:	4b76      	ldr	r3, [pc, #472]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002006:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800200e:	4973      	ldr	r1, [pc, #460]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002010:	4313      	orrs	r3, r2
 8002012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002016:	e001      	b.n	800201c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002018:	7cfb      	ldrb	r3, [r7, #19]
 800201a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d041      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800202c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002030:	d02a      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002032:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002036:	d824      	bhi.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002038:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800203c:	d008      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800203e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002042:	d81e      	bhi.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00a      	beq.n	800205e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002048:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800204c:	d010      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800204e:	e018      	b.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002050:	4b62      	ldr	r3, [pc, #392]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	4a61      	ldr	r2, [pc, #388]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002056:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800205a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800205c:	e015      	b.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	3304      	adds	r3, #4
 8002062:	2100      	movs	r1, #0
 8002064:	4618      	mov	r0, r3
 8002066:	f000 fa73 	bl	8002550 <RCCEx_PLLSAI1_Config>
 800206a:	4603      	mov	r3, r0
 800206c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800206e:	e00c      	b.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3320      	adds	r3, #32
 8002074:	2100      	movs	r1, #0
 8002076:	4618      	mov	r0, r3
 8002078:	f000 fb5e 	bl	8002738 <RCCEx_PLLSAI2_Config>
 800207c:	4603      	mov	r3, r0
 800207e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002080:	e003      	b.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	74fb      	strb	r3, [r7, #19]
      break;
 8002086:	e000      	b.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002088:	bf00      	nop
    }

    if(ret == HAL_OK)
 800208a:	7cfb      	ldrb	r3, [r7, #19]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d10b      	bne.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002090:	4b52      	ldr	r3, [pc, #328]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002096:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800209e:	494f      	ldr	r1, [pc, #316]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80020a6:	e001      	b.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020a8:	7cfb      	ldrb	r3, [r7, #19]
 80020aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 80a0 	beq.w	80021fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ba:	2300      	movs	r3, #0
 80020bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020be:	4b47      	ldr	r3, [pc, #284]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x152>
 80020ca:	2301      	movs	r3, #1
 80020cc:	e000      	b.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80020ce:	2300      	movs	r3, #0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00d      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020d4:	4b41      	ldr	r3, [pc, #260]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d8:	4a40      	ldr	r2, [pc, #256]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020de:	6593      	str	r3, [r2, #88]	; 0x58
 80020e0:	4b3e      	ldr	r3, [pc, #248]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e8:	60bb      	str	r3, [r7, #8]
 80020ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ec:	2301      	movs	r3, #1
 80020ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020f0:	4b3b      	ldr	r3, [pc, #236]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a3a      	ldr	r2, [pc, #232]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020fc:	f7fe fe02 	bl	8000d04 <HAL_GetTick>
 8002100:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002102:	e009      	b.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002104:	f7fe fdfe 	bl	8000d04 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d902      	bls.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	74fb      	strb	r3, [r7, #19]
        break;
 8002116:	e005      	b.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002118:	4b31      	ldr	r3, [pc, #196]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0ef      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002124:	7cfb      	ldrb	r3, [r7, #19]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d15c      	bne.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800212a:	4b2c      	ldr	r3, [pc, #176]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800212c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002130:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002134:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d01f      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	429a      	cmp	r2, r3
 8002146:	d019      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002148:	4b24      	ldr	r3, [pc, #144]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800214a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800214e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002152:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002154:	4b21      	ldr	r3, [pc, #132]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800215a:	4a20      	ldr	r2, [pc, #128]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800215c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002160:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002164:	4b1d      	ldr	r3, [pc, #116]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800216a:	4a1c      	ldr	r2, [pc, #112]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800216c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002170:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002174:	4a19      	ldr	r2, [pc, #100]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d016      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002186:	f7fe fdbd 	bl	8000d04 <HAL_GetTick>
 800218a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800218c:	e00b      	b.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800218e:	f7fe fdb9 	bl	8000d04 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	f241 3288 	movw	r2, #5000	; 0x1388
 800219c:	4293      	cmp	r3, r2
 800219e:	d902      	bls.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	74fb      	strb	r3, [r7, #19]
            break;
 80021a4:	e006      	b.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021a6:	4b0d      	ldr	r3, [pc, #52]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d0ec      	beq.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80021b4:	7cfb      	ldrb	r3, [r7, #19]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10c      	bne.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021ba:	4b08      	ldr	r3, [pc, #32]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021ca:	4904      	ldr	r1, [pc, #16]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80021d2:	e009      	b.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021d4:	7cfb      	ldrb	r3, [r7, #19]
 80021d6:	74bb      	strb	r3, [r7, #18]
 80021d8:	e006      	b.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80021da:	bf00      	nop
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021e4:	7cfb      	ldrb	r3, [r7, #19]
 80021e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021e8:	7c7b      	ldrb	r3, [r7, #17]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d105      	bne.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ee:	4b9e      	ldr	r3, [pc, #632]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f2:	4a9d      	ldr	r2, [pc, #628]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00a      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002206:	4b98      	ldr	r3, [pc, #608]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800220c:	f023 0203 	bic.w	r2, r3, #3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002214:	4994      	ldr	r1, [pc, #592]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002216:	4313      	orrs	r3, r2
 8002218:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00a      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002228:	4b8f      	ldr	r3, [pc, #572]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800222a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800222e:	f023 020c 	bic.w	r2, r3, #12
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002236:	498c      	ldr	r1, [pc, #560]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002238:	4313      	orrs	r3, r2
 800223a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0304 	and.w	r3, r3, #4
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00a      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800224a:	4b87      	ldr	r3, [pc, #540]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800224c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002250:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002258:	4983      	ldr	r1, [pc, #524]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800225a:	4313      	orrs	r3, r2
 800225c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0308 	and.w	r3, r3, #8
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00a      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800226c:	4b7e      	ldr	r3, [pc, #504]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800226e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002272:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227a:	497b      	ldr	r1, [pc, #492]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800227c:	4313      	orrs	r3, r2
 800227e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0310 	and.w	r3, r3, #16
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00a      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800228e:	4b76      	ldr	r3, [pc, #472]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002294:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800229c:	4972      	ldr	r1, [pc, #456]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0320 	and.w	r3, r3, #32
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00a      	beq.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022b0:	4b6d      	ldr	r3, [pc, #436]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022be:	496a      	ldr	r1, [pc, #424]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00a      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022d2:	4b65      	ldr	r3, [pc, #404]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e0:	4961      	ldr	r1, [pc, #388]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00a      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80022f4:	4b5c      	ldr	r3, [pc, #368]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002302:	4959      	ldr	r1, [pc, #356]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002304:	4313      	orrs	r3, r2
 8002306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00a      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002316:	4b54      	ldr	r3, [pc, #336]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002324:	4950      	ldr	r1, [pc, #320]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002326:	4313      	orrs	r3, r2
 8002328:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00a      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002338:	4b4b      	ldr	r3, [pc, #300]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800233a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002346:	4948      	ldr	r1, [pc, #288]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002348:	4313      	orrs	r3, r2
 800234a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00a      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800235a:	4b43      	ldr	r3, [pc, #268]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800235c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002360:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002368:	493f      	ldr	r1, [pc, #252]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800236a:	4313      	orrs	r3, r2
 800236c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d028      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800237c:	4b3a      	ldr	r3, [pc, #232]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800237e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002382:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800238a:	4937      	ldr	r1, [pc, #220]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800238c:	4313      	orrs	r3, r2
 800238e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002396:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800239a:	d106      	bne.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800239c:	4b32      	ldr	r3, [pc, #200]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	4a31      	ldr	r2, [pc, #196]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023a6:	60d3      	str	r3, [r2, #12]
 80023a8:	e011      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023b2:	d10c      	bne.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3304      	adds	r3, #4
 80023b8:	2101      	movs	r1, #1
 80023ba:	4618      	mov	r0, r3
 80023bc:	f000 f8c8 	bl	8002550 <RCCEx_PLLSAI1_Config>
 80023c0:	4603      	mov	r3, r0
 80023c2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80023c4:	7cfb      	ldrb	r3, [r7, #19]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80023ca:	7cfb      	ldrb	r3, [r7, #19]
 80023cc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d028      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80023da:	4b23      	ldr	r3, [pc, #140]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e8:	491f      	ldr	r1, [pc, #124]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023f8:	d106      	bne.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023fa:	4b1b      	ldr	r3, [pc, #108]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	4a1a      	ldr	r2, [pc, #104]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002400:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002404:	60d3      	str	r3, [r2, #12]
 8002406:	e011      	b.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800240c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002410:	d10c      	bne.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	3304      	adds	r3, #4
 8002416:	2101      	movs	r1, #1
 8002418:	4618      	mov	r0, r3
 800241a:	f000 f899 	bl	8002550 <RCCEx_PLLSAI1_Config>
 800241e:	4603      	mov	r3, r0
 8002420:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002422:	7cfb      	ldrb	r3, [r7, #19]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002428:	7cfb      	ldrb	r3, [r7, #19]
 800242a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d02b      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002438:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800243a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800243e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002446:	4908      	ldr	r1, [pc, #32]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002448:	4313      	orrs	r3, r2
 800244a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002452:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002456:	d109      	bne.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002458:	4b03      	ldr	r3, [pc, #12]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	4a02      	ldr	r2, [pc, #8]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800245e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002462:	60d3      	str	r3, [r2, #12]
 8002464:	e014      	b.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002466:	bf00      	nop
 8002468:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002470:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002474:	d10c      	bne.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	3304      	adds	r3, #4
 800247a:	2101      	movs	r1, #1
 800247c:	4618      	mov	r0, r3
 800247e:	f000 f867 	bl	8002550 <RCCEx_PLLSAI1_Config>
 8002482:	4603      	mov	r3, r0
 8002484:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002486:	7cfb      	ldrb	r3, [r7, #19]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800248c:	7cfb      	ldrb	r3, [r7, #19]
 800248e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d02f      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800249c:	4b2b      	ldr	r3, [pc, #172]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800249e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024aa:	4928      	ldr	r1, [pc, #160]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024ba:	d10d      	bne.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3304      	adds	r3, #4
 80024c0:	2102      	movs	r1, #2
 80024c2:	4618      	mov	r0, r3
 80024c4:	f000 f844 	bl	8002550 <RCCEx_PLLSAI1_Config>
 80024c8:	4603      	mov	r3, r0
 80024ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024cc:	7cfb      	ldrb	r3, [r7, #19]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d014      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80024d2:	7cfb      	ldrb	r3, [r7, #19]
 80024d4:	74bb      	strb	r3, [r7, #18]
 80024d6:	e011      	b.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024e0:	d10c      	bne.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	3320      	adds	r3, #32
 80024e6:	2102      	movs	r1, #2
 80024e8:	4618      	mov	r0, r3
 80024ea:	f000 f925 	bl	8002738 <RCCEx_PLLSAI2_Config>
 80024ee:	4603      	mov	r3, r0
 80024f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024f2:	7cfb      	ldrb	r3, [r7, #19]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80024f8:	7cfb      	ldrb	r3, [r7, #19]
 80024fa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00a      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002508:	4b10      	ldr	r3, [pc, #64]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800250a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002516:	490d      	ldr	r1, [pc, #52]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002518:	4313      	orrs	r3, r2
 800251a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00b      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800252a:	4b08      	ldr	r3, [pc, #32]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800252c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002530:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800253a:	4904      	ldr	r1, [pc, #16]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800253c:	4313      	orrs	r3, r2
 800253e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002542:	7cbb      	ldrb	r3, [r7, #18]
}
 8002544:	4618      	mov	r0, r3
 8002546:	3718      	adds	r7, #24
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40021000 	.word	0x40021000

08002550 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800255a:	2300      	movs	r3, #0
 800255c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800255e:	4b75      	ldr	r3, [pc, #468]	; (8002734 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	f003 0303 	and.w	r3, r3, #3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d018      	beq.n	800259c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800256a:	4b72      	ldr	r3, [pc, #456]	; (8002734 <RCCEx_PLLSAI1_Config+0x1e4>)
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	f003 0203 	and.w	r2, r3, #3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	429a      	cmp	r2, r3
 8002578:	d10d      	bne.n	8002596 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
       ||
 800257e:	2b00      	cmp	r3, #0
 8002580:	d009      	beq.n	8002596 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002582:	4b6c      	ldr	r3, [pc, #432]	; (8002734 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	091b      	lsrs	r3, r3, #4
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	1c5a      	adds	r2, r3, #1
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
       ||
 8002592:	429a      	cmp	r2, r3
 8002594:	d047      	beq.n	8002626 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	73fb      	strb	r3, [r7, #15]
 800259a:	e044      	b.n	8002626 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2b03      	cmp	r3, #3
 80025a2:	d018      	beq.n	80025d6 <RCCEx_PLLSAI1_Config+0x86>
 80025a4:	2b03      	cmp	r3, #3
 80025a6:	d825      	bhi.n	80025f4 <RCCEx_PLLSAI1_Config+0xa4>
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d002      	beq.n	80025b2 <RCCEx_PLLSAI1_Config+0x62>
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d009      	beq.n	80025c4 <RCCEx_PLLSAI1_Config+0x74>
 80025b0:	e020      	b.n	80025f4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025b2:	4b60      	ldr	r3, [pc, #384]	; (8002734 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d11d      	bne.n	80025fa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025c2:	e01a      	b.n	80025fa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025c4:	4b5b      	ldr	r3, [pc, #364]	; (8002734 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d116      	bne.n	80025fe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025d4:	e013      	b.n	80025fe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025d6:	4b57      	ldr	r3, [pc, #348]	; (8002734 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d10f      	bne.n	8002602 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025e2:	4b54      	ldr	r3, [pc, #336]	; (8002734 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d109      	bne.n	8002602 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025f2:	e006      	b.n	8002602 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	73fb      	strb	r3, [r7, #15]
      break;
 80025f8:	e004      	b.n	8002604 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025fa:	bf00      	nop
 80025fc:	e002      	b.n	8002604 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025fe:	bf00      	nop
 8002600:	e000      	b.n	8002604 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002602:	bf00      	nop
    }

    if(status == HAL_OK)
 8002604:	7bfb      	ldrb	r3, [r7, #15]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10d      	bne.n	8002626 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800260a:	4b4a      	ldr	r3, [pc, #296]	; (8002734 <RCCEx_PLLSAI1_Config+0x1e4>)
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6819      	ldr	r1, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	3b01      	subs	r3, #1
 800261c:	011b      	lsls	r3, r3, #4
 800261e:	430b      	orrs	r3, r1
 8002620:	4944      	ldr	r1, [pc, #272]	; (8002734 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002622:	4313      	orrs	r3, r2
 8002624:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002626:	7bfb      	ldrb	r3, [r7, #15]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d17d      	bne.n	8002728 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800262c:	4b41      	ldr	r3, [pc, #260]	; (8002734 <RCCEx_PLLSAI1_Config+0x1e4>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a40      	ldr	r2, [pc, #256]	; (8002734 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002632:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002636:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002638:	f7fe fb64 	bl	8000d04 <HAL_GetTick>
 800263c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800263e:	e009      	b.n	8002654 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002640:	f7fe fb60 	bl	8000d04 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d902      	bls.n	8002654 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	73fb      	strb	r3, [r7, #15]
        break;
 8002652:	e005      	b.n	8002660 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002654:	4b37      	ldr	r3, [pc, #220]	; (8002734 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d1ef      	bne.n	8002640 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002660:	7bfb      	ldrb	r3, [r7, #15]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d160      	bne.n	8002728 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d111      	bne.n	8002690 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800266c:	4b31      	ldr	r3, [pc, #196]	; (8002734 <RCCEx_PLLSAI1_Config+0x1e4>)
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002674:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6892      	ldr	r2, [r2, #8]
 800267c:	0211      	lsls	r1, r2, #8
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	68d2      	ldr	r2, [r2, #12]
 8002682:	0912      	lsrs	r2, r2, #4
 8002684:	0452      	lsls	r2, r2, #17
 8002686:	430a      	orrs	r2, r1
 8002688:	492a      	ldr	r1, [pc, #168]	; (8002734 <RCCEx_PLLSAI1_Config+0x1e4>)
 800268a:	4313      	orrs	r3, r2
 800268c:	610b      	str	r3, [r1, #16]
 800268e:	e027      	b.n	80026e0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d112      	bne.n	80026bc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002696:	4b27      	ldr	r3, [pc, #156]	; (8002734 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800269e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6892      	ldr	r2, [r2, #8]
 80026a6:	0211      	lsls	r1, r2, #8
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6912      	ldr	r2, [r2, #16]
 80026ac:	0852      	lsrs	r2, r2, #1
 80026ae:	3a01      	subs	r2, #1
 80026b0:	0552      	lsls	r2, r2, #21
 80026b2:	430a      	orrs	r2, r1
 80026b4:	491f      	ldr	r1, [pc, #124]	; (8002734 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	610b      	str	r3, [r1, #16]
 80026ba:	e011      	b.n	80026e0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026bc:	4b1d      	ldr	r3, [pc, #116]	; (8002734 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80026c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	6892      	ldr	r2, [r2, #8]
 80026cc:	0211      	lsls	r1, r2, #8
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	6952      	ldr	r2, [r2, #20]
 80026d2:	0852      	lsrs	r2, r2, #1
 80026d4:	3a01      	subs	r2, #1
 80026d6:	0652      	lsls	r2, r2, #25
 80026d8:	430a      	orrs	r2, r1
 80026da:	4916      	ldr	r1, [pc, #88]	; (8002734 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80026e0:	4b14      	ldr	r3, [pc, #80]	; (8002734 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a13      	ldr	r2, [pc, #76]	; (8002734 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ec:	f7fe fb0a 	bl	8000d04 <HAL_GetTick>
 80026f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026f2:	e009      	b.n	8002708 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026f4:	f7fe fb06 	bl	8000d04 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d902      	bls.n	8002708 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	73fb      	strb	r3, [r7, #15]
          break;
 8002706:	e005      	b.n	8002714 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002708:	4b0a      	ldr	r3, [pc, #40]	; (8002734 <RCCEx_PLLSAI1_Config+0x1e4>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0ef      	beq.n	80026f4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002714:	7bfb      	ldrb	r3, [r7, #15]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d106      	bne.n	8002728 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800271a:	4b06      	ldr	r3, [pc, #24]	; (8002734 <RCCEx_PLLSAI1_Config+0x1e4>)
 800271c:	691a      	ldr	r2, [r3, #16]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	4904      	ldr	r1, [pc, #16]	; (8002734 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002724:	4313      	orrs	r3, r2
 8002726:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002728:	7bfb      	ldrb	r3, [r7, #15]
}
 800272a:	4618      	mov	r0, r3
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	40021000 	.word	0x40021000

08002738 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002742:	2300      	movs	r3, #0
 8002744:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002746:	4b6a      	ldr	r3, [pc, #424]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	f003 0303 	and.w	r3, r3, #3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d018      	beq.n	8002784 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002752:	4b67      	ldr	r3, [pc, #412]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	f003 0203 	and.w	r2, r3, #3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	429a      	cmp	r2, r3
 8002760:	d10d      	bne.n	800277e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
       ||
 8002766:	2b00      	cmp	r3, #0
 8002768:	d009      	beq.n	800277e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800276a:	4b61      	ldr	r3, [pc, #388]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	091b      	lsrs	r3, r3, #4
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	1c5a      	adds	r2, r3, #1
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
       ||
 800277a:	429a      	cmp	r2, r3
 800277c:	d047      	beq.n	800280e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	73fb      	strb	r3, [r7, #15]
 8002782:	e044      	b.n	800280e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2b03      	cmp	r3, #3
 800278a:	d018      	beq.n	80027be <RCCEx_PLLSAI2_Config+0x86>
 800278c:	2b03      	cmp	r3, #3
 800278e:	d825      	bhi.n	80027dc <RCCEx_PLLSAI2_Config+0xa4>
 8002790:	2b01      	cmp	r3, #1
 8002792:	d002      	beq.n	800279a <RCCEx_PLLSAI2_Config+0x62>
 8002794:	2b02      	cmp	r3, #2
 8002796:	d009      	beq.n	80027ac <RCCEx_PLLSAI2_Config+0x74>
 8002798:	e020      	b.n	80027dc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800279a:	4b55      	ldr	r3, [pc, #340]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d11d      	bne.n	80027e2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027aa:	e01a      	b.n	80027e2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027ac:	4b50      	ldr	r3, [pc, #320]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d116      	bne.n	80027e6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027bc:	e013      	b.n	80027e6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027be:	4b4c      	ldr	r3, [pc, #304]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10f      	bne.n	80027ea <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027ca:	4b49      	ldr	r3, [pc, #292]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d109      	bne.n	80027ea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027da:	e006      	b.n	80027ea <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	73fb      	strb	r3, [r7, #15]
      break;
 80027e0:	e004      	b.n	80027ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027e2:	bf00      	nop
 80027e4:	e002      	b.n	80027ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027e6:	bf00      	nop
 80027e8:	e000      	b.n	80027ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80027ec:	7bfb      	ldrb	r3, [r7, #15]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10d      	bne.n	800280e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027f2:	4b3f      	ldr	r3, [pc, #252]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6819      	ldr	r1, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	3b01      	subs	r3, #1
 8002804:	011b      	lsls	r3, r3, #4
 8002806:	430b      	orrs	r3, r1
 8002808:	4939      	ldr	r1, [pc, #228]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800280a:	4313      	orrs	r3, r2
 800280c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800280e:	7bfb      	ldrb	r3, [r7, #15]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d167      	bne.n	80028e4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002814:	4b36      	ldr	r3, [pc, #216]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a35      	ldr	r2, [pc, #212]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800281a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800281e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002820:	f7fe fa70 	bl	8000d04 <HAL_GetTick>
 8002824:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002826:	e009      	b.n	800283c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002828:	f7fe fa6c 	bl	8000d04 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d902      	bls.n	800283c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	73fb      	strb	r3, [r7, #15]
        break;
 800283a:	e005      	b.n	8002848 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800283c:	4b2c      	ldr	r3, [pc, #176]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1ef      	bne.n	8002828 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002848:	7bfb      	ldrb	r3, [r7, #15]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d14a      	bne.n	80028e4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d111      	bne.n	8002878 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002854:	4b26      	ldr	r3, [pc, #152]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800285c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6892      	ldr	r2, [r2, #8]
 8002864:	0211      	lsls	r1, r2, #8
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	68d2      	ldr	r2, [r2, #12]
 800286a:	0912      	lsrs	r2, r2, #4
 800286c:	0452      	lsls	r2, r2, #17
 800286e:	430a      	orrs	r2, r1
 8002870:	491f      	ldr	r1, [pc, #124]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002872:	4313      	orrs	r3, r2
 8002874:	614b      	str	r3, [r1, #20]
 8002876:	e011      	b.n	800289c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002878:	4b1d      	ldr	r3, [pc, #116]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002880:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	6892      	ldr	r2, [r2, #8]
 8002888:	0211      	lsls	r1, r2, #8
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	6912      	ldr	r2, [r2, #16]
 800288e:	0852      	lsrs	r2, r2, #1
 8002890:	3a01      	subs	r2, #1
 8002892:	0652      	lsls	r2, r2, #25
 8002894:	430a      	orrs	r2, r1
 8002896:	4916      	ldr	r1, [pc, #88]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002898:	4313      	orrs	r3, r2
 800289a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800289c:	4b14      	ldr	r3, [pc, #80]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a13      	ldr	r2, [pc, #76]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a8:	f7fe fa2c 	bl	8000d04 <HAL_GetTick>
 80028ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028ae:	e009      	b.n	80028c4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028b0:	f7fe fa28 	bl	8000d04 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d902      	bls.n	80028c4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	73fb      	strb	r3, [r7, #15]
          break;
 80028c2:	e005      	b.n	80028d0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028c4:	4b0a      	ldr	r3, [pc, #40]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0ef      	beq.n	80028b0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80028d0:	7bfb      	ldrb	r3, [r7, #15]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d106      	bne.n	80028e4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80028d6:	4b06      	ldr	r3, [pc, #24]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028d8:	695a      	ldr	r2, [r3, #20]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	4904      	ldr	r1, [pc, #16]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80028e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40021000 	.word	0x40021000

080028f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e049      	b.n	800299a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d106      	bne.n	8002920 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7fe f834 	bl	8000988 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2202      	movs	r2, #2
 8002924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3304      	adds	r3, #4
 8002930:	4619      	mov	r1, r3
 8002932:	4610      	mov	r0, r2
 8002934:	f000 fb7a 	bl	800302c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b082      	sub	sp, #8
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e049      	b.n	8002a48 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d106      	bne.n	80029ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 f841 	bl	8002a50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2202      	movs	r2, #2
 80029d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	3304      	adds	r3, #4
 80029de:	4619      	mov	r1, r3
 80029e0:	4610      	mov	r0, r2
 80029e2:	f000 fb23 	bl	800302c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2201      	movs	r2, #1
 80029f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d109      	bne.n	8002a88 <HAL_TIM_PWM_Start+0x24>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	bf14      	ite	ne
 8002a80:	2301      	movne	r3, #1
 8002a82:	2300      	moveq	r3, #0
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	e03c      	b.n	8002b02 <HAL_TIM_PWM_Start+0x9e>
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d109      	bne.n	8002aa2 <HAL_TIM_PWM_Start+0x3e>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	bf14      	ite	ne
 8002a9a:	2301      	movne	r3, #1
 8002a9c:	2300      	moveq	r3, #0
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	e02f      	b.n	8002b02 <HAL_TIM_PWM_Start+0x9e>
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	2b08      	cmp	r3, #8
 8002aa6:	d109      	bne.n	8002abc <HAL_TIM_PWM_Start+0x58>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	bf14      	ite	ne
 8002ab4:	2301      	movne	r3, #1
 8002ab6:	2300      	moveq	r3, #0
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	e022      	b.n	8002b02 <HAL_TIM_PWM_Start+0x9e>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	2b0c      	cmp	r3, #12
 8002ac0:	d109      	bne.n	8002ad6 <HAL_TIM_PWM_Start+0x72>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	bf14      	ite	ne
 8002ace:	2301      	movne	r3, #1
 8002ad0:	2300      	moveq	r3, #0
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	e015      	b.n	8002b02 <HAL_TIM_PWM_Start+0x9e>
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2b10      	cmp	r3, #16
 8002ada:	d109      	bne.n	8002af0 <HAL_TIM_PWM_Start+0x8c>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	bf14      	ite	ne
 8002ae8:	2301      	movne	r3, #1
 8002aea:	2300      	moveq	r3, #0
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	e008      	b.n	8002b02 <HAL_TIM_PWM_Start+0x9e>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	bf14      	ite	ne
 8002afc:	2301      	movne	r3, #1
 8002afe:	2300      	moveq	r3, #0
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e09c      	b.n	8002c44 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d104      	bne.n	8002b1a <HAL_TIM_PWM_Start+0xb6>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2202      	movs	r2, #2
 8002b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b18:	e023      	b.n	8002b62 <HAL_TIM_PWM_Start+0xfe>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2b04      	cmp	r3, #4
 8002b1e:	d104      	bne.n	8002b2a <HAL_TIM_PWM_Start+0xc6>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2202      	movs	r2, #2
 8002b24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b28:	e01b      	b.n	8002b62 <HAL_TIM_PWM_Start+0xfe>
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	d104      	bne.n	8002b3a <HAL_TIM_PWM_Start+0xd6>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2202      	movs	r2, #2
 8002b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b38:	e013      	b.n	8002b62 <HAL_TIM_PWM_Start+0xfe>
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	2b0c      	cmp	r3, #12
 8002b3e:	d104      	bne.n	8002b4a <HAL_TIM_PWM_Start+0xe6>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2202      	movs	r2, #2
 8002b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b48:	e00b      	b.n	8002b62 <HAL_TIM_PWM_Start+0xfe>
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	2b10      	cmp	r3, #16
 8002b4e:	d104      	bne.n	8002b5a <HAL_TIM_PWM_Start+0xf6>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2202      	movs	r2, #2
 8002b54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b58:	e003      	b.n	8002b62 <HAL_TIM_PWM_Start+0xfe>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2201      	movs	r2, #1
 8002b68:	6839      	ldr	r1, [r7, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 fe68 	bl	8003840 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a35      	ldr	r2, [pc, #212]	; (8002c4c <HAL_TIM_PWM_Start+0x1e8>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d013      	beq.n	8002ba2 <HAL_TIM_PWM_Start+0x13e>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a34      	ldr	r2, [pc, #208]	; (8002c50 <HAL_TIM_PWM_Start+0x1ec>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d00e      	beq.n	8002ba2 <HAL_TIM_PWM_Start+0x13e>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a32      	ldr	r2, [pc, #200]	; (8002c54 <HAL_TIM_PWM_Start+0x1f0>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d009      	beq.n	8002ba2 <HAL_TIM_PWM_Start+0x13e>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a31      	ldr	r2, [pc, #196]	; (8002c58 <HAL_TIM_PWM_Start+0x1f4>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d004      	beq.n	8002ba2 <HAL_TIM_PWM_Start+0x13e>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a2f      	ldr	r2, [pc, #188]	; (8002c5c <HAL_TIM_PWM_Start+0x1f8>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d101      	bne.n	8002ba6 <HAL_TIM_PWM_Start+0x142>
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e000      	b.n	8002ba8 <HAL_TIM_PWM_Start+0x144>
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d007      	beq.n	8002bbc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a22      	ldr	r2, [pc, #136]	; (8002c4c <HAL_TIM_PWM_Start+0x1e8>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d01d      	beq.n	8002c02 <HAL_TIM_PWM_Start+0x19e>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bce:	d018      	beq.n	8002c02 <HAL_TIM_PWM_Start+0x19e>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a22      	ldr	r2, [pc, #136]	; (8002c60 <HAL_TIM_PWM_Start+0x1fc>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d013      	beq.n	8002c02 <HAL_TIM_PWM_Start+0x19e>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a21      	ldr	r2, [pc, #132]	; (8002c64 <HAL_TIM_PWM_Start+0x200>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d00e      	beq.n	8002c02 <HAL_TIM_PWM_Start+0x19e>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a1f      	ldr	r2, [pc, #124]	; (8002c68 <HAL_TIM_PWM_Start+0x204>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d009      	beq.n	8002c02 <HAL_TIM_PWM_Start+0x19e>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a17      	ldr	r2, [pc, #92]	; (8002c50 <HAL_TIM_PWM_Start+0x1ec>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d004      	beq.n	8002c02 <HAL_TIM_PWM_Start+0x19e>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a15      	ldr	r2, [pc, #84]	; (8002c54 <HAL_TIM_PWM_Start+0x1f0>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d115      	bne.n	8002c2e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	4b18      	ldr	r3, [pc, #96]	; (8002c6c <HAL_TIM_PWM_Start+0x208>)
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2b06      	cmp	r3, #6
 8002c12:	d015      	beq.n	8002c40 <HAL_TIM_PWM_Start+0x1dc>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c1a:	d011      	beq.n	8002c40 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f042 0201 	orr.w	r2, r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c2c:	e008      	b.n	8002c40 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f042 0201 	orr.w	r2, r2, #1
 8002c3c:	601a      	str	r2, [r3, #0]
 8002c3e:	e000      	b.n	8002c42 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c40:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40012c00 	.word	0x40012c00
 8002c50:	40013400 	.word	0x40013400
 8002c54:	40014000 	.word	0x40014000
 8002c58:	40014400 	.word	0x40014400
 8002c5c:	40014800 	.word	0x40014800
 8002c60:	40000400 	.word	0x40000400
 8002c64:	40000800 	.word	0x40000800
 8002c68:	40000c00 	.word	0x40000c00
 8002c6c:	00010007 	.word	0x00010007

08002c70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d101      	bne.n	8002c8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	e0ff      	b.n	8002e8e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b14      	cmp	r3, #20
 8002c9a:	f200 80f0 	bhi.w	8002e7e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002c9e:	a201      	add	r2, pc, #4	; (adr r2, 8002ca4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca4:	08002cf9 	.word	0x08002cf9
 8002ca8:	08002e7f 	.word	0x08002e7f
 8002cac:	08002e7f 	.word	0x08002e7f
 8002cb0:	08002e7f 	.word	0x08002e7f
 8002cb4:	08002d39 	.word	0x08002d39
 8002cb8:	08002e7f 	.word	0x08002e7f
 8002cbc:	08002e7f 	.word	0x08002e7f
 8002cc0:	08002e7f 	.word	0x08002e7f
 8002cc4:	08002d7b 	.word	0x08002d7b
 8002cc8:	08002e7f 	.word	0x08002e7f
 8002ccc:	08002e7f 	.word	0x08002e7f
 8002cd0:	08002e7f 	.word	0x08002e7f
 8002cd4:	08002dbb 	.word	0x08002dbb
 8002cd8:	08002e7f 	.word	0x08002e7f
 8002cdc:	08002e7f 	.word	0x08002e7f
 8002ce0:	08002e7f 	.word	0x08002e7f
 8002ce4:	08002dfd 	.word	0x08002dfd
 8002ce8:	08002e7f 	.word	0x08002e7f
 8002cec:	08002e7f 	.word	0x08002e7f
 8002cf0:	08002e7f 	.word	0x08002e7f
 8002cf4:	08002e3d 	.word	0x08002e3d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68b9      	ldr	r1, [r7, #8]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f000 fa2e 	bl	8003160 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	699a      	ldr	r2, [r3, #24]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f042 0208 	orr.w	r2, r2, #8
 8002d12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	699a      	ldr	r2, [r3, #24]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 0204 	bic.w	r2, r2, #4
 8002d22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6999      	ldr	r1, [r3, #24]
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	691a      	ldr	r2, [r3, #16]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	619a      	str	r2, [r3, #24]
      break;
 8002d36:	e0a5      	b.n	8002e84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68b9      	ldr	r1, [r7, #8]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f000 fa9e 	bl	8003280 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	699a      	ldr	r2, [r3, #24]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	699a      	ldr	r2, [r3, #24]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6999      	ldr	r1, [r3, #24]
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	021a      	lsls	r2, r3, #8
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	430a      	orrs	r2, r1
 8002d76:	619a      	str	r2, [r3, #24]
      break;
 8002d78:	e084      	b.n	8002e84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68b9      	ldr	r1, [r7, #8]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f000 fb07 	bl	8003394 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	69da      	ldr	r2, [r3, #28]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f042 0208 	orr.w	r2, r2, #8
 8002d94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	69da      	ldr	r2, [r3, #28]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f022 0204 	bic.w	r2, r2, #4
 8002da4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	69d9      	ldr	r1, [r3, #28]
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	691a      	ldr	r2, [r3, #16]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	430a      	orrs	r2, r1
 8002db6:	61da      	str	r2, [r3, #28]
      break;
 8002db8:	e064      	b.n	8002e84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68b9      	ldr	r1, [r7, #8]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f000 fb6f 	bl	80034a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	69da      	ldr	r2, [r3, #28]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	69da      	ldr	r2, [r3, #28]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002de4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	69d9      	ldr	r1, [r3, #28]
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	021a      	lsls	r2, r3, #8
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	430a      	orrs	r2, r1
 8002df8:	61da      	str	r2, [r3, #28]
      break;
 8002dfa:	e043      	b.n	8002e84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68b9      	ldr	r1, [r7, #8]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f000 fbb8 	bl	8003578 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f042 0208 	orr.w	r2, r2, #8
 8002e16:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 0204 	bic.w	r2, r2, #4
 8002e26:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	691a      	ldr	r2, [r3, #16]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	430a      	orrs	r2, r1
 8002e38:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002e3a:	e023      	b.n	8002e84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68b9      	ldr	r1, [r7, #8]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 fbfc 	bl	8003640 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e56:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e66:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	021a      	lsls	r2, r3, #8
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002e7c:	e002      	b.n	8002e84 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	75fb      	strb	r3, [r7, #23]
      break;
 8002e82:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3718      	adds	r7, #24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop

08002e98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d101      	bne.n	8002eb4 <HAL_TIM_ConfigClockSource+0x1c>
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	e0b6      	b.n	8003022 <HAL_TIM_ConfigClockSource+0x18a>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ed2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ed6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ede:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68ba      	ldr	r2, [r7, #8]
 8002ee6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ef0:	d03e      	beq.n	8002f70 <HAL_TIM_ConfigClockSource+0xd8>
 8002ef2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ef6:	f200 8087 	bhi.w	8003008 <HAL_TIM_ConfigClockSource+0x170>
 8002efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002efe:	f000 8086 	beq.w	800300e <HAL_TIM_ConfigClockSource+0x176>
 8002f02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f06:	d87f      	bhi.n	8003008 <HAL_TIM_ConfigClockSource+0x170>
 8002f08:	2b70      	cmp	r3, #112	; 0x70
 8002f0a:	d01a      	beq.n	8002f42 <HAL_TIM_ConfigClockSource+0xaa>
 8002f0c:	2b70      	cmp	r3, #112	; 0x70
 8002f0e:	d87b      	bhi.n	8003008 <HAL_TIM_ConfigClockSource+0x170>
 8002f10:	2b60      	cmp	r3, #96	; 0x60
 8002f12:	d050      	beq.n	8002fb6 <HAL_TIM_ConfigClockSource+0x11e>
 8002f14:	2b60      	cmp	r3, #96	; 0x60
 8002f16:	d877      	bhi.n	8003008 <HAL_TIM_ConfigClockSource+0x170>
 8002f18:	2b50      	cmp	r3, #80	; 0x50
 8002f1a:	d03c      	beq.n	8002f96 <HAL_TIM_ConfigClockSource+0xfe>
 8002f1c:	2b50      	cmp	r3, #80	; 0x50
 8002f1e:	d873      	bhi.n	8003008 <HAL_TIM_ConfigClockSource+0x170>
 8002f20:	2b40      	cmp	r3, #64	; 0x40
 8002f22:	d058      	beq.n	8002fd6 <HAL_TIM_ConfigClockSource+0x13e>
 8002f24:	2b40      	cmp	r3, #64	; 0x40
 8002f26:	d86f      	bhi.n	8003008 <HAL_TIM_ConfigClockSource+0x170>
 8002f28:	2b30      	cmp	r3, #48	; 0x30
 8002f2a:	d064      	beq.n	8002ff6 <HAL_TIM_ConfigClockSource+0x15e>
 8002f2c:	2b30      	cmp	r3, #48	; 0x30
 8002f2e:	d86b      	bhi.n	8003008 <HAL_TIM_ConfigClockSource+0x170>
 8002f30:	2b20      	cmp	r3, #32
 8002f32:	d060      	beq.n	8002ff6 <HAL_TIM_ConfigClockSource+0x15e>
 8002f34:	2b20      	cmp	r3, #32
 8002f36:	d867      	bhi.n	8003008 <HAL_TIM_ConfigClockSource+0x170>
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d05c      	beq.n	8002ff6 <HAL_TIM_ConfigClockSource+0x15e>
 8002f3c:	2b10      	cmp	r3, #16
 8002f3e:	d05a      	beq.n	8002ff6 <HAL_TIM_ConfigClockSource+0x15e>
 8002f40:	e062      	b.n	8003008 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f52:	f000 fc55 	bl	8003800 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68ba      	ldr	r2, [r7, #8]
 8002f6c:	609a      	str	r2, [r3, #8]
      break;
 8002f6e:	e04f      	b.n	8003010 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f80:	f000 fc3e 	bl	8003800 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689a      	ldr	r2, [r3, #8]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f92:	609a      	str	r2, [r3, #8]
      break;
 8002f94:	e03c      	b.n	8003010 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	f000 fbb2 	bl	800370c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2150      	movs	r1, #80	; 0x50
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 fc0b 	bl	80037ca <TIM_ITRx_SetConfig>
      break;
 8002fb4:	e02c      	b.n	8003010 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	f000 fbd1 	bl	800376a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2160      	movs	r1, #96	; 0x60
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f000 fbfb 	bl	80037ca <TIM_ITRx_SetConfig>
      break;
 8002fd4:	e01c      	b.n	8003010 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	f000 fb92 	bl	800370c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2140      	movs	r1, #64	; 0x40
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f000 fbeb 	bl	80037ca <TIM_ITRx_SetConfig>
      break;
 8002ff4:	e00c      	b.n	8003010 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4619      	mov	r1, r3
 8003000:	4610      	mov	r0, r2
 8003002:	f000 fbe2 	bl	80037ca <TIM_ITRx_SetConfig>
      break;
 8003006:	e003      	b.n	8003010 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	73fb      	strb	r3, [r7, #15]
      break;
 800300c:	e000      	b.n	8003010 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800300e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003020:	7bfb      	ldrb	r3, [r7, #15]
}
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
	...

0800302c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a40      	ldr	r2, [pc, #256]	; (8003140 <TIM_Base_SetConfig+0x114>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d013      	beq.n	800306c <TIM_Base_SetConfig+0x40>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800304a:	d00f      	beq.n	800306c <TIM_Base_SetConfig+0x40>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a3d      	ldr	r2, [pc, #244]	; (8003144 <TIM_Base_SetConfig+0x118>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d00b      	beq.n	800306c <TIM_Base_SetConfig+0x40>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a3c      	ldr	r2, [pc, #240]	; (8003148 <TIM_Base_SetConfig+0x11c>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d007      	beq.n	800306c <TIM_Base_SetConfig+0x40>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a3b      	ldr	r2, [pc, #236]	; (800314c <TIM_Base_SetConfig+0x120>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d003      	beq.n	800306c <TIM_Base_SetConfig+0x40>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a3a      	ldr	r2, [pc, #232]	; (8003150 <TIM_Base_SetConfig+0x124>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d108      	bne.n	800307e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003072:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	4313      	orrs	r3, r2
 800307c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a2f      	ldr	r2, [pc, #188]	; (8003140 <TIM_Base_SetConfig+0x114>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d01f      	beq.n	80030c6 <TIM_Base_SetConfig+0x9a>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800308c:	d01b      	beq.n	80030c6 <TIM_Base_SetConfig+0x9a>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a2c      	ldr	r2, [pc, #176]	; (8003144 <TIM_Base_SetConfig+0x118>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d017      	beq.n	80030c6 <TIM_Base_SetConfig+0x9a>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a2b      	ldr	r2, [pc, #172]	; (8003148 <TIM_Base_SetConfig+0x11c>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d013      	beq.n	80030c6 <TIM_Base_SetConfig+0x9a>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a2a      	ldr	r2, [pc, #168]	; (800314c <TIM_Base_SetConfig+0x120>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d00f      	beq.n	80030c6 <TIM_Base_SetConfig+0x9a>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a29      	ldr	r2, [pc, #164]	; (8003150 <TIM_Base_SetConfig+0x124>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d00b      	beq.n	80030c6 <TIM_Base_SetConfig+0x9a>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a28      	ldr	r2, [pc, #160]	; (8003154 <TIM_Base_SetConfig+0x128>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d007      	beq.n	80030c6 <TIM_Base_SetConfig+0x9a>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a27      	ldr	r2, [pc, #156]	; (8003158 <TIM_Base_SetConfig+0x12c>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d003      	beq.n	80030c6 <TIM_Base_SetConfig+0x9a>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a26      	ldr	r2, [pc, #152]	; (800315c <TIM_Base_SetConfig+0x130>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d108      	bne.n	80030d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a10      	ldr	r2, [pc, #64]	; (8003140 <TIM_Base_SetConfig+0x114>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d00f      	beq.n	8003124 <TIM_Base_SetConfig+0xf8>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a12      	ldr	r2, [pc, #72]	; (8003150 <TIM_Base_SetConfig+0x124>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d00b      	beq.n	8003124 <TIM_Base_SetConfig+0xf8>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a11      	ldr	r2, [pc, #68]	; (8003154 <TIM_Base_SetConfig+0x128>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d007      	beq.n	8003124 <TIM_Base_SetConfig+0xf8>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a10      	ldr	r2, [pc, #64]	; (8003158 <TIM_Base_SetConfig+0x12c>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d003      	beq.n	8003124 <TIM_Base_SetConfig+0xf8>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a0f      	ldr	r2, [pc, #60]	; (800315c <TIM_Base_SetConfig+0x130>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d103      	bne.n	800312c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	691a      	ldr	r2, [r3, #16]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	615a      	str	r2, [r3, #20]
}
 8003132:	bf00      	nop
 8003134:	3714      	adds	r7, #20
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	40012c00 	.word	0x40012c00
 8003144:	40000400 	.word	0x40000400
 8003148:	40000800 	.word	0x40000800
 800314c:	40000c00 	.word	0x40000c00
 8003150:	40013400 	.word	0x40013400
 8003154:	40014000 	.word	0x40014000
 8003158:	40014400 	.word	0x40014400
 800315c:	40014800 	.word	0x40014800

08003160 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003160:	b480      	push	{r7}
 8003162:	b087      	sub	sp, #28
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	f023 0201 	bic.w	r2, r3, #1
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800318e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f023 0303 	bic.w	r3, r3, #3
 800319a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f023 0302 	bic.w	r3, r3, #2
 80031ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a2c      	ldr	r2, [pc, #176]	; (800326c <TIM_OC1_SetConfig+0x10c>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d00f      	beq.n	80031e0 <TIM_OC1_SetConfig+0x80>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a2b      	ldr	r2, [pc, #172]	; (8003270 <TIM_OC1_SetConfig+0x110>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d00b      	beq.n	80031e0 <TIM_OC1_SetConfig+0x80>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a2a      	ldr	r2, [pc, #168]	; (8003274 <TIM_OC1_SetConfig+0x114>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d007      	beq.n	80031e0 <TIM_OC1_SetConfig+0x80>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a29      	ldr	r2, [pc, #164]	; (8003278 <TIM_OC1_SetConfig+0x118>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d003      	beq.n	80031e0 <TIM_OC1_SetConfig+0x80>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a28      	ldr	r2, [pc, #160]	; (800327c <TIM_OC1_SetConfig+0x11c>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d10c      	bne.n	80031fa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	f023 0308 	bic.w	r3, r3, #8
 80031e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	f023 0304 	bic.w	r3, r3, #4
 80031f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a1b      	ldr	r2, [pc, #108]	; (800326c <TIM_OC1_SetConfig+0x10c>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d00f      	beq.n	8003222 <TIM_OC1_SetConfig+0xc2>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a1a      	ldr	r2, [pc, #104]	; (8003270 <TIM_OC1_SetConfig+0x110>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d00b      	beq.n	8003222 <TIM_OC1_SetConfig+0xc2>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a19      	ldr	r2, [pc, #100]	; (8003274 <TIM_OC1_SetConfig+0x114>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d007      	beq.n	8003222 <TIM_OC1_SetConfig+0xc2>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a18      	ldr	r2, [pc, #96]	; (8003278 <TIM_OC1_SetConfig+0x118>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d003      	beq.n	8003222 <TIM_OC1_SetConfig+0xc2>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a17      	ldr	r2, [pc, #92]	; (800327c <TIM_OC1_SetConfig+0x11c>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d111      	bne.n	8003246 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003228:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003230:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	4313      	orrs	r3, r2
 800323a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	4313      	orrs	r3, r2
 8003244:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	621a      	str	r2, [r3, #32]
}
 8003260:	bf00      	nop
 8003262:	371c      	adds	r7, #28
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	40012c00 	.word	0x40012c00
 8003270:	40013400 	.word	0x40013400
 8003274:	40014000 	.word	0x40014000
 8003278:	40014400 	.word	0x40014400
 800327c:	40014800 	.word	0x40014800

08003280 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003280:	b480      	push	{r7}
 8003282:	b087      	sub	sp, #28
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	f023 0210 	bic.w	r2, r3, #16
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	021b      	lsls	r3, r3, #8
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	f023 0320 	bic.w	r3, r3, #32
 80032ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	4313      	orrs	r3, r2
 80032da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a28      	ldr	r2, [pc, #160]	; (8003380 <TIM_OC2_SetConfig+0x100>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d003      	beq.n	80032ec <TIM_OC2_SetConfig+0x6c>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a27      	ldr	r2, [pc, #156]	; (8003384 <TIM_OC2_SetConfig+0x104>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d10d      	bne.n	8003308 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	011b      	lsls	r3, r3, #4
 80032fa:	697a      	ldr	r2, [r7, #20]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003306:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a1d      	ldr	r2, [pc, #116]	; (8003380 <TIM_OC2_SetConfig+0x100>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d00f      	beq.n	8003330 <TIM_OC2_SetConfig+0xb0>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a1c      	ldr	r2, [pc, #112]	; (8003384 <TIM_OC2_SetConfig+0x104>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d00b      	beq.n	8003330 <TIM_OC2_SetConfig+0xb0>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a1b      	ldr	r2, [pc, #108]	; (8003388 <TIM_OC2_SetConfig+0x108>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d007      	beq.n	8003330 <TIM_OC2_SetConfig+0xb0>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a1a      	ldr	r2, [pc, #104]	; (800338c <TIM_OC2_SetConfig+0x10c>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d003      	beq.n	8003330 <TIM_OC2_SetConfig+0xb0>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a19      	ldr	r2, [pc, #100]	; (8003390 <TIM_OC2_SetConfig+0x110>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d113      	bne.n	8003358 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003336:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800333e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	4313      	orrs	r3, r2
 800334a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	4313      	orrs	r3, r2
 8003356:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685a      	ldr	r2, [r3, #4]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	621a      	str	r2, [r3, #32]
}
 8003372:	bf00      	nop
 8003374:	371c      	adds	r7, #28
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	40012c00 	.word	0x40012c00
 8003384:	40013400 	.word	0x40013400
 8003388:	40014000 	.word	0x40014000
 800338c:	40014400 	.word	0x40014400
 8003390:	40014800 	.word	0x40014800

08003394 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003394:	b480      	push	{r7}
 8003396:	b087      	sub	sp, #28
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	69db      	ldr	r3, [r3, #28]
 80033ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f023 0303 	bic.w	r3, r3, #3
 80033ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	021b      	lsls	r3, r3, #8
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a27      	ldr	r2, [pc, #156]	; (8003490 <TIM_OC3_SetConfig+0xfc>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d003      	beq.n	80033fe <TIM_OC3_SetConfig+0x6a>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a26      	ldr	r2, [pc, #152]	; (8003494 <TIM_OC3_SetConfig+0x100>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d10d      	bne.n	800341a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003404:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	021b      	lsls	r3, r3, #8
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	4313      	orrs	r3, r2
 8003410:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003418:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a1c      	ldr	r2, [pc, #112]	; (8003490 <TIM_OC3_SetConfig+0xfc>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d00f      	beq.n	8003442 <TIM_OC3_SetConfig+0xae>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a1b      	ldr	r2, [pc, #108]	; (8003494 <TIM_OC3_SetConfig+0x100>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d00b      	beq.n	8003442 <TIM_OC3_SetConfig+0xae>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a1a      	ldr	r2, [pc, #104]	; (8003498 <TIM_OC3_SetConfig+0x104>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d007      	beq.n	8003442 <TIM_OC3_SetConfig+0xae>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a19      	ldr	r2, [pc, #100]	; (800349c <TIM_OC3_SetConfig+0x108>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d003      	beq.n	8003442 <TIM_OC3_SetConfig+0xae>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a18      	ldr	r2, [pc, #96]	; (80034a0 <TIM_OC3_SetConfig+0x10c>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d113      	bne.n	800346a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003448:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003450:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	011b      	lsls	r3, r3, #4
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	4313      	orrs	r3, r2
 800345c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	011b      	lsls	r3, r3, #4
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	4313      	orrs	r3, r2
 8003468:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	621a      	str	r2, [r3, #32]
}
 8003484:	bf00      	nop
 8003486:	371c      	adds	r7, #28
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr
 8003490:	40012c00 	.word	0x40012c00
 8003494:	40013400 	.word	0x40013400
 8003498:	40014000 	.word	0x40014000
 800349c:	40014400 	.word	0x40014400
 80034a0:	40014800 	.word	0x40014800

080034a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b087      	sub	sp, #28
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	69db      	ldr	r3, [r3, #28]
 80034ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	021b      	lsls	r3, r3, #8
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	031b      	lsls	r3, r3, #12
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a18      	ldr	r2, [pc, #96]	; (8003564 <TIM_OC4_SetConfig+0xc0>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d00f      	beq.n	8003528 <TIM_OC4_SetConfig+0x84>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a17      	ldr	r2, [pc, #92]	; (8003568 <TIM_OC4_SetConfig+0xc4>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d00b      	beq.n	8003528 <TIM_OC4_SetConfig+0x84>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a16      	ldr	r2, [pc, #88]	; (800356c <TIM_OC4_SetConfig+0xc8>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d007      	beq.n	8003528 <TIM_OC4_SetConfig+0x84>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a15      	ldr	r2, [pc, #84]	; (8003570 <TIM_OC4_SetConfig+0xcc>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d003      	beq.n	8003528 <TIM_OC4_SetConfig+0x84>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a14      	ldr	r2, [pc, #80]	; (8003574 <TIM_OC4_SetConfig+0xd0>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d109      	bne.n	800353c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800352e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	019b      	lsls	r3, r3, #6
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	4313      	orrs	r3, r2
 800353a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	621a      	str	r2, [r3, #32]
}
 8003556:	bf00      	nop
 8003558:	371c      	adds	r7, #28
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	40012c00 	.word	0x40012c00
 8003568:	40013400 	.word	0x40013400
 800356c:	40014000 	.word	0x40014000
 8003570:	40014400 	.word	0x40014400
 8003574:	40014800 	.word	0x40014800

08003578 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003578:	b480      	push	{r7}
 800357a:	b087      	sub	sp, #28
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800359e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80035bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	041b      	lsls	r3, r3, #16
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a17      	ldr	r2, [pc, #92]	; (800362c <TIM_OC5_SetConfig+0xb4>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d00f      	beq.n	80035f2 <TIM_OC5_SetConfig+0x7a>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a16      	ldr	r2, [pc, #88]	; (8003630 <TIM_OC5_SetConfig+0xb8>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d00b      	beq.n	80035f2 <TIM_OC5_SetConfig+0x7a>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a15      	ldr	r2, [pc, #84]	; (8003634 <TIM_OC5_SetConfig+0xbc>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d007      	beq.n	80035f2 <TIM_OC5_SetConfig+0x7a>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a14      	ldr	r2, [pc, #80]	; (8003638 <TIM_OC5_SetConfig+0xc0>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d003      	beq.n	80035f2 <TIM_OC5_SetConfig+0x7a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a13      	ldr	r2, [pc, #76]	; (800363c <TIM_OC5_SetConfig+0xc4>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d109      	bne.n	8003606 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	021b      	lsls	r3, r3, #8
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	4313      	orrs	r3, r2
 8003604:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	621a      	str	r2, [r3, #32]
}
 8003620:	bf00      	nop
 8003622:	371c      	adds	r7, #28
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	40012c00 	.word	0x40012c00
 8003630:	40013400 	.word	0x40013400
 8003634:	40014000 	.word	0x40014000
 8003638:	40014400 	.word	0x40014400
 800363c:	40014800 	.word	0x40014800

08003640 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003640:	b480      	push	{r7}
 8003642:	b087      	sub	sp, #28
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a1b      	ldr	r3, [r3, #32]
 8003654:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800366e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003672:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	021b      	lsls	r3, r3, #8
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	4313      	orrs	r3, r2
 800367e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003686:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	051b      	lsls	r3, r3, #20
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	4313      	orrs	r3, r2
 8003692:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a18      	ldr	r2, [pc, #96]	; (80036f8 <TIM_OC6_SetConfig+0xb8>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d00f      	beq.n	80036bc <TIM_OC6_SetConfig+0x7c>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a17      	ldr	r2, [pc, #92]	; (80036fc <TIM_OC6_SetConfig+0xbc>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d00b      	beq.n	80036bc <TIM_OC6_SetConfig+0x7c>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a16      	ldr	r2, [pc, #88]	; (8003700 <TIM_OC6_SetConfig+0xc0>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d007      	beq.n	80036bc <TIM_OC6_SetConfig+0x7c>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a15      	ldr	r2, [pc, #84]	; (8003704 <TIM_OC6_SetConfig+0xc4>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d003      	beq.n	80036bc <TIM_OC6_SetConfig+0x7c>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a14      	ldr	r2, [pc, #80]	; (8003708 <TIM_OC6_SetConfig+0xc8>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d109      	bne.n	80036d0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	029b      	lsls	r3, r3, #10
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	621a      	str	r2, [r3, #32]
}
 80036ea:	bf00      	nop
 80036ec:	371c      	adds	r7, #28
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	40012c00 	.word	0x40012c00
 80036fc:	40013400 	.word	0x40013400
 8003700:	40014000 	.word	0x40014000
 8003704:	40014400 	.word	0x40014400
 8003708:	40014800 	.word	0x40014800

0800370c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800370c:	b480      	push	{r7}
 800370e:	b087      	sub	sp, #28
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	f023 0201 	bic.w	r2, r3, #1
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003736:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	011b      	lsls	r3, r3, #4
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	4313      	orrs	r3, r2
 8003740:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f023 030a 	bic.w	r3, r3, #10
 8003748:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	4313      	orrs	r3, r2
 8003750:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	621a      	str	r2, [r3, #32]
}
 800375e:	bf00      	nop
 8003760:	371c      	adds	r7, #28
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800376a:	b480      	push	{r7}
 800376c:	b087      	sub	sp, #28
 800376e:	af00      	add	r7, sp, #0
 8003770:	60f8      	str	r0, [r7, #12]
 8003772:	60b9      	str	r1, [r7, #8]
 8003774:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	f023 0210 	bic.w	r2, r3, #16
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003794:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	031b      	lsls	r3, r3, #12
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	4313      	orrs	r3, r2
 800379e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	011b      	lsls	r3, r3, #4
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	621a      	str	r2, [r3, #32]
}
 80037be:	bf00      	nop
 80037c0:	371c      	adds	r7, #28
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr

080037ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037ca:	b480      	push	{r7}
 80037cc:	b085      	sub	sp, #20
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
 80037d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	f043 0307 	orr.w	r3, r3, #7
 80037ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	609a      	str	r2, [r3, #8]
}
 80037f4:	bf00      	nop
 80037f6:	3714      	adds	r7, #20
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003800:	b480      	push	{r7}
 8003802:	b087      	sub	sp, #28
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
 800380c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800381a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	021a      	lsls	r2, r3, #8
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	431a      	orrs	r2, r3
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	4313      	orrs	r3, r2
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	4313      	orrs	r3, r2
 800382c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	609a      	str	r2, [r3, #8]
}
 8003834:	bf00      	nop
 8003836:	371c      	adds	r7, #28
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003840:	b480      	push	{r7}
 8003842:	b087      	sub	sp, #28
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	f003 031f 	and.w	r3, r3, #31
 8003852:	2201      	movs	r2, #1
 8003854:	fa02 f303 	lsl.w	r3, r2, r3
 8003858:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6a1a      	ldr	r2, [r3, #32]
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	43db      	mvns	r3, r3
 8003862:	401a      	ands	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6a1a      	ldr	r2, [r3, #32]
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	f003 031f 	and.w	r3, r3, #31
 8003872:	6879      	ldr	r1, [r7, #4]
 8003874:	fa01 f303 	lsl.w	r3, r1, r3
 8003878:	431a      	orrs	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	621a      	str	r2, [r3, #32]
}
 800387e:	bf00      	nop
 8003880:	371c      	adds	r7, #28
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
	...

0800388c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800389c:	2b01      	cmp	r3, #1
 800389e:	d101      	bne.n	80038a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038a0:	2302      	movs	r3, #2
 80038a2:	e068      	b.n	8003976 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2202      	movs	r2, #2
 80038b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a2e      	ldr	r2, [pc, #184]	; (8003984 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d004      	beq.n	80038d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a2d      	ldr	r2, [pc, #180]	; (8003988 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d108      	bne.n	80038ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80038de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a1e      	ldr	r2, [pc, #120]	; (8003984 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d01d      	beq.n	800394a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003916:	d018      	beq.n	800394a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a1b      	ldr	r2, [pc, #108]	; (800398c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d013      	beq.n	800394a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a1a      	ldr	r2, [pc, #104]	; (8003990 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d00e      	beq.n	800394a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a18      	ldr	r2, [pc, #96]	; (8003994 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d009      	beq.n	800394a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a13      	ldr	r2, [pc, #76]	; (8003988 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d004      	beq.n	800394a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a14      	ldr	r2, [pc, #80]	; (8003998 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d10c      	bne.n	8003964 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003950:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	68ba      	ldr	r2, [r7, #8]
 8003958:	4313      	orrs	r3, r2
 800395a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3714      	adds	r7, #20
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	40012c00 	.word	0x40012c00
 8003988:	40013400 	.word	0x40013400
 800398c:	40000400 	.word	0x40000400
 8003990:	40000800 	.word	0x40000800
 8003994:	40000c00 	.word	0x40000c00
 8003998:	40014000 	.word	0x40014000

0800399c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e040      	b.n	8003a30 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d106      	bne.n	80039c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7fd f86e 	bl	8000aa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2224      	movs	r2, #36	; 0x24
 80039c8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 0201 	bic.w	r2, r2, #1
 80039d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d002      	beq.n	80039e8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 fae0 	bl	8003fa8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 f825 	bl	8003a38 <UART_SetConfig>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d101      	bne.n	80039f8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e01b      	b.n	8003a30 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	689a      	ldr	r2, [r3, #8]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f042 0201 	orr.w	r2, r2, #1
 8003a26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 fb5f 	bl	80040ec <UART_CheckIdleState>
 8003a2e:	4603      	mov	r3, r0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3708      	adds	r7, #8
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a3c:	b08a      	sub	sp, #40	; 0x28
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a42:	2300      	movs	r3, #0
 8003a44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	431a      	orrs	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	431a      	orrs	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	69db      	ldr	r3, [r3, #28]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	4ba4      	ldr	r3, [pc, #656]	; (8003cf8 <UART_SetConfig+0x2c0>)
 8003a68:	4013      	ands	r3, r2
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	6812      	ldr	r2, [r2, #0]
 8003a6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a70:	430b      	orrs	r3, r1
 8003a72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	68da      	ldr	r2, [r3, #12]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a99      	ldr	r2, [pc, #612]	; (8003cfc <UART_SetConfig+0x2c4>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d004      	beq.n	8003aa4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a90      	ldr	r2, [pc, #576]	; (8003d00 <UART_SetConfig+0x2c8>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d126      	bne.n	8003b10 <UART_SetConfig+0xd8>
 8003ac2:	4b90      	ldr	r3, [pc, #576]	; (8003d04 <UART_SetConfig+0x2cc>)
 8003ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac8:	f003 0303 	and.w	r3, r3, #3
 8003acc:	2b03      	cmp	r3, #3
 8003ace:	d81b      	bhi.n	8003b08 <UART_SetConfig+0xd0>
 8003ad0:	a201      	add	r2, pc, #4	; (adr r2, 8003ad8 <UART_SetConfig+0xa0>)
 8003ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad6:	bf00      	nop
 8003ad8:	08003ae9 	.word	0x08003ae9
 8003adc:	08003af9 	.word	0x08003af9
 8003ae0:	08003af1 	.word	0x08003af1
 8003ae4:	08003b01 	.word	0x08003b01
 8003ae8:	2301      	movs	r3, #1
 8003aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aee:	e116      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003af0:	2302      	movs	r3, #2
 8003af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003af6:	e112      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003af8:	2304      	movs	r3, #4
 8003afa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003afe:	e10e      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003b00:	2308      	movs	r3, #8
 8003b02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b06:	e10a      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003b08:	2310      	movs	r3, #16
 8003b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b0e:	e106      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a7c      	ldr	r2, [pc, #496]	; (8003d08 <UART_SetConfig+0x2d0>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d138      	bne.n	8003b8c <UART_SetConfig+0x154>
 8003b1a:	4b7a      	ldr	r3, [pc, #488]	; (8003d04 <UART_SetConfig+0x2cc>)
 8003b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b20:	f003 030c 	and.w	r3, r3, #12
 8003b24:	2b0c      	cmp	r3, #12
 8003b26:	d82d      	bhi.n	8003b84 <UART_SetConfig+0x14c>
 8003b28:	a201      	add	r2, pc, #4	; (adr r2, 8003b30 <UART_SetConfig+0xf8>)
 8003b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b2e:	bf00      	nop
 8003b30:	08003b65 	.word	0x08003b65
 8003b34:	08003b85 	.word	0x08003b85
 8003b38:	08003b85 	.word	0x08003b85
 8003b3c:	08003b85 	.word	0x08003b85
 8003b40:	08003b75 	.word	0x08003b75
 8003b44:	08003b85 	.word	0x08003b85
 8003b48:	08003b85 	.word	0x08003b85
 8003b4c:	08003b85 	.word	0x08003b85
 8003b50:	08003b6d 	.word	0x08003b6d
 8003b54:	08003b85 	.word	0x08003b85
 8003b58:	08003b85 	.word	0x08003b85
 8003b5c:	08003b85 	.word	0x08003b85
 8003b60:	08003b7d 	.word	0x08003b7d
 8003b64:	2300      	movs	r3, #0
 8003b66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b6a:	e0d8      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b72:	e0d4      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003b74:	2304      	movs	r3, #4
 8003b76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b7a:	e0d0      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003b7c:	2308      	movs	r3, #8
 8003b7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b82:	e0cc      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003b84:	2310      	movs	r3, #16
 8003b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b8a:	e0c8      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a5e      	ldr	r2, [pc, #376]	; (8003d0c <UART_SetConfig+0x2d4>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d125      	bne.n	8003be2 <UART_SetConfig+0x1aa>
 8003b96:	4b5b      	ldr	r3, [pc, #364]	; (8003d04 <UART_SetConfig+0x2cc>)
 8003b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b9c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003ba0:	2b30      	cmp	r3, #48	; 0x30
 8003ba2:	d016      	beq.n	8003bd2 <UART_SetConfig+0x19a>
 8003ba4:	2b30      	cmp	r3, #48	; 0x30
 8003ba6:	d818      	bhi.n	8003bda <UART_SetConfig+0x1a2>
 8003ba8:	2b20      	cmp	r3, #32
 8003baa:	d00a      	beq.n	8003bc2 <UART_SetConfig+0x18a>
 8003bac:	2b20      	cmp	r3, #32
 8003bae:	d814      	bhi.n	8003bda <UART_SetConfig+0x1a2>
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d002      	beq.n	8003bba <UART_SetConfig+0x182>
 8003bb4:	2b10      	cmp	r3, #16
 8003bb6:	d008      	beq.n	8003bca <UART_SetConfig+0x192>
 8003bb8:	e00f      	b.n	8003bda <UART_SetConfig+0x1a2>
 8003bba:	2300      	movs	r3, #0
 8003bbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bc0:	e0ad      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bc8:	e0a9      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003bca:	2304      	movs	r3, #4
 8003bcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bd0:	e0a5      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003bd2:	2308      	movs	r3, #8
 8003bd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bd8:	e0a1      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003bda:	2310      	movs	r3, #16
 8003bdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003be0:	e09d      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a4a      	ldr	r2, [pc, #296]	; (8003d10 <UART_SetConfig+0x2d8>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d125      	bne.n	8003c38 <UART_SetConfig+0x200>
 8003bec:	4b45      	ldr	r3, [pc, #276]	; (8003d04 <UART_SetConfig+0x2cc>)
 8003bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003bf6:	2bc0      	cmp	r3, #192	; 0xc0
 8003bf8:	d016      	beq.n	8003c28 <UART_SetConfig+0x1f0>
 8003bfa:	2bc0      	cmp	r3, #192	; 0xc0
 8003bfc:	d818      	bhi.n	8003c30 <UART_SetConfig+0x1f8>
 8003bfe:	2b80      	cmp	r3, #128	; 0x80
 8003c00:	d00a      	beq.n	8003c18 <UART_SetConfig+0x1e0>
 8003c02:	2b80      	cmp	r3, #128	; 0x80
 8003c04:	d814      	bhi.n	8003c30 <UART_SetConfig+0x1f8>
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d002      	beq.n	8003c10 <UART_SetConfig+0x1d8>
 8003c0a:	2b40      	cmp	r3, #64	; 0x40
 8003c0c:	d008      	beq.n	8003c20 <UART_SetConfig+0x1e8>
 8003c0e:	e00f      	b.n	8003c30 <UART_SetConfig+0x1f8>
 8003c10:	2300      	movs	r3, #0
 8003c12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c16:	e082      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003c18:	2302      	movs	r3, #2
 8003c1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c1e:	e07e      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003c20:	2304      	movs	r3, #4
 8003c22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c26:	e07a      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003c28:	2308      	movs	r3, #8
 8003c2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c2e:	e076      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003c30:	2310      	movs	r3, #16
 8003c32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c36:	e072      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a35      	ldr	r2, [pc, #212]	; (8003d14 <UART_SetConfig+0x2dc>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d12a      	bne.n	8003c98 <UART_SetConfig+0x260>
 8003c42:	4b30      	ldr	r3, [pc, #192]	; (8003d04 <UART_SetConfig+0x2cc>)
 8003c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c50:	d01a      	beq.n	8003c88 <UART_SetConfig+0x250>
 8003c52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c56:	d81b      	bhi.n	8003c90 <UART_SetConfig+0x258>
 8003c58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c5c:	d00c      	beq.n	8003c78 <UART_SetConfig+0x240>
 8003c5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c62:	d815      	bhi.n	8003c90 <UART_SetConfig+0x258>
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d003      	beq.n	8003c70 <UART_SetConfig+0x238>
 8003c68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c6c:	d008      	beq.n	8003c80 <UART_SetConfig+0x248>
 8003c6e:	e00f      	b.n	8003c90 <UART_SetConfig+0x258>
 8003c70:	2300      	movs	r3, #0
 8003c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c76:	e052      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003c78:	2302      	movs	r3, #2
 8003c7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c7e:	e04e      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003c80:	2304      	movs	r3, #4
 8003c82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c86:	e04a      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003c88:	2308      	movs	r3, #8
 8003c8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c8e:	e046      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003c90:	2310      	movs	r3, #16
 8003c92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c96:	e042      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a17      	ldr	r2, [pc, #92]	; (8003cfc <UART_SetConfig+0x2c4>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d13a      	bne.n	8003d18 <UART_SetConfig+0x2e0>
 8003ca2:	4b18      	ldr	r3, [pc, #96]	; (8003d04 <UART_SetConfig+0x2cc>)
 8003ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003cac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cb0:	d01a      	beq.n	8003ce8 <UART_SetConfig+0x2b0>
 8003cb2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cb6:	d81b      	bhi.n	8003cf0 <UART_SetConfig+0x2b8>
 8003cb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cbc:	d00c      	beq.n	8003cd8 <UART_SetConfig+0x2a0>
 8003cbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cc2:	d815      	bhi.n	8003cf0 <UART_SetConfig+0x2b8>
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d003      	beq.n	8003cd0 <UART_SetConfig+0x298>
 8003cc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ccc:	d008      	beq.n	8003ce0 <UART_SetConfig+0x2a8>
 8003cce:	e00f      	b.n	8003cf0 <UART_SetConfig+0x2b8>
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cd6:	e022      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003cd8:	2302      	movs	r3, #2
 8003cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cde:	e01e      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003ce0:	2304      	movs	r3, #4
 8003ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ce6:	e01a      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003ce8:	2308      	movs	r3, #8
 8003cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cee:	e016      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003cf0:	2310      	movs	r3, #16
 8003cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cf6:	e012      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003cf8:	efff69f3 	.word	0xefff69f3
 8003cfc:	40008000 	.word	0x40008000
 8003d00:	40013800 	.word	0x40013800
 8003d04:	40021000 	.word	0x40021000
 8003d08:	40004400 	.word	0x40004400
 8003d0c:	40004800 	.word	0x40004800
 8003d10:	40004c00 	.word	0x40004c00
 8003d14:	40005000 	.word	0x40005000
 8003d18:	2310      	movs	r3, #16
 8003d1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a9f      	ldr	r2, [pc, #636]	; (8003fa0 <UART_SetConfig+0x568>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d17a      	bne.n	8003e1e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d2c:	2b08      	cmp	r3, #8
 8003d2e:	d824      	bhi.n	8003d7a <UART_SetConfig+0x342>
 8003d30:	a201      	add	r2, pc, #4	; (adr r2, 8003d38 <UART_SetConfig+0x300>)
 8003d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d36:	bf00      	nop
 8003d38:	08003d5d 	.word	0x08003d5d
 8003d3c:	08003d7b 	.word	0x08003d7b
 8003d40:	08003d65 	.word	0x08003d65
 8003d44:	08003d7b 	.word	0x08003d7b
 8003d48:	08003d6b 	.word	0x08003d6b
 8003d4c:	08003d7b 	.word	0x08003d7b
 8003d50:	08003d7b 	.word	0x08003d7b
 8003d54:	08003d7b 	.word	0x08003d7b
 8003d58:	08003d73 	.word	0x08003d73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d5c:	f7fe f882 	bl	8001e64 <HAL_RCC_GetPCLK1Freq>
 8003d60:	61f8      	str	r0, [r7, #28]
        break;
 8003d62:	e010      	b.n	8003d86 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d64:	4b8f      	ldr	r3, [pc, #572]	; (8003fa4 <UART_SetConfig+0x56c>)
 8003d66:	61fb      	str	r3, [r7, #28]
        break;
 8003d68:	e00d      	b.n	8003d86 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d6a:	f7fd ffe3 	bl	8001d34 <HAL_RCC_GetSysClockFreq>
 8003d6e:	61f8      	str	r0, [r7, #28]
        break;
 8003d70:	e009      	b.n	8003d86 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d76:	61fb      	str	r3, [r7, #28]
        break;
 8003d78:	e005      	b.n	8003d86 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003d84:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 80fb 	beq.w	8003f84 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	685a      	ldr	r2, [r3, #4]
 8003d92:	4613      	mov	r3, r2
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	4413      	add	r3, r2
 8003d98:	69fa      	ldr	r2, [r7, #28]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d305      	bcc.n	8003daa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003da4:	69fa      	ldr	r2, [r7, #28]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d903      	bls.n	8003db2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003db0:	e0e8      	b.n	8003f84 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	2200      	movs	r2, #0
 8003db6:	461c      	mov	r4, r3
 8003db8:	4615      	mov	r5, r2
 8003dba:	f04f 0200 	mov.w	r2, #0
 8003dbe:	f04f 0300 	mov.w	r3, #0
 8003dc2:	022b      	lsls	r3, r5, #8
 8003dc4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003dc8:	0222      	lsls	r2, r4, #8
 8003dca:	68f9      	ldr	r1, [r7, #12]
 8003dcc:	6849      	ldr	r1, [r1, #4]
 8003dce:	0849      	lsrs	r1, r1, #1
 8003dd0:	2000      	movs	r0, #0
 8003dd2:	4688      	mov	r8, r1
 8003dd4:	4681      	mov	r9, r0
 8003dd6:	eb12 0a08 	adds.w	sl, r2, r8
 8003dda:	eb43 0b09 	adc.w	fp, r3, r9
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	603b      	str	r3, [r7, #0]
 8003de6:	607a      	str	r2, [r7, #4]
 8003de8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003dec:	4650      	mov	r0, sl
 8003dee:	4659      	mov	r1, fp
 8003df0:	f7fc f9ea 	bl	80001c8 <__aeabi_uldivmod>
 8003df4:	4602      	mov	r2, r0
 8003df6:	460b      	mov	r3, r1
 8003df8:	4613      	mov	r3, r2
 8003dfa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e02:	d308      	bcc.n	8003e16 <UART_SetConfig+0x3de>
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e0a:	d204      	bcs.n	8003e16 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	60da      	str	r2, [r3, #12]
 8003e14:	e0b6      	b.n	8003f84 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003e1c:	e0b2      	b.n	8003f84 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e26:	d15e      	bne.n	8003ee6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003e28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e2c:	2b08      	cmp	r3, #8
 8003e2e:	d828      	bhi.n	8003e82 <UART_SetConfig+0x44a>
 8003e30:	a201      	add	r2, pc, #4	; (adr r2, 8003e38 <UART_SetConfig+0x400>)
 8003e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e36:	bf00      	nop
 8003e38:	08003e5d 	.word	0x08003e5d
 8003e3c:	08003e65 	.word	0x08003e65
 8003e40:	08003e6d 	.word	0x08003e6d
 8003e44:	08003e83 	.word	0x08003e83
 8003e48:	08003e73 	.word	0x08003e73
 8003e4c:	08003e83 	.word	0x08003e83
 8003e50:	08003e83 	.word	0x08003e83
 8003e54:	08003e83 	.word	0x08003e83
 8003e58:	08003e7b 	.word	0x08003e7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e5c:	f7fe f802 	bl	8001e64 <HAL_RCC_GetPCLK1Freq>
 8003e60:	61f8      	str	r0, [r7, #28]
        break;
 8003e62:	e014      	b.n	8003e8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e64:	f7fe f814 	bl	8001e90 <HAL_RCC_GetPCLK2Freq>
 8003e68:	61f8      	str	r0, [r7, #28]
        break;
 8003e6a:	e010      	b.n	8003e8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e6c:	4b4d      	ldr	r3, [pc, #308]	; (8003fa4 <UART_SetConfig+0x56c>)
 8003e6e:	61fb      	str	r3, [r7, #28]
        break;
 8003e70:	e00d      	b.n	8003e8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e72:	f7fd ff5f 	bl	8001d34 <HAL_RCC_GetSysClockFreq>
 8003e76:	61f8      	str	r0, [r7, #28]
        break;
 8003e78:	e009      	b.n	8003e8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e7e:	61fb      	str	r3, [r7, #28]
        break;
 8003e80:	e005      	b.n	8003e8e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003e82:	2300      	movs	r3, #0
 8003e84:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d077      	beq.n	8003f84 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	005a      	lsls	r2, r3, #1
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	085b      	lsrs	r3, r3, #1
 8003e9e:	441a      	add	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	2b0f      	cmp	r3, #15
 8003eae:	d916      	bls.n	8003ede <UART_SetConfig+0x4a6>
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eb6:	d212      	bcs.n	8003ede <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	f023 030f 	bic.w	r3, r3, #15
 8003ec0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	085b      	lsrs	r3, r3, #1
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	f003 0307 	and.w	r3, r3, #7
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	8afb      	ldrh	r3, [r7, #22]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	8afa      	ldrh	r2, [r7, #22]
 8003eda:	60da      	str	r2, [r3, #12]
 8003edc:	e052      	b.n	8003f84 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003ee4:	e04e      	b.n	8003f84 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ee6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003eea:	2b08      	cmp	r3, #8
 8003eec:	d827      	bhi.n	8003f3e <UART_SetConfig+0x506>
 8003eee:	a201      	add	r2, pc, #4	; (adr r2, 8003ef4 <UART_SetConfig+0x4bc>)
 8003ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef4:	08003f19 	.word	0x08003f19
 8003ef8:	08003f21 	.word	0x08003f21
 8003efc:	08003f29 	.word	0x08003f29
 8003f00:	08003f3f 	.word	0x08003f3f
 8003f04:	08003f2f 	.word	0x08003f2f
 8003f08:	08003f3f 	.word	0x08003f3f
 8003f0c:	08003f3f 	.word	0x08003f3f
 8003f10:	08003f3f 	.word	0x08003f3f
 8003f14:	08003f37 	.word	0x08003f37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f18:	f7fd ffa4 	bl	8001e64 <HAL_RCC_GetPCLK1Freq>
 8003f1c:	61f8      	str	r0, [r7, #28]
        break;
 8003f1e:	e014      	b.n	8003f4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f20:	f7fd ffb6 	bl	8001e90 <HAL_RCC_GetPCLK2Freq>
 8003f24:	61f8      	str	r0, [r7, #28]
        break;
 8003f26:	e010      	b.n	8003f4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f28:	4b1e      	ldr	r3, [pc, #120]	; (8003fa4 <UART_SetConfig+0x56c>)
 8003f2a:	61fb      	str	r3, [r7, #28]
        break;
 8003f2c:	e00d      	b.n	8003f4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f2e:	f7fd ff01 	bl	8001d34 <HAL_RCC_GetSysClockFreq>
 8003f32:	61f8      	str	r0, [r7, #28]
        break;
 8003f34:	e009      	b.n	8003f4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f3a:	61fb      	str	r3, [r7, #28]
        break;
 8003f3c:	e005      	b.n	8003f4a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003f48:	bf00      	nop
    }

    if (pclk != 0U)
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d019      	beq.n	8003f84 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	085a      	lsrs	r2, r3, #1
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	441a      	add	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f62:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	2b0f      	cmp	r3, #15
 8003f68:	d909      	bls.n	8003f7e <UART_SetConfig+0x546>
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f70:	d205      	bcs.n	8003f7e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	60da      	str	r2, [r3, #12]
 8003f7c:	e002      	b.n	8003f84 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003f90:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3728      	adds	r7, #40	; 0x28
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40008000 	.word	0x40008000
 8003fa4:	00f42400 	.word	0x00f42400

08003fa8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb4:	f003 0308 	and.w	r3, r3, #8
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00a      	beq.n	8003fd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00a      	beq.n	8003ff4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00a      	beq.n	8004016 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	430a      	orrs	r2, r1
 8004014:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401a:	f003 0304 	and.w	r3, r3, #4
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00a      	beq.n	8004038 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	430a      	orrs	r2, r1
 8004036:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403c:	f003 0310 	and.w	r3, r3, #16
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00a      	beq.n	800405a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	430a      	orrs	r2, r1
 8004058:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405e:	f003 0320 	and.w	r3, r3, #32
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00a      	beq.n	800407c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	430a      	orrs	r2, r1
 800407a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004084:	2b00      	cmp	r3, #0
 8004086:	d01a      	beq.n	80040be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040a6:	d10a      	bne.n	80040be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00a      	beq.n	80040e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	605a      	str	r2, [r3, #4]
  }
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b098      	sub	sp, #96	; 0x60
 80040f0:	af02      	add	r7, sp, #8
 80040f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040fc:	f7fc fe02 	bl	8000d04 <HAL_GetTick>
 8004100:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0308 	and.w	r3, r3, #8
 800410c:	2b08      	cmp	r3, #8
 800410e:	d12e      	bne.n	800416e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004110:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004114:	9300      	str	r3, [sp, #0]
 8004116:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004118:	2200      	movs	r2, #0
 800411a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f88c 	bl	800423c <UART_WaitOnFlagUntilTimeout>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d021      	beq.n	800416e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004132:	e853 3f00 	ldrex	r3, [r3]
 8004136:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800413a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800413e:	653b      	str	r3, [r7, #80]	; 0x50
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	461a      	mov	r2, r3
 8004146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004148:	647b      	str	r3, [r7, #68]	; 0x44
 800414a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800414e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004150:	e841 2300 	strex	r3, r2, [r1]
 8004154:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1e6      	bne.n	800412a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2220      	movs	r2, #32
 8004160:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e062      	b.n	8004234 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0304 	and.w	r3, r3, #4
 8004178:	2b04      	cmp	r3, #4
 800417a:	d149      	bne.n	8004210 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800417c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004180:	9300      	str	r3, [sp, #0]
 8004182:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004184:	2200      	movs	r2, #0
 8004186:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f856 	bl	800423c <UART_WaitOnFlagUntilTimeout>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d03c      	beq.n	8004210 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419e:	e853 3f00 	ldrex	r3, [r3]
 80041a2:	623b      	str	r3, [r7, #32]
   return(result);
 80041a4:	6a3b      	ldr	r3, [r7, #32]
 80041a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	461a      	mov	r2, r3
 80041b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041b4:	633b      	str	r3, [r7, #48]	; 0x30
 80041b6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041bc:	e841 2300 	strex	r3, r2, [r1]
 80041c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1e6      	bne.n	8004196 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	3308      	adds	r3, #8
 80041ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	e853 3f00 	ldrex	r3, [r3]
 80041d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f023 0301 	bic.w	r3, r3, #1
 80041de:	64bb      	str	r3, [r7, #72]	; 0x48
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3308      	adds	r3, #8
 80041e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041e8:	61fa      	str	r2, [r7, #28]
 80041ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ec:	69b9      	ldr	r1, [r7, #24]
 80041ee:	69fa      	ldr	r2, [r7, #28]
 80041f0:	e841 2300 	strex	r3, r2, [r1]
 80041f4:	617b      	str	r3, [r7, #20]
   return(result);
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1e5      	bne.n	80041c8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2220      	movs	r2, #32
 8004200:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e011      	b.n	8004234 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2220      	movs	r2, #32
 8004214:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2220      	movs	r2, #32
 800421a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3758      	adds	r7, #88	; 0x58
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	603b      	str	r3, [r7, #0]
 8004248:	4613      	mov	r3, r2
 800424a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800424c:	e049      	b.n	80042e2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004254:	d045      	beq.n	80042e2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004256:	f7fc fd55 	bl	8000d04 <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	69ba      	ldr	r2, [r7, #24]
 8004262:	429a      	cmp	r2, r3
 8004264:	d302      	bcc.n	800426c <UART_WaitOnFlagUntilTimeout+0x30>
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e048      	b.n	8004302 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0304 	and.w	r3, r3, #4
 800427a:	2b00      	cmp	r3, #0
 800427c:	d031      	beq.n	80042e2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	69db      	ldr	r3, [r3, #28]
 8004284:	f003 0308 	and.w	r3, r3, #8
 8004288:	2b08      	cmp	r3, #8
 800428a:	d110      	bne.n	80042ae <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2208      	movs	r2, #8
 8004292:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f000 f838 	bl	800430a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2208      	movs	r2, #8
 800429e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e029      	b.n	8004302 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	69db      	ldr	r3, [r3, #28]
 80042b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042bc:	d111      	bne.n	80042e2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f000 f81e 	bl	800430a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2220      	movs	r2, #32
 80042d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e00f      	b.n	8004302 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	69da      	ldr	r2, [r3, #28]
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	4013      	ands	r3, r2
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	bf0c      	ite	eq
 80042f2:	2301      	moveq	r3, #1
 80042f4:	2300      	movne	r3, #0
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	461a      	mov	r2, r3
 80042fa:	79fb      	ldrb	r3, [r7, #7]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d0a6      	beq.n	800424e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800430a:	b480      	push	{r7}
 800430c:	b095      	sub	sp, #84	; 0x54
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800431a:	e853 3f00 	ldrex	r3, [r3]
 800431e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004322:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004326:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	461a      	mov	r2, r3
 800432e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004330:	643b      	str	r3, [r7, #64]	; 0x40
 8004332:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004334:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004336:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004338:	e841 2300 	strex	r3, r2, [r1]
 800433c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800433e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1e6      	bne.n	8004312 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	3308      	adds	r3, #8
 800434a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434c:	6a3b      	ldr	r3, [r7, #32]
 800434e:	e853 3f00 	ldrex	r3, [r3]
 8004352:	61fb      	str	r3, [r7, #28]
   return(result);
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	f023 0301 	bic.w	r3, r3, #1
 800435a:	64bb      	str	r3, [r7, #72]	; 0x48
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	3308      	adds	r3, #8
 8004362:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004364:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004366:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004368:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800436a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800436c:	e841 2300 	strex	r3, r2, [r1]
 8004370:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1e5      	bne.n	8004344 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800437c:	2b01      	cmp	r3, #1
 800437e:	d118      	bne.n	80043b2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	e853 3f00 	ldrex	r3, [r3]
 800438c:	60bb      	str	r3, [r7, #8]
   return(result);
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	f023 0310 	bic.w	r3, r3, #16
 8004394:	647b      	str	r3, [r7, #68]	; 0x44
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	461a      	mov	r2, r3
 800439c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800439e:	61bb      	str	r3, [r7, #24]
 80043a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a2:	6979      	ldr	r1, [r7, #20]
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	e841 2300 	strex	r3, r2, [r1]
 80043aa:	613b      	str	r3, [r7, #16]
   return(result);
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1e6      	bne.n	8004380 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2220      	movs	r2, #32
 80043b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80043c6:	bf00      	nop
 80043c8:	3754      	adds	r7, #84	; 0x54
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr

080043d2 <memset>:
 80043d2:	4402      	add	r2, r0
 80043d4:	4603      	mov	r3, r0
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d100      	bne.n	80043dc <memset+0xa>
 80043da:	4770      	bx	lr
 80043dc:	f803 1b01 	strb.w	r1, [r3], #1
 80043e0:	e7f9      	b.n	80043d6 <memset+0x4>
	...

080043e4 <__libc_init_array>:
 80043e4:	b570      	push	{r4, r5, r6, lr}
 80043e6:	4d0d      	ldr	r5, [pc, #52]	; (800441c <__libc_init_array+0x38>)
 80043e8:	4c0d      	ldr	r4, [pc, #52]	; (8004420 <__libc_init_array+0x3c>)
 80043ea:	1b64      	subs	r4, r4, r5
 80043ec:	10a4      	asrs	r4, r4, #2
 80043ee:	2600      	movs	r6, #0
 80043f0:	42a6      	cmp	r6, r4
 80043f2:	d109      	bne.n	8004408 <__libc_init_array+0x24>
 80043f4:	4d0b      	ldr	r5, [pc, #44]	; (8004424 <__libc_init_array+0x40>)
 80043f6:	4c0c      	ldr	r4, [pc, #48]	; (8004428 <__libc_init_array+0x44>)
 80043f8:	f000 f818 	bl	800442c <_init>
 80043fc:	1b64      	subs	r4, r4, r5
 80043fe:	10a4      	asrs	r4, r4, #2
 8004400:	2600      	movs	r6, #0
 8004402:	42a6      	cmp	r6, r4
 8004404:	d105      	bne.n	8004412 <__libc_init_array+0x2e>
 8004406:	bd70      	pop	{r4, r5, r6, pc}
 8004408:	f855 3b04 	ldr.w	r3, [r5], #4
 800440c:	4798      	blx	r3
 800440e:	3601      	adds	r6, #1
 8004410:	e7ee      	b.n	80043f0 <__libc_init_array+0xc>
 8004412:	f855 3b04 	ldr.w	r3, [r5], #4
 8004416:	4798      	blx	r3
 8004418:	3601      	adds	r6, #1
 800441a:	e7f2      	b.n	8004402 <__libc_init_array+0x1e>
 800441c:	08004494 	.word	0x08004494
 8004420:	08004494 	.word	0x08004494
 8004424:	08004494 	.word	0x08004494
 8004428:	08004498 	.word	0x08004498

0800442c <_init>:
 800442c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800442e:	bf00      	nop
 8004430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004432:	bc08      	pop	{r3}
 8004434:	469e      	mov	lr, r3
 8004436:	4770      	bx	lr

08004438 <_fini>:
 8004438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800443a:	bf00      	nop
 800443c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800443e:	bc08      	pop	{r3}
 8004440:	469e      	mov	lr, r3
 8004442:	4770      	bx	lr
